\input texinfo  @c -*-texinfo-*-
@c %**start of header
@setfilename scsh.info
@settitle Scsh Reference Manual
@synindex vr fn @c Use `@vindex' and `@findex', respectively.
@c %**end of header


@c Part 2: Summary Description and Copyright
@c -----------------------------------------

@copying
This manual is for scsh, release 0.6.7.

Copyright @copyright{} 2006 Olin Shivers, Brian D. Carlstrom, Martin Gasbichler, and Mike Sperber
@end copying


@c Part 3: Titlepage, Contents, Copyright
@c --------------------------------------

@titlepage
@title Scsh Reference Manual
@subtitle For scsh release 0.6.7

@author Olin Shivers
@author Brian D. Carlstrom
@author Martin Gasbichler
@author Mike Sperber

@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c Output the table of contents at the beginning.
@contents

@c Part 4: `Top' Node and Master Menu
@c ----------------------------------

@ifnottex
@node Top
@top Scsh Reference Manual

For scsh release 0.6.7

Olin Shivers, Brian D. Carlstrom, Martin Gasbichler, and Mike Sperber
@end ifnottex

@menu
* Introduction::
* Process notation::
* System Calls::
* Networking::
* Strings and characters::
* Pattern-matching strings with regular expressions::
* Reading delimited strings::
* Awk record I/O and field parsing::
* Concurrent system programming::
* Miscellaneous routines::
* Running scsh::
* Index::               Complete index.

@c @detailmenu
@c --- The Detailed Node Listing ---

@c Introduction

@c * Copyright & source-code license::
@c * Obtaining scsh::
@c * Building scsh::
@c * Caveats::
@c * Naming conventions::
@c * Lexical issues::
@c * Record types and the define-record form::
@c * A word about Unix standards::

@c Process notation

@c * Extended process forms and I/O redirections::
@c * Process forms::
@c * Using extended process forms in Scheme::
@c * More complex process operations::
@c * Conditional process sequencing forms::
@c * Process filters::

@c System Calls

@c * Errors::
@c * I/O::
@c * File system::
@c * Processes::
@c * Process state::
@c * User and group database access::
@c * Accessing command-line arguments::
@c * System parameters::
@c * Signal system::
@c * Time::
@c * Environment variables::
@c * Terminal device control::

@c Networking

@c * High-level interface::
@c * Sockets::
@c * Socket addresses::
@c * Socket primitives::
@c * Performing input and output on sockets::
@c * Socket options::
@c * Database-information entries::

@c Strings and characters

@c * Manipulating file names::
@c * Other string manipulation facilities::
@c * ASCII encoding::
@c * Character predicates::
@c * Deprecated character-set procedures::

@c Pattern-matching strings with regular expressions

@c * Summary SRE syntax::
@c * Examples::
@c * A short tutorial::
@c * Regexp functions::
@c * The regexp ADT::
@c * Syntax-hacking tools::

@c Reading delimited strings

@c Awk record I/O and field parsing

@c * Record I/O and field parsing::
@c * Awk::
@c * Backwards compatibility::

@c Concurrent system programming

@c * Threads::
@c * Locks::
@c * Placeholders::
@c * The event interface to interrupts::
@c * Interaction between threads and process state::

@c Miscellaneous routines

@c * Integer bitwise ops::
@c * Password encryption::
@c * Dot-Locking::
@c * Syslog facility::
@c * MD5 interface::
@c * Configuration variables::

@c Running scsh

@c * Scsh command-line switches::
@c * The scsh virtual machine::
@c * Compiling scsh programs::
@c * Standard file locations::

@c @end detailmenu
@end menu


@c Part 5: The Body of the Document
@c --------------------------------

@unnumbered Acknowledgements

Who should I thank? My so-called ``colleagues'', who laugh at me
behind my back, all the while becoming famous on @emph{my} work? My
worthless graduate students, whose computer skills appear to be
limited to downloading bitmaps off of netnews? My parents, who are
still waiting for me to quit ``fooling around with computers'', go to
med school, and become a radiologist? My department chairman, a
manager who gives one new insight into and sympathy for disgruntled
postal workers?

My God, no one could blame me--no one!--if I went off the edge and
just lost it completely one day. I couldn't get through the day as it is
without the Prozac and Jack Daniels I keep on the shelf, behind my
Tops-20 JSYS manuals. I start getting the shakes real bad around 10am,
right before my advisor meetings. A 10 oz. Jack 'n Zac helps me get
through the meetings without one of my students winding up with his
severed head in a bowling-ball bag. They look at me funny; they think I
twitch a lot. I'm not twitching. I'm controlling my impulse to snag my
9mm Sig-Sauer out from my day-pack and make a few strong points about
the quality of undergraduate education in Amerika.

If I thought anyone cared, if I thought anyone would even be reading
this, I'd probably make an effort to keep up appearances until the last
possible moment. But no one does, and no one will. So I can pretty much
say exactly what I think.

Oh, yes, the @emph{acknowledgements}. I think not. I did it. I did it
all, by myself.

@flushright
Olin Shivers
Cambridge
September 4, 1994
@end flushright

@node Introduction
@chapter Introduction

This is the reference manual for scsh, a Unix shell that is embedded
within Scheme. Scsh is a Scheme system designed for writing useful
standalone Unix programs and shell scripts---it spans a wide range of
application, from ``script'' applications usually handled with perl or
sh, to more standard systems applications usually written in C.

Scsh comes built on top of Scheme 48, and has two components: a
process notation for running programs and setting up pipelines and
redirections, and a complete syscall library for low-level access to the
operating system. This manual gives a complete description of scsh. A
general discussion of the design principles behind scsh can be found in
a companion paper, ``A Scheme Shell''.

@section Copyright & source-code license
Scsh is open source. The complete sources come with the standard
distribution, which can be downloaded off the net. Scsh has an
ideologically hip, BSD-style license.

We note that the code is a rich source for other Scheme implementations
to mine. Not only the @emph{code}, but the @emph{APIs} are available for
implementors working on Scheme environments for systems
programming. These APIs represent years of work, and should provide a
big head-start on any related effort. (Just don't call it ``scsh'',
unless it's @emph{exactly} compliant with the scsh interfaces.)

Take all the code you like; we'll just write more.

@section Obtaining scsh
Scsh is distributed via net publication. We place new releases at
well-known network sites, and allow them to propagate from there. We
currently release scsh to the following Internet sites:

@flushleft
@url{ftp://ftp.scsh.net/pub/scsh}
@url{http://prdownloads.sourceforge.net/scsh/}
@end flushleft

Each should have a compressed tar file of the entire scsh release, which
includes all the source code and the manual, and a separate file
containing just this manual in Postscript form, for those who simply
wish to read about the system.

However, nothing is certain for long on the Net. Probably the best way
to get a copy of scsh is to use a network resource-discovery tool, such
as archie, to find ftp servers storing scsh tar files. Take the set of
sites storing the most recent release of scsh, choose one close to your
site, and download the tar file.

@section Building scsh
Scsh currently runs on a fairly large set of Unix systems, including
Linux, FreeBSD, OpenBSD, NetBSD, MacOS X, SunOS, Solaris, AIX, NeXTSTEP,
Irix, and HP-UX. We use the Gnu project's autoconfig tool to generate
self-configuring shell scripts that customise the scsh Makefile for
different OS variants. This means that if you use one of the common Unix
implementations, building scsh should require exactly the following
steps:

@example
gunzip scsh.tar.gz      # Uncompress the release tar file.
untar xfv scsh.tar      # Unpack the source code.
cd scsh-0.6.x           # Move to the source directory.
./configure             # Examine host; build Makefile.
make                    # Build system.
@end example

When you are done, you should have a virtual machine compiled in file
`scshvm', and a heap image in file `scsh/scsh.image'. Typing

@example
make install
@end example

will install these programs in your installation directory (by default,
@code{/usr/local}), along with a small stub startup binary, @code{scsh}.

If you don't have the patience to do this, you can start up a Scheme
shell immediately after the initial make by simply saying

@example
./scshvm -o ./scshvm -i scsh/scsh.image
@end example

See @ref{Running scsh} for full details on installation locations and
startup options.

It is not too difficult to port scsh to another Unix platform if your OS
is not supported by the current release. See the release notes for more
details on how to do this.

@section Caveats
It is important to note what scsh is not, as well as what it is. Scsh,
in the current release, is primarily designed for the writing of shell
scripts---programming.  It is not a very comfortable system for
interactive command use: the current release lacks job control,
command-line editing, a terse, convenient command syntax, and it does
not read in an initialisation file analogous to @code{.login} or
@code{.profile}. We hope to address all of these issues in future
releases; we even have designs for several of these features; but the
system as-released does not currently provide these features.

@section Naming conventions
Scsh follows a general naming scheme that consistently employs a set of
abbreviations. This is intended to make it easier to remember the names
of things.  Some of the common ones are:

@defvr fdes
Means ``file descriptor'', a small integer used in Unix to represent I/O
channels.
@end defvr

@defvr ...*
A given bit of functionality sometimes comes in two related forms,
the first being a special form that contains a body of Scheme code to be
executed in some context, and the other being a procedure that takes a
procedural argument (a ``thunk'') to be called in the same context. The
procedure variant is named by taking the name of the special form, and
appending an asterisk. For example:

@example
;;; Special form:
(with-cwd "/etc"
  (for-each print-file (directory-files))
  (display "All done"))

;;; Procedure:
(with-cwd* "/etc"
  (lambda ()
    (for-each print-file (directory-files))
    (display "All done")))
@end example
@end defvr

@defvr action/modifier
The infix ``/'' is pronounced ``with'', as in @code{exec/env}---
``exec with environment''.
@end defvr

@defvr call/...
Procedures that call their argument on some computed value are usually
named @code{call/@dots{}}, e.g., @code{(call/fdes @var{port} @var{proc})}, which
calls @var{proc} on @var{port}'s file descriptor, returning whatever
@var{proc} returns. The abbreviated name means ``call with file
descriptor''.
@end defvr

@defvr with-...
Procedures that call their argument, and special forms that execute
their bodies in some special dynamic context frequently have names of
the form @code{with-@dots{}}. For example, @code{(with-env @var{env}
@math{body_1} @dots{})} and @code{(with-env* @var{env}
@var{thunk})}. These forms set the process environment body, execute
their body or thunk, and then return after resetting the environment
to its original state.
@end defvr

@defvr create-...
Procedures that create objects in the file system (files,
directories,temp files, fifos, etc.), begin with
@code{create-@dots{}}.
@end defvr

@defvr delete-...
Procedures that delete objects from the file system (files,
directories,temp files, fifos, etc.), begin with
@code{delete-@dots{}}.
@end defvr

@defvr record:field
Procedures that access fields of a record are usually written with a
colon between the name of the record and the name of the field, as in
@code{user-info:home-dir}.
@end defvr

@defvr %...
A percent sign is used to prefix lower-level scsh primitives that are
not commonly used.
@end defvr

@defvr ...-info
Data structures packaging up information about various OS entities
frequently end in @dots{}@code{-info}. Examples: @code{user-info},
@code{file-info}, @code{group-info}, and @code{host-info}.
@end defvr

Enumerated constants from some set @emph{s} are usually named
@code{s/@math{const_1}}, @code{s/@math{const_2}}, @dots{}. For
example, the various Unix signal integers have the names
@code{signal/cont}, @code{signal/kill}, @code{signal/int},
@code{signal/hup}, and so forth.

@section Lexical issues
Scsh's lexical syntax is just R5RS Scheme, with the following exceptions.

@subsection Extended symbol syntax
Scsh's symbol syntax differs from R5RS Scheme in the following ways:

@itemize @bullet
@item
In scsh, symbol case is preserved by @code{read} and is significant on
symbol comparison. This means

@example
(run (less Readme))
@end example

displays the right file.

@item
``-'' and ``+'' are allowed to begin symbols. So the following are
legitimate symbols:

@example
-O2 -geometry +Wn
@end example

@item
``|'' and ``.'' are symbol constituents. This allows @code{|} for the
pipe symbol, and @code{..} for the parent-directory symbol. (Of course,
``.'' alone is not a symbol, but a dotted-pair marker.)

@item
A symbol may begin with a digit. So the following are legitimate symbols:

@example
9x15 80x36-3+440
@end example
@end itemize

@subsection Extended string syntax
Scsh strings are allowed to contain the @acronym{ANSI} C escape sequences such as
@code{\n} and @code{\161}.

@subsection Block comments and executable interpreter-triggers
Scsh allows source files to begin with a header of the form

@example
#!/usr/local/bin/scsh -s
@end example

The Unix operating system treats source files beginning with the headers
of this form specially; they can be directly executed by the operating
system (see @ref{Running scsh} for information on how to use this
feature). The scsh interpreter ignores this special header by treating
@code{#!} as a comment marker similar to @code{;}. When the scsh reader
encounters @code{#!}, it skips characters until it finds the closing
sequence newline/exclamation-point/sharp-sign/newline.

Although the form of the @code{#!} read-macro was chosen to support
interpreter-triggers for executable Unix scripts, it is a general
block-comment sequence and can be used as such anywhere in a scsh
program.

@subsection Here-strings
The read macro @code{#<} is used to introduce ``here-strings'' in
programs, similar to the @code{<<} ``here document'' redirections
provided by sh and csh. There are two kinds of here-string,
character-delimited and line-delimited; they are both introduced by the
@code{#<} sequence.

@subsubsection Character-delimited here-strings
A character-delimited here-string has the form

@example
#<x ... stuff ... x
@end example

where @emph{x} is any single character (except @code{<}, see below),
which is used to delimit the string bounds. Some examples of
here-strings and their Scheme equivalents:

@table @code
@item #<|Hello, world.|
@code{"Hello, world."}
@item #<!"Ouch," he said.!
@code{"\"Ouch,\" he said."}
@end table

There is no interpretation of characters within the here-string; the
characters are all copied verbatim.

@subsubsection Line-delimited here-strings
If the sequence begins ``@code{#<<}'' then it introduces a line-delimited
here-string. These are similar to the ``here documents'' of @code{sh} and
@code{csh}. Line-delimited here-strings are delimited by the rest of the text
line that follows the @code{#<<} sequence. For example:

@example
#<<FOO
Hello, there.
This is read by Scheme as a string,
terminated by the first occurrence
of newline-F-O-O-newline or newline-F-O-O-@acronym{eof}.
FOO
@end example

Thus,

@example
#<<foo
Hello, world.
foo
@end example

is the same thing as

@example
"Hello, world."
@end example

Line-delimited here-strings are useful for writing down long, constant
strings---such as long, multi-line @code{format} strings, or arguments
to Unix programs, e.g.,

@example
;; Free up some disk space for my netnews files.
(run (csh -c #<<EOF
cd /urops
rm -rf *
echo All done.

EOF
))
@end example

The advantage they have over the double-quote syntax (e.g.,
@code{"Hello, world."}) is that there is no need to backslash-quote
special characters internal to the string, such as the double-quote or
backslash characters.

The detailed syntax of line-delimited here-strings is as follows. The
characters ``@code{#<<}'' begin the here-string. The characters
between the ``@code{#<<} '' and the next newline are the delimiter
line. All characters between the ``@code{#<<}'' and the next newline
comprise the delimiter line---including any white space. The body of
the string begins on the following line, and is terminated by a line
of text which exactly matches the delimiter line. This terminating
line can be ended by either a newline or end-of-file. Absolutely no
interpretation is done on the input string. Control characters, white
space, quotes, backslash---everything is copied as-is. The newline
immediately preceding the terminating delimiter line is not included
in the result string (leave an extra blank line if you need to put a
final newline in the here-string---see the example above). If @acronym{eof} is
encountered before reading the end of the here-string, an error is
signalled.

@subsection Dot
It is unfortunate that the single-dot token, ``.'', is both a
fundamental Unix filename and a deep, primitive syntactic token in
Scheme -- it means the following will not parse correctly in scsh:

@example
(run/strings (find . -name *.c -print))
@end example

You must instead quote the dot:

@example
(run/strings (find "." -name *.c -print))
@end example

When you write shell scripts that manipulate the file system, keep in
mind the special status of the dot token.

@section Record types and the define-record form
@cindex define-record

Scsh's interfaces occasionally provide data in structured record types;
an example is the @code{file-info} record whose various fields describe
the size, protection, last date of modification, and other pertinent
data for a particular file. These record types are described in this
manual using the @code{define-record} notation, which looks like the
following:

@example
(define-record ship
  x
  y
  (size 100))
@end example

This form defines a @var{ship} record, with three fields: its x and y
coordinates, and its size. The values of the @var{x} and @var{y}
fields are specified as parameters to the ship-building procedure,
@code{(make-ship @var{x} @var{y})}, and the @var{size} field is
initialised to 100. All told, the @code{define-record} form above
defines the following procedures:

@table @code
@item (make-ship @var{x} @var{y})
Create a new @var{ship} record.
@item (ship:x @var{ship})
Retrieve the @var{x} field.
@item (ship:y @var{ship})
Retrieve the @var{y} field.
@item (ship:size @var{ship})
Retrieve the @var{size} field.
@item (set-ship:x @var{ship} @var{new-x})
Assign the @var{x} field.
@item (set-ship:y @var{ship} @var{new-y})
Assign the @var{y} field.
@item (set-ship:size @var{ship} @var{new-size})
Assign the @var{size} field.
@item (modify-ship:x @var{ship} @var{xfun})
Modify @var{x} field with @var{xfun}.
@item (modify-ship:y @var{ship} @var{yfun})
Modify @var{y} field with @var{yfun}.
@item (modify-ship:size @var{ship} @var{sizefun})
Modify @var{size} field with @var{sizefun}.
@item (ship? @var{object})
Type predicate.
@item (copy-ship @var{ship})
Shallow-copy of the record.
@end table

An implementation of @code{define-record} is available as a macro for
Scheme programmers to define their own record types; the syntax is
accessed by opening the package @code{defrec-package}, which exports the
single syntax form @code{define-record}. See the source code for the
@code{defrec-package} module for further details of the macro.

You must open this package to access the form. Scsh does not export a
record-definition package by default as there are several from which to
choose. Besides the @code{define-record} macro, which Shivers
prefers @footnote{He wrote it.}, you might instead wish to employ the
notationally-distinct @code{define-record-type} macro that Jonathan Rees
prefers @footnote{He wrote it.}. It can be found in the
@code{define-record-types} structure.

Alternatively, you may define your own, of course.

@section A word about Unix standards
``The wonderful thing about Unix standards is that there are so many to
choose from''. You may be totally bewildered about the multitude of
various standards that exist. Rest assured that nowhere in this manual
will you encounter an attempt to spell it all out for you; you could not
read and internalise such a twisted account without bleeding from the
nose and ears.

However, you might keep in mind the following simple fact: of all the
standards, @acronym{POSIX} is the least common denominator. So when
this manual repeatedly refers to @acronym{POSIX}, the point is ``the
thing we are describing should be portable just about anywhere''. Scsh
sticks to @acronym{POSIX} when at all possible; its major departure is
symbolic links, which aren't in @acronym{POSIX} (see---it really
@emph{is} a least common denominator).

@node Process notation
@chapter Process notation

Scsh has a notation for controlling Unix processes that takes the form
of s-expressions; this notation can then be embedded inside of
standard Scheme code. The basic elements of this notation are
@emph{process forms}, @emph{extended process forms}, and
@emph{redirections}.

@section Extended process forms and I/O redirections
An extended process form is a specification of a Unix process to run,
in a particular I/O environment:

@example
@var{epf} ::= (@var{pf} @math{redir_1 ... redir_n})
@end example

where @var{pf} is a process form and the @math{redir_i} are
redirection specs. A @emph{redirection spec} is one of:

@table @code
@item (< [@var{fdes}] @var{file-name})
Open file for read.
@item (> [@var{fdes}] @var{file-name})
Open file create/truncate.
@item (<< [@var{fdes}] @var{object})
Use @var{object}'s printed representation.
@item (>> [@var{fdes}] @var{file-name})
Open file for append.
@item (= @var{fdes} @var{fdes/port})
Dup2
@item (- fdes/port)
Close @var{fdes/port}.
@item stdports
0,1,2 dup'd from standard ports.
@end table

The input redirections default to file descriptor 0; the output
redirections default to file descriptor 1.

The subforms of a redirection are implicitly backquoted, and symbols
stand for their print-names. So @code{(> ,x)} means ``output to the
file named by Scheme variable @var{x}'', and @code{(<
/usr/shivers/.login)} means ``read from @code{/usr/shivers/.login}''.

Here are two more examples of I/O redirection:

@example
(< ,(vector-ref fv i))
(>> 2 /tmp/buf)
@end example

These two redirections cause the file @code{fv[i]} to be opened on
stdin, and @code{/tmp/buf} to be opened for append writes on stderr.

The redirection @code{(<< @var{object})} causes input to come from
the printed representation of @var{object}. For example,

@example
(<< "The quick brown fox jumped over the lazy dog.")
@end example

causes reads from stdin to produce the characters of the above
string. The object is converted to its printed representation using
the @code{display} procedure, so

@example
(<< (A five element list))
@end example

is the same as

@example
(<< "(A five element list)")
@end example

is the same as

@example
(<< ,(reverse '(list element five A))).
@end example

(Here we use the implicit backquoting feature to compute the list to
be printed.)

The redirection @code{(= @var{fdes} @var{fdes/port})} causes
@var{fdes/port} to be dup'd into file descriptor @var{fdes}. For
example, the redirection

@example
(= 2 1)
@end example

causes stderr to be the same as stdout. @var{Fdes/port} can also be a
port, for example:

@example
(= 2 ,(current-output-port))
@end example

causes stderr to be @code{dup}'d from the current output port. In this
case, it is an error if the port is not a file port (e.g., a string
port). More complex redirections can be accomplished using the
@code{begin} process form, discussed below, which gives the programmer
full control of I/O redirection from Scheme.

@subsection Port and file descriptor sync
It's important to remember that rebinding Scheme's current I/O ports
(e.g.,using @code{call-with-input-file} to rebind the value of
@code{(current-input-port)}) does @emph{not} automatically ``rebind''
the file referenced by the Unix stdio file descriptors 0, 1, and
2. This is impossible to do in general, since some Scheme ports are
not representable as Unix file descriptors. For example, many Scheme
implementations provide ``string ports'', that is, ports that collect
characters sent to them into memory buffers. The accumulated string
can later be retrieved from the port as a string. If a user were to
bind @code{(current-output-port)} to such a port, it would be
impossible to associate file descriptor 1 with this port, as it cannot
be represented in Unix. So, if the user subsequently forked off some
other program as a subprocess, that program would of course not see
the Scheme string port as its standard output.

To keep stdio synced with the values of Scheme's current I/O ports,
use the special redirection @code{stdports}. This causes 0, 1, 2 to be
redirected from the current Scheme standard ports. It is equivalent to
the three redirections:

@example
(= 0 ,(current-input-port))
(= 1 ,(current-output-port))
(= 2 ,(error-output-port))
@end example

The redirections are done in the indicated order. This will cause an
error if one of the current I/O ports isn't a Unix port (e.g., if one is
a string port). This Scheme/Unix I/O synchronisation can also be had in
Scheme code (as opposed to a redirection spec) with the
@code{(stdports->stdio)} procedure.

@section Process forms
A @emph{process form} specifies a computation to perform as an
independent Unix process. It can be one of the following:

@table @code 
@item (begin . @var{scheme-code})
Run @var{scheme-code} in a fork.
@item (| @math{pf_1} @dots{} @math{pf_n})
Simple pipeline.
@item (|+ @var{connect-list} @math{pf_1} @dots{} @math{pf_n})
Complex pipeline.
@item (epf . @var{epf})
An extended process form.
@item (prog @math{arg_1} @dots{} @math{arg_n})
Default: exec the program.
@end table

The default case @code{(@var{prog} @math{arg_1} @dots{}
@math{arg_n})} is also implicitly backquoted. That is, it is
equivalent to:

@example
(begin (apply exec-path `(@var{prog} @math{arg_1} @dots{} @math{arg_n})))
@end example

@code{Exec-path} is the version of the @code{exec(3)} system call that
uses scsh's path list to search for an executable. The program and the
arguments must be either strings, symbols, or integers. Symbols and
integers are coerced to strings. A symbol's print-name is
used. Integers are converted to strings in base 10. Using symbols
instead of strings is convenient, since it suppresses the clutter of
the surrounding ``@dots{}''  quotation marks. To aid this purpose,
scsh reads symbols in a case-sensitive manner, so that you can say

@example
(more Readme)
@end example

and get the right file.

A @emph{connect-list} is a specification of how two processes are to
be wired together by pipes. It has the form @code{((@math{from_1}
@math{from_2} @dots{} @var{to}) @dots{})} and is implicitly
backquoted. For example,

@example
(|+ ((1 2 0) (3 1)) @math{pf_1} @math{pf_2})
@end example

runs @math{pf_1} and @math{pf_2}. The first clause @code{(1 2 0)}
causes @math{pf_1}'s stdout (1) and stderr (2) to be connected via
pipe to @math{pf_2}'s stdin (0). The second clause @code{(3 1)} causes
@math{pf_1}'s file descriptor 3 to be connected to @math{pf_2}'s file
descriptor 1.The @code{begin} process form does a
@code{stdio->stdports} synchronisation in the child process before
executing the body of the form. This guarantees that the @code{begin}
form, like all other process forms, ``sees'' the effects of any
associated I/O redirections.

Note that R5RS does not specify whether or not @code{|} and @code{|+}
are readable symbols. Scsh does.

@section Using extended process forms in Scheme
Process forms and extended process forms are not Scheme. They are a
different notation for expressing computation that, like Scheme, is
based upon s-expressions. Extended process forms are used in Scheme
programs by embedding them inside special Scheme forms. There are
three basic Scheme forms that use extended process forms:
@code{exec-epf}, @code{&}, and @code{run}.

@deffn Macro exec-epf . @var{epf}
The @code{(exec-epf . @var{epf})} form nukes the current process: it
establishes the I/O redirections and then overlays the current process
with the requested computation.
@end deffn

@deffn Macro & . @var{epf}
The @code{(& . @var{epf})} form is similar to @code{exec-epf}, except
that the process is forked off in background. The form returns the
subprocess' process object.
@end deffn

@deffn Macro run . @var{epf}
The @code{(run . @var{epf})} form runs the process in foreground:
after forking off the computation, it waits for the subprocess to
exit, and returns its exit status.
@end deffn

These special forms are macros that expand into the equivalent series
of system calls. The definition of the @code{exec-epf} macro is
non-trivial, as it produces the code to handle I/O redirections and
set up pipelines. However, the definitions of the @code{&} and
@code{run} macros are very simple:

@table @code
@item (& . @var{epf})
@equiv{} @code{(fork (lambda () (exec-epf . @var{epf})))}
@item (run . @var{epf})
@equiv{} @code{(wait (& . @var{epf}))}
@end table

@subsection Procedures and special forms
It is a general design principle in scsh that all functionality made
available through special syntax is also available in a
straightforward procedural form.  So there are procedural equivalents
for all of the process notation. In this way, the programmer is not
restricted by the particular details of the syntax. Here are some of
the syntax/procedure equivalents:

@table @code
@item |
@code{fork/pipe}
@item |+
@code{fork/pipe+}
@item exec-epf
@code{exec-path}
@item <, =, >
Redirection specs use @code{open} and @code{dup}.
@item &
@code{fork}
@item run
@code{wait} + @code{fork}
@end table

Having a solid procedural foundation also allows for general
notational experimentation using Scheme's macros. For example, the
programmer can build his own pipeline notation on top of the
@code{fork} and @code{fork/pipe} procedures. @ref{System Calls} for
the full story on all the procedures in the syscall library.

@subsection Interfacing process output to Scheme
There is a family of procedures and special forms that can be used to
capture the output of processes as Scheme data.

@anchor{run/port}
@deffn Macro run/port . @var{epf}
Value is a port open on process' stdout. Returns immediately after
forking child.
@end deffn

@anchor{run/file}
@deffn Macro run/file . @var{epf}
Value is name of a temp file containing process' output. Returns when
process exits.
@end deffn

@anchor{run/string}
@deffn Macro run/string . @var{epf}
Value is a string containing process' output. Returns when
@acronym{eof} read.
@end deffn

@anchor{run/strings}
@deffn Macro run/strings . @var{epf}
Splits process' output into a list of newline-delimited
strings. Returns when @acronym{eof} read.
@end deffn

@anchor{run/sexp}
@deffn Macro run/sexp . @var{epf}
Reads a single object from process' stdout with @code{read}. Returns
as soon as the read completes.
@end deffn

@anchor{run/sexps}
@deffn Macro run/sexps . @var{epf}
Repeatedly reads objects from process' stdout with
@code{read}. Returns accumulated list upon @acronym{eof}.
@end deffn

These forms all fork off subprocesses, collecting the process' output
to stdout in some form or another. The subprocess runs with file
descriptor 1 and the current output port bound to a pipe.

The delimiting newlines are not included in the strings returned by
@code{run/strings}.

The above special forms just expand into calls to analogous
procedures. For example, @code{(run/port . @var{epf})} expands into

@example
(run/port* (lambda () (exec-epf . @var{epf}))).
@end example

The following procedures are also of utility for generally parsing
input streams in scsh:

@deffn Procedure port->string @var{port}
@code{Port->string} reads the port until @acronym{eof}, then returns
the accumulated string.
@end deffn

@deffn Procedure port->sexp-list @var{port}
@code{Port->sexp-list} repeatedly reads data from the port until
@acronym{eof}, then returns the accumulated list of items.
@end deffn

@deffn Procedure port->string-list @var{port}
@code{Port->string-list} repeatedly reads newline-terminated strings
from the port until @acronym{eof}, then returns the accumulated list
of strings. The delimiting newlines are not part of the returned
strings.
@end deffn

@deffn Procedure port->list @var{reader} @var{port}
@code{Port->list} generalises these two procedures. It uses
@emph{reader} to repeatedly read objects from a port. It accumulates
these objects into a list, which is returned upon @acronym{eof}.
@end deffn

The @code{port->string-list} and @code{port->sexp-list} procedures are
trivial to define, being merely @code{port->list} curried with the
appropriate parsers:

@example
(port->string-list @var{port}) @equiv{} (port->list read-line @var{port})
(port->sexp-list @var{port})   @equiv{} (port->list read @var{port})
@end example

The following compositions also hold:

@example
run/string*     @equiv{} port->string        @bullet{}    run/port*
run/strings*    @equiv{} port->string-list   @bullet{}    run/port*
run/sexp*       @equiv{} read                @bullet{}    run/port*
run/sexps*      @equiv{} port->sexp-list     @bullet{}    run/port*
@end example

@deffn Procedure port-fold @var{port} @var{reader} @var{op} . @var{seeds}
This procedure can be used to perform a variety of iterative
operations over an input stream.  It repeatedly uses @var{reader} to
read an object from @var{port}.  If the first read returns
@acronym{eof}, then the entire @code{port-fold} operation returns the
seeds as multiple values.  If the first read operation returns some
other value @var{v}, then @var{op} is applied to @var{v} and the
seeds: @code{(@var{op} @var{v} . @var{seeds})}.  This should return a
new set of seed values, and the reduction then loops, reading a new
value from the port, and so forth.  (If multiple seed values are used,
then @var{op} must return multiple values.)

For example, @code{(port->list @var{reader} @var{port})} could be
defined as

@example
(reverse (port-fold @var{port} @var{reader} cons '()))
@end example

An imperative way to look at @code{port-fold} is to say that it
abstracts the idea of a loop over a stream of values read from some
port, where the seed values express the loop state.

@flushright
@emph{Remark}: This procedure was formerly named @code{reduce-port}. The old binding is still provided, but is deprecated and will probably vanish in a future release.
@end flushright
@end deffn

@section More complex process operations
The procedures and special forms in the previous section provide for
the common case, where the programmer is only interested in the output
of the process. These special forms and procedures provide more
complicated facilities for manipulating processes.

@subsection Pids and ports together
@deffn Macro run/port+proc . @var{epf}
@deffnx Procedure run/port+proc* @var{thunk}
This special form and its analogous procedure can be used if the
programmer also wishes access to the process' pid, exit status, or
other information. They both fork off a subprocess, returning two
values: a port open on the process' stdout (and current output port),
and the subprocess's process object. A process object encapsulates the
subprocess' process id and exit code; it is the value passed to the
@code{wait} system call.

For example, to uncompress a tech report, reading the uncompressed
data into scsh, and also be able to track the exit status of the
decompression process, use the following:

@example
(receive (port child) (run/port+proc (zcat tr91-145.tex.Z))
  (let* ((paper (port->string port))
    (status (wait child)))
      @dots{} @emph{use paper, status, and child here} @dots{} ))
@end example

Note that you must @emph{first} do the @code{port->string} and
@emph{then} do the @code{wait} -- the other way around may lock up
when the @code{zcat} fills up its output pipe buffer.
@end deffn

@subsection Multiple stream capture
Occasionally, the programmer may want to capture multiple distinct
output streams from a process. For instance, he may wish to read the
stdout and stderr streams into two distinct strings. This is
accomplished with the @code{run/collecting} form and its analogous
procedure, @code{run/collecting*}.

@deffn Macro run/collecting @var{fds} . @var{epf}
@deffnx Procedure run/collecting* @var{fds} @var{thunk}
@code{Run/collecting} runs processes that
produce multiple output streams and return ports open on these
streams. To avoid issues of deadlock, @code{run/collecting} doesn't use
pipes. Instead, it first runs the process with output to temp files,
then returns ports open on the temp files. For example,

@example
(run/collecting (1 2) (ls))
@end example

runs @code{ls} with stdout (fd 1) and stderr (fd 2)
redirected to temporary files. When the @code{ls} is done,
@code{run/collecting} returns three values: the @code{ls} process' exit
status, and two ports open on the temporary files. The files are deleted
before @code{run/collecting} returns, so when the ports are closed, they
vanish. The @var{fds} list of file descriptors is implicitly backquoted
by the special-form version.

For example, if Kaiming has his mailbox protected, then

@example
(receive (status out err)
         (run/collecting (1 2) (cat /usr/kmshea/mbox))
   (list status (port->string out) (port->string err)))
@end example

might produce the list

@example
(256 "" "cat: /usr/kmshea/mbox: Permission denied").
@end example

What is the deadlock hazard that causes @code{run/collecting} to use
tempfiles? Processes with multiple output streams can lock up if they
use pipes to communicate with Scheme I/O readers. For example, suppose
some Unix program @code{myprog} does the following:

@enumerate
@item
First, outputs a single "(" to stderr.
@item
Then, outputs a megabyte of data to stdout.
@item
Finally, outputs a single ")" to stderr, and exits.
@end enumerate

Our scsh programmer decides to run @code{myprog} with stdout and
stderr redirected via Unix pipes to the ports @var{port1} and
@var{port2}, respectively. He gets into trouble when he subsequently
says @code{(read @var{port2})}. The Scheme @code{read} routine reads
the open paren, and then hangs in a @code{read(2)} system call trying
to read a matching close paren. But before @code{myprog} sends the
close paren down the stderr pipe, it first tries to write a megabyte
of data to the stdout pipe. However, Scheme is not reading that pipe
-- it's stuck waiting for input on stderr. So the stdout pipe quickly
fills up, and @code{myprog} hangs, waiting for the pipe to drain. The
@code{myprog} child is stuck in a stdout/@var{port1} write; the
Scheme parent is stuck in a stderr/@var{port2} read. Deadlock.

Here's a concrete example that does exactly the above:

@example
(receive (status port1 port2)
         (run/collecting (1 2)
         (begin
                ;; Write an open paren to stderr.
                (run (echo "(") (= 1 2))
                ;; Copy a lot of stuff to stdout.
                (run (cat /usr/dict/words))
                ;; Write a close paren to stderr.
                (run (echo ")") (= 1 2))))

         ;; OK. Here, I have a port PORT1 built over a pipe
         ;; connected to the BEGIN subproc's stdout, and
         ;; PORT2 built over a pipe connected to the BEGIN
         ;; subproc's stderr.
         (read port2) ; Should return the empty list.
         (port->string port1)) ; Should return a big string.
@end example

In order to avoid this problem, @code{run/collecting} and
@code{run/collecting*} first run the child process to completion,
buffering all the output streams in temp files (using the
@code{temp-file-channel} procedure, see below). When the child process
exits, ports open on the buffered output are returned. This approach
has two disadvantages over using pipes:

@itemize @bullet
@item
The total output from the child output is temporarily written to the
disk before returning from @code{run/collecting}. If this output is
some large intermediate result, the disk could fill up.
@item
The child producer and Scheme consumer are serialised; there is no
concurrency overlap in their execution.
@end itemize

However, it remains a simple solution that avoids deadlock. More
sophisticated solutions can easily be programmed up as
needed---@code{run/collecting*} itself is only 12 lines of simple
code.

See @code{temp-file-channel} for more information on creating temp
files as communication channels.
@end deffn

@section Conditional process sequencing forms
These forms allow conditional execution of a sequence of processes.

@deffn Macro || @math{pf_1} @dots{} @math{pf_n})
Run each proc until one completes successfully (i.e., exit status
zero). Return true if some proc completes successfully; otherwise
@code{#f}.
@end deffn

@deffn Macro && @math{pf_1} @dots{} @math{pf_n}
Run each proc until one fails (i.e., exit status non-zero). Return
true if all procs complete successfully; otherwise @code{#f}.
@end deffn

@section Process filters
These procedures are useful for forking off processes to filter text
streams.

@deffn Procedure make-char-port-filter @var{filter}
The @emph{filter} argument is a character->character
procedure. Returns a procedure that when called, repeatedly reads a
character from the current input port, applies @emph{filter} to the
character, and writes the result to the current output port. The
procedure returns upon reaching @acronym{eof} on the input port.  For example,
to downcase a stream of text in a spell-checking pipeline, instead of
using the Unix @code{tr A-Z a-z} command, we can say:

@example
(run (| (delatex)
        (begin ((char-filter char-downcase))) ; tr A-Z a-z
        (spell)
        (sort)
        (uniq))
     (< scsh.tex)
     (> spell-errors.txt))
@end example
@end deffn

@deffn Procedure make-string-port-filter @var{filter} [@var{buflen}]
The @var{filter} argument is a string->string procedure. Returns a
procedure that when called, repeatedly reads a string from the current
input port, applies @var{filter} to the string, and writes the result
to the current output port.The procedure returns upon reaching @acronym{eof} on
the input port.

The optional @var{buflen} argument controls the number of characters
each internal read operation requests; this means that @var{filter}
will never be applied to a string longer than @var{buflen} chars. The
default @var{buflen} value is 1024.
@end deffn

@node System Calls
@chapter System Calls

Scsh provides (almost) complete access to the basic Unix kernel
services: processes, files, signals and so forth. These procedures
comprise a Scheme binding for @acronym{POSIX}, with a few of the more
standard extensions thrown in (e.g., symbolic links, @code{fchown},
@code{fstat}, sockets).

@section Errors
Scsh syscalls never return error codes, and do not use a global
@code{errno} variable to report errors. Errors are consistently
reported by raising exceptions. This frees up the procedures to return
useful values, and allows the programmer to assume that @emph{if a
syscall returns, it succeeded}. This greatly simplifies the flow of
the code from the programmer's point of view.

Since Scheme does not yet have a standard exception system, the scsh
definition remains somewhat vague on the actual form of exceptions and
exception handlers. When a standard exception system is defined, scsh
will move to it. For now, scsh uses the Scheme 48 exception system,
with a simple sugaring on top to hide the details in the common case.

System call error exceptions contain the Unix @code{errno} code
reported by the system call. Unlike C, the @code{errno} value is a
part of the exception packet, it is not accessed through a global
variable.

For reference purposes, the Unix @code{errno} numbers are bound to the
variables @code{errno/perm}, @code{errno/noent}, etc. System calls
never return @code{error/intr}---they automatically retry.

@deffn Procedure errno-error @var{errno} @var{syscall} . @var{data}
Raises a Unix error exception for Unix error number @code{errno}. The
syscall and data arguments are packaged up in the exception packet
passed to the exception handler.
@end deffn

@deffn Procedure with-errno-handler* @var{handler} @var{thunk}
@deffnx Macro with-errno-handler @var{handler-spec} . @var{body}
Unix syscalls raise error exceptions by calling @code{errno-error}. Programs can use 
@code{with-errno-handler*} to establish handlers for these exceptions.

If a Unix error arises while @var{thunk} is executing, @var{handler} is
called on two arguments like this:

@example
(handler errno packet).
@end example

@var{Packet} is a list of the form

@example
@var{packet} @equiv{} (@var{errno-msg} @var{syscall} . @var{data}),
@end example

where @var{errno-msg} is the standard Unix error message for the
error, @var{syscall} is the procedure that generated the error, and @var{data} is
a list of information generated by the error, which varies from
syscall to syscall.

If @var{handler} returns, the handler search continues
upwards. @var{Handler} can acquire the exception by invoking a saved
continuation. This procedure can be sugared over with the following syntax:

@example
(with-errno-handler
    ((@var{errno} @var{packet}) @var{clause} @dots{})
    @var{body1}
    @var{body2}
    @dots{})
@end example

This form executes the body forms with a particular errno handler
installed. When an errno error is raised, the handler search machinery
will bind variable @var{errno} to the error's integer code, and variable
@var{packet} to the error's auxiliary data packet. Then, the clauses
will be checked for a match. The first clause that matches is executed,
and its value is the value of the entire @code{with-errno-handler} form.
If no clause matches, the handler search continues.

Error clauses have two forms:

@example
((errno @dots{}) @var{body} @dots{})
(else @var{body} @dots{}).
@end example

In the first type of clause, the @var{errno} forms are integer
expressions. They are evaluated and compared to the error's errno value.
An @code{else} clause matches any errno value. Note that the @var{errno}
and @var{data} variables are lexically visible to the error clauses.

Example:

@example
(with-errno-handler
    ((errno packet) ; Only handle 3 particular errors.
     ((errno/wouldblock errno/again)
      (loop))
     ((errno/acces)
      (format #t "Not allowed access!")
      #f))
  (foo frobbotz)
  (blatz garglemumph))
@end example

It is not defined what dynamic context the handler executes in, so fluid
variables cannot reliably be referenced.

Note that Scsh system calls always retry when interrupted, so that the
@code{errno/intr} exception is never raised. If the programmer wishes to
abort a system call on an interrupt, he should have the interrupt
handler explicitly raise an exception or invoke a stored continuation to
throw out of the system call.
@end deffn

@subsection Interactive mode and error handling
Scsh runs in two modes: interactive and script mode. It starts up in
interactive mode if the scsh interpreter is started up with no script
argument. Otherwise, scsh starts up in script mode. The mode determines
whether scsh prints prompts in between reading and evaluating forms, and
it affects the default error handler. In interactive mode, the default
error handler will report the error, and generate an interactive
breakpoint so that the user can interact with the system to examine,
fix, or dismiss from the error. In script mode, the default error
handler causes the scsh process to exit.

When scsh forks a child with @code{(fork)}, the child resets to script
mode. This can be overridden if the programmer wishes.

@section I/O
@subsection Standard R5RS I/O procedures

In scsh, most standard R5RS I/O operations (such as @code{display} or
@code{read-char}) work on both integer file descriptors and Scheme
ports. When doing I/O with a file descriptor, the I/O operation is done
directly on the file, bypassing any buffered data that may have
accumulated in an associated port. Note that character-at-a-time
operations such as @code{read-char} are likely to be quite slow when
performed directly upon file descriptors.

The standard R5RS procedures @code{read-char}, @code{char-ready?},
@code{write}, @code{display}, @code{newline}, and @code{write-char}
are all generic, accepting integer file descriptor arguments as well
as ports. Scsh also mandates the availability of @code{format}, and
further requires @code{format} to accept file descriptor arguments as
well as ports.

The procedures @code{peek-char} and @code{read} do @emph{not} accept
file descriptor arguments, since these functions require the ability
to read ahead in the input stream, a feature not supported by Unix
I/O.

@subsection Port manipulation and standard ports

@deffn Procedure close-after @var{port} @var{consumer}
Returns @code{(@var{consumer} @var{port})}, but closes the port on
return. No @code{dynamic-wind} magic.
@flushright
@emph{Remark}: Is there a less-awkward name?
@end flushright
@end deffn

@deffn Procedure error-output-port
This procedure is analogous to @code{current-output-port}, but
produces a port used for error messages---the scsh equivalent of
stderr.
@end deffn

@deffn Procedure with-current-input-port* @var{port} @var{thunk}
@deffnx Procedure with-current-output-port* @var{port} @var{thunk}
@deffnx Procedure with-error-output-port* @var{port} @var{thunk}
These procedures install @var{port} as the current input, current
output, and error output port, respectively, for the duration of a call
to @var{thunk}.
@end deffn

@deffn Macro with-current-input-port @var{port} . @var{body}
@deffnx Macro with-current-output-port @var{port} . @var{body}
@deffnx Macro with-error-output-port @var{port} . @var{body}
These special forms are simply syntactic sugar for the
@code{with-current-input-port*} procedure and friends.
@end deffn

@deffn Procedure set-current-input-port! @var{port}
@deffnx Procedure set-current-output-port! @var{port}
@deffnx Procedure set-error-output-port! @var{port}
These procedures alter the dynamic binding of the current I/O
port procedures to new values.
@end deffn

@deffn Procedure close @var{fd/port}
Close the port or file descriptor.

If @var{fd/port} is a file descriptor, and it has a port allocated to
it, the port is shifted to a new file descriptor created with @code{(dup
@var{fd/port})} before closing @var{fd/port}. The port then has its
revealed count set to zero.  This reflects the design criteria that
ports are not associated with file descriptors, but with open files.

To close a file descriptor, and any associated port it might have, you
must instead say one of (as appropriate):

@example
(close (fdes->inport @var{fd}))
(close (fdes->outport @var{fd}))
@end example

The procedure returns true if it closed an open port. If the port was
already closed, it returns false; this is not an error.
@end deffn

@deffn Procedure stdports->stdio
@deffnx Procedure stdio->stdports
These two procedures are used to synchronise Unix' standard I/O file
descriptors and Scheme's current I/O ports.

@code{Stdports->stdio} causes the standard I/O file descriptors (0, 1,
and 2) to take their values from the current I/O ports. It is exactly
equivalent to the series of redirections @footnote{Why not
@code{move->fdes}?  Because the current output port and error port might
be the same port.}:

@example
(dup (current-input-port) 0)
(dup (current-output-port) 1)
(dup (error-output-port) 2)
@end example

@code{Stdio->stdports} causes the bindings of the current I/O ports to
be changed to ports constructed over the standard I/O file descriptors.
It is exactly equivalent to the series of assignments

@example
(set-current-input-port! (fdes->inport 0))
(set-current-output-port! (fdes->outport 1))
(set-error-output-port! (fdes->outport 2))
@end example

However, you are more likely to find the dynamic-extent variant,
@code{with-stdio-ports*}, below, to be of use in general programming.
@end deffn

@deffn Procedure with-stdio-ports* @var{thunk}
@deffnx Macro with-stdio-ports @var{body} . . . 
@code{With-stdio-ports*} binds the standard ports
@code{(current-input-port)}, @code{(current-output-port)}, and
@code{(error-output-port)} to be ports on file descriptors 0, 1, 2,
and then calls @var{thunk}. It is equivalent to:

@example
(with-current-input-port (fdes->inport 0)
  (with-current-output-port (fdes->inport 1)
    (with-error-output-port (fdes->outport 2)
      (thunk))))
@end example

The @code{with-stdio-ports} special form is merely syntactic sugar.
@end deffn

@subsection String ports
Scheme 48 has string ports, which you can use. Scsh has not committed
to the particular interface or names that Scheme 48 uses, so be warned
that the interface described herein may be liable to change.

@deffn Procedure make-string-input-port @var{string}
Returns a port that reads characters from the supplied string.
@end deffn

@deffn Procedure make-string-output-port
@deffnx Procedure string-output-port-output @var{port}
A string output port is a port that collects the characters given to it
into a string. The accumulated string is retrieved by applying
@code{string-output-port-output} to the port.
@end deffn

@deffn Procedure call-with-string-output-port @var{procedure}
The @var{procedure} value is called on a port. When it returns,
@code{call-with-string-output-port} returns a string containing the
characters that were written to that port during the execution of
@var{procedure}.
@end deffn

@subsection Revealed ports and file descriptors
The material in this section and the following one is not critical for
most applications. You may safely skim or completely skip this section
on a first reading.

Dealing with Unix file descriptors in a Scheme environment is
difficult. In Unix, open files are part of the process environment,
and are referenced by small integers called @emph{file
descriptors}. Open file descriptors are the fundamental way I/O
redirections are passed to subprocesses, since file descriptors are
preserved across @code{fork}s and @code{exec}s.

Scheme, on the other hand, uses ports for specifying I/O
sources. Ports are garbage-collected Scheme objects, not
integers. Ports can be garbage collected; when a port is collected, it
is also closed. Because file descriptors are just integers, it's
impossible to garbage collect them---you wouldn't be able to close
file descriptor 3 unless there were no 3's in the system, and you
could further prove that your program would never again compute a
3. This is difficult at best.

If a Scheme program only used Scheme ports, and never actually used
file descriptors, this would not be a problem. But Scheme code must
descend to the file descriptor level in at least two circumstances:

@itemize
@item
when interfacing to foreign code
@item
when interfacing to a subprocess.
@end itemize

This causes a problem. Suppose we have a Scheme port constructed on
top of file descriptor 2. We intend to fork off a program that will
inherit this file descriptor. If we drop references to the port, the
garbage collector may prematurely close file 2 before we fork the
subprocess. The interface described below is intended to fix this and
other problems arising from the mismatch between ports and file
descriptors.

The Scheme kernel maintains a port table that maps a file descriptor
to the Scheme port allocated for it (or, @code{#f} if there is no port
allocated for this file descriptor). This is used to ensure that there
is at most one open port for each open file descriptor.

The port data structure for file ports has two fields besides the
descriptor: @var{revealed} and @var{closed?}. When a file port is
closed with @code{(close port)}, the port's file descriptor is closed,
its entry in the port table is cleared, and the port's @var{closed?}
field is set to true.

When a file descriptor is closed with @code{(close fdes)}, any
associated port is shifted to a new file descriptor created with
@code{(dup fdes)}. The port has its revealed count reset to zero (and
hence becomes eligible for closing on GC). See discussion below. To
really put a stake through a descriptor's heart without waiting for
associated ports to be GC'd, you must say one of

@example
(close (fdes->inport @var{fdes}))
(close (fdes->output @var{fdes}))
@end example

The @var{revealed} field is an aid to garbage collection. It is an
integer semaphore. If it is zero, the port's file descriptor can be
closed when the port is collected. Essentially, the @var{revealed}
field reflects whether or not the port's file descriptor has escaped
to the Scheme user. If the Scheme user doesn't know what file
descriptor is associated with a given port, then he can't possibly
retain an ``integer handle'' on the port after dropping pointers to
the port itself, so the garbage collector is free to close the file.

Ports allocated with @code{open-output-file} and
@code{open-input-file} are unrevealed ports---i.e., @var{revealed} is
initialised to 0. No one knows the port's file descriptor, so the file
descriptor can be closed when the port is collected.

The functions @code{fdes->output-port}, @code{fdes->input-port},
@code{port->fdes} are used to shift back and forth between file
descriptors and ports. When @code{port->fdes} reveals a port's file
descriptor, it increments the port's revealed field. When the user is
through with the file descriptor, he can call
@code{(release-port-handle @var{port})}, which decrements the
count. The function @code{(call/fdes fd/port @var{proc})} automates
this protocol. @code{Call/fdes} uses @code{dynamic-wind} to enforce
the protocol. If @var{proc} throws out of the call/fdes application,
the unwind handler releases the descriptor handle; if the user
subsequently tries to throw back into @var{proc}'s context, the wind
handler raises an error. When the user maps a file descriptor to a
port with @code{fdes->outport} or @code{fdes->inport}, the port has
its @var{revealed} field incremented.

Not all file descriptors are created by requests to make ports. Some
are inherited on process invocation via @code{exec(2)}, and are simply
part of the global environment. Subprocesses may depend upon them, so
if a port is later allocated for these file descriptors, it should be
considered as a revealed port. For example, when the Scheme shell's
process starts up, it opens ports on file descriptors 0, 1, and 2 for
the initial values of @code{(current-input-port)},
@code{(current-output-port)}, and @code{(error-output-port)}. These
ports are initialised with @var{revealed} set to 1, so that stdin,
stdout, and stderr are not closed even if the user drops the port.

Unrevealed file ports have the nice property that they can be closed
when all pointers to the port are dropped. This can happen during gc,
or at an @code{exec()}--since all memory is dropped at an
@code{exec()}. No one knows the file descriptor associated with the
port, so the @code{exec}'d process certainly can't refer to it.

This facility preserves the transparent close-on-collect property for
file ports that are used in straightforward ways, yet allows access to
the underlying Unix substrate without interference from the garbage
collector. This is critical, since shell programming absolutely
requires access to the Unix file descriptors, as their numerical
values are a critical part of the process interface.

A port's underlying file descriptor can be shifted around with @code{dup(2)}
hen convenient. That is, the actual file descriptor on top of which a
port is constructed can be shifted around underneath the port by the
scsh kernel when necessary. This is important, because when the user
is setting up file descriptors prior to an @code{exec(2)}, he may explicitly
use a file descriptor that has already been allocated to some port. In
this case, the scsh kernel just shifts the port's file descriptor to
some new location with @code{dup}, freeing up its old
descriptor. This prevents errors from happening in the following
scenario. Suppose we have a file open on port @var{f}. Now we want to run a
program that reads input on file 0, writes output to file 1, errors to
file 2, and logs execution information on file 3. We want to run this
program with input from @var{f}. So we write:

@example
(run (/usr/shivers/bin/prog)
     (> 1 output.txt)
     (> 2 error.log)
     (> 3 trace.log)
     (= 0 ,f))
@end example

Now, suppose by ill chance that, unbeknownst to us, when the operating
system opened @var{f}'s file, it allocated descriptor 3 for it. If we
blindly redirect @code{trace.log} into file descriptor 3, we'll clobber @var{f}!
However, the port-shuffling machinery saves us: when the @code{run} form
tries to @code{dup} @code{trace.log}'s file descriptor to 3, @code{dup} will notice that
file descriptor 3 is already associated with an unrevealed port
(i.e., @var{f}). So, it will first move @var{f} to some other file
descriptor. This keeps @var{f} alive and well so that it can subsequently be
@code{dup}'d into descriptor 0 for @code{prog}'s stdin.

The port-shifting machinery makes the following guarantee: a port is
only moved when the underlying file descriptor is closed, either by a
@code{close()} or a @code{dup2()} operation. Otherwise a port/file-descriptor
association is stable.

Under normal circumstances, all this machinery just works behind the
scenes to keep things straightened out. The only time the user has to
think about it is when he starts accessing file descriptors from
ports, which he should almost never have to do. If a user starts asking
what file descriptors have been allocated to what ports, he has to
take responsibility for managing this information.

@subsection Port-mapping machinery
The procedures provided in this section are almost never needed. You
may safely skim or completely skip this section on a first reading.

Here are the routines for manipulating ports in scsh. The important
points to remember are:

@itemize
@item
A file port is associated with an open file, not a particular
file descriptor.
@item
The association between a file port and a particular file descriptor
is never changed except when the file descriptor is explicitly
closed. ``Closing'' includes being used as the target of a
@code{dup2}, so the set of procedures below that close their targets
are @code{close}, two-argument @code{dup}, and @code{move->fdes}. If
the target file descriptor of one of these routines has an allocated
port, the port will be shifted to another freshly-allocated file
descriptor, and marked as unrevealed, thus preserving the port but
freeing its old file descriptor.
@end itemize

These rules are what is necessary to ``make things work out'' with no
surprises in the general case.

@deffn Procedure fdes->inport @var{fd}
@deffnx Procedure fdes->outport @var{fd}
@deffnx Procedure port->fdes @var{port}
These increment the port's revealed count.
@end deffn

@deffn Procedure port-revealed @var{port}
Return the port's revealed count if positive, otherwise @code{#f}.
@end deffn

@deffn Procedure release-port-handle @var{port}
Decrement the port's revealed count.
@end deffn

@deffn Procedure call/fdes @var{fd/port} @var{consumer}
Calls @var{consumer} on a file descriptor; takes care of revealed
bookkeeping. If @var{fd/port} is a file descriptor, this is just
@code{(@var{consumer} @var{fd/port})}. If @var{fd/port} is a port,
calls @var{consumer} on its underlying file descriptor. While
@var{consumer} is running, the port's revealed count is incremented.

When @code{call/fdes} is called with port argument, you are not
allowed to throw into @var{consumer} with a stored continuation, as
that would violate the revealed-count bookkeeping.
@end deffn

@deffn Procedure move->fdes @var{fd/port} @var{target-fd}
Maps fd->fd and port->port.

If @var{fd/port} is a file descriptor not equal to @var{target-fd},
@code{dup} it to @var{target-fd} and close it. Returns
@var{target-fd}.

If @var{fd/port} is a port, it is shifted to @var{target-fd}, by
@code{dup}ing its underlying file descriptor if
necessary. @var{Fd/port}'s original file descriptor is closed (if it
was different from @var{target-fd}). Returns the port. This operation
resets @var{fd/port}'s revealed count to 1.

In all cases when @var{fd/port} is actually shifted, if there is a
port already using @var{target-fd}, it is first relocated to some
other file descriptor.
@end deffn

@subsection Unix I/O
@deffn Procedure dup @var{fd/port} [@var{newfd}]
@deffnx Procedure dup->inport @var{fd/port} [@var{newfd}]
@deffnx Procedure dup->outport @var{fd/port} [@var{newfd}]
@deffnx Procedure dup->fdes @var{fd/port} [@var{newfd}]
These procedures provide the functionality of C's @code{dup()} and
@code{dup2()}. @code{Dup}'s return value depends on on the type of
@var{fd/port}--it maps fd->fd and port->port.

These procedures use the Unix @code{dup()} syscall to replicate the file
descriptor or file port @var{fd/port}. If a @var{newfd} file descriptor
is given, it is used as the target of the @code{dup} operation, i.e.,
the operation is a @code{dup2()}. In this case, procedures that return a
port (such as @code{dup->inport}) will return one with the revealed
count set to one. For example, @code{(dup (current-input-port) 5)}
produces a new port with underlying file descriptor 5, whose revealed
count is 1. If @var{newfd} is not specified, then the operating system
chooses the file descriptor, and any returned port is marked as
unrevealed.

If the @var{newfd} target is given, and some port is already using that
file descriptor, the port is first quietly shifted (with another
@code{dup}) to some other file descriptor (zeroing its revealed count).

Since Scheme doesn't provide read/write ports, @code{dup->inport} and
@code{dup->outport} can be useful for getting an output version of an
input port, or vice versa. For example, if @var{p} is an input port open
on a tty, and we would like to do output to that tty, we can simply use
@code{(dup->outport @var{p})} to produce an equivalent output port for
the tty. Be sure to open the file with the @code{open/read+write} flag
for this.
@end deffn

@deffn Procedure seek @var{fd/port} @var{offset} [@var{whence}]
Reposition the I/O cursor for a file descriptor or port. @var{whence} is
one of @code{seek/set}, @code{seek/delta}, or @code{seek/end}, and
defaults to @code{seek/set}. If @code{seek/set}, then @var{offset} is an
absolute index into the file; if @code{seek/delta}, then @var{offset} is
a relative offset from the current I/O cursor; if @code{seek/end}, then
@var{offset} is a relative offset from the end of file. The
@var{fd/port} argument may be a port or an integer file descriptor. Not
all such values are @code{seek}able; this is dependent on the OS
implementation. The return value is the resulting position of the I/O
cursor in the I/O stream.

Oops: The current implementation doesn't handle @var{offset} arguments
that are not immediate integers (i.e., representable in 30 bits).

Oops: The current implementation doesn't handle buffered ports.
@end deffn

@deffn Procedure tell @var{fd/port}
Returns the position of the I/O cursor in the the I/O stream. Not all
file descriptors or ports support cursor-reporting; this is dependent on
the OS implementation.
@end deffn

@deffn Procedure open-file @var{fname} @var{flags} [@var{perms}]
@var{Perms} defaults to @code{#o666}. @var{Flags} is an integer bitmask,
composed by or'ing together constants listed in @ref{Table 3.1}.  You
must use exactly one of the @code{open/read}, @code{open/write}, or
@code{open/read+write} flags. The returned port is an input port if the
flags permit it, otherwise an output port. R5RS/Scheme 48/scsh do not
have input/output ports, so it's one or the other. This should be fixed.
(You can hack simultaneous I/O on a file by opening it r/w, taking the
result input port, and duping it to an output port with
@code{dup->outport}.)
@end deffn

@deffn Procedure open-input-file @var{fname} [@var{flags}]
@deffnx Procedure open-output-file @var{fname} [@var{flags} @var{perms}]
These are equivalent to @code{open-file}, after first setting the
@code{read/write} bits of the @var{flags} argument to @code{open/read},
or @code{open/write}, respectively.  @var{Flags} defaults to zero for
open-input-file, and

@example
(bitwise-ior open/create open/truncate)
@end example

for @code{open-output-file}. These defaults make the procedures
backwards-compatible with their unary R5RS definitions.
@end deffn

@deffn Procedure open-fdes @var{fname} @var{flags} [@var{perms}]
Returns a file descriptor.
@end deffn

@deffn Procedure fdes-flags @var{fd/port}
@deffnx Procedure set-fdes-flags @var{fd/port} @var{integer}
These procedures allow reading and writing of an open file's flags. The
only such flag defined by @acronym{POSIX} is
@code{fdflags/close-on-exec}; your Unix implementation may provide
others.

These procedures should not be particularly useful to the programmer, as
the scsh runtime already provides automatic control of the close-on-exec
property. Unrevealed ports always have their file descriptors marked
close-on-exec, as they can be closed when the scsh process execs a new
program. Whenever the user reveals or unreveals a port's file
descriptor, the runtime automatically sets or clears the flag for the
programmer. Programmers that manipulate this flag should be aware of
these extra, automatic operations.
@end deffn

@deffn Procedure fdes-status @var{fd/port}
@deffnx Procedure set-fdes-status @var{fd/port} @var{integer}

These procedures allow reading and writing of an open file's status
flags (@pxref{Table 3.1}).

@anchor{Table 3.1}
@multitable @columnfractions .15 .70 .15
@headitem
@tab
Allowed operations
@tab
Status flag
@item
Open + Get + Set
@tab
These flags can be used in @code{open-file}, @code{fdes-status}, and
@code{set-fdes-status} calls.
@tab 
@code{open/append}@*
@code{open/non-blocking}@*
@code{open/async} (Non-@acronym{POSIX})@*
@code{open/fsync} (Non-@acronym{POSIX})@*

@item
Open + Get
@tab
These flags can be used in @code{open-file} and @code{fdes-status}
calls, but are ignored by @code{set-fdes-status}.
@tab
@code{open/read}@*
@code{open/write}@*
@code{open/read+write}@*
@code{open/access-mask}@*

@item Open
@tab 
These flags are only relevant in @code{open-file} calls; they are
ignored by @code{fdes-status} and @code{set-fdes-status} calls.

@tab
@code{open/create}@*
@code{open/exclusive}@*
@code{open/no-control-tty}@*
@code{open/truncate}@*
@end multitable

Table 3.1: Status flags for @code{open-file}, @code{fdes-status} and
@code{set-fdes-status}. Only @acronym{POSIX} flags are guaranteed to be
present; your operating system may define others. The
@code{open/access-mask} value is not an actual flag, but a bit mask used
to select the field for the @code{open/read}, @code{open/write} and
@code{open/read+write} bits.

Note that this file-descriptor state is shared between file descriptors
created by @code{dup}---if you create port @emph{b} by applying
@code{dup} to port @emph{a}, and change @emph{b}'s status flags, you
will also have changed @emph{a}'s status flags.
@end deffn

@deffn Procedure pipe
Returns two ports, the read and write end-points of a Unix pipe.
@end deffn

@deffn Procedure read-string @var{nbytes} [@var{fd/port}]
@deffnx Procedure read-string! @var{string} [@var{fd/port} @var{start} @var{end}]

These calls read exactly as much data as you requested, unless there
is not enough data (@acronym{eof}). They will persistently retry on
partial reads and when interrupted until (1) error, (2) @acronym{eof},
or (3) the input request is completely satisfied. Partial reads can
occur when reading from an intermittent source, such as a pipe or tty.

@code{Read-string} returns the string read, @code{read-string!} returns
the number of characters read. They both return false at @acronym{eof}.
A request to read zero bytes returns immediately, with no check.

Any partially-read data is included in the error exception packet. Error
returns on non-blocking input are considered an error.
@end deffn

@deffn Procedure read-string/partial @var{nbytes} [@var{fd/port}]
@deffnx Procedure read-string!/partial @var{str} [@var{fd/port} @var{start} @var{end}]

These are atomic best-effort/forward-progress calls. Best effort: they
may read less than you request if there is a lesser amount of data
immediately available (e.g., because you are reading from a pipe or a
tty). Forward progress: if no data is immediately available (e.g., empty
pipe), they will block. Therefore, if you request an @math{n > 0} byte
read, while you may not get everything you asked for, you will always
get something (barring @acronym{eof}).

There is one case in which the forward-progress guarantee is cancelled:
when the programmer explicitly sets the port to non-blocking I/O. In
this case, if no data is immediately available, the procedure will not
block, but will immediately return a zero-byte read.

@code{Read-string/partial} reads the data into a freshly allocated
string, which it returns as its value.

@code{Read-string!/partial} reads the data into string @var{str} at the
indices in the half-open interval [@var{start}, @var{end}]; the default
interval is the whole string: @var{start} = 0 and @var{end} =
@code{(string-length @var{str})}.The values of @var{start} and @var{end}
must specify a well-defined interval in @var{str}, i.e., @math{0 <=}
@var{start} @math{<=} @var{end} @math{<=} @code{(string-length
@var{str})}. It returns the number of bytes read.

A request to read zero bytes returns immediatedly, with no @acronym{eof}
check.

In sum, there are only three ways you can get a zero-byte read: (1) you
request one, (2) you turn on non-blocking I/O, or (3) you try to read at
@acronym{eof}. These are the routines to use for non-blocking input.
They are also useful when you wish to efficiently process data in large
blocks, and your algorithm is insensitive to the block size of any
particular read operation.
@end deffn

@deffn Procedure select @var{rvec} @var{wvec} @var{evec} [@var{timeout}]
@deffnx Procedure select! @var{rvec} @var{wvec} @var{evec} [@var{timeout}]

The @code{select} procedure allows a process to block and wait for
events on multiple I/O channels. The @var{rvec} and @var{evec} arguments
are vectors of input ports and integer file descriptors; @var{wvec} is a
vector of output ports and integer file descriptors. The procedure
returns three vectors whose elements are subsets of the corresponding
arguments. Every element of @var{rvec'} is ready for input; every
element of @var{wvec'} is ready for output; every element of @var{evec'}
has an exceptional condition pending.

The select call will block until at least one of the I/O channels passed
to it is ready for operation. For an input port this means that it
either has data sitting its buffer or that the underlying file
descriptor has data waiting. For an output port this means that it
either has space available in the associated buffer or that the
underlying file descriptor can accept output. For file descriptors, no
buffers are checked, even if they have associated ports.

The @var{timeout} value can be used to force the call to time-out after
a given number of seconds. It defaults to the special value @code{#f},
meaning wait indefinitely. A zero value can be used to poll the I/O
channels.

If an I/O channel appears more than once in a given vector---perhaps
occuring once as a Scheme port, and once as the port's underlying
integer file descriptor---only one of these two references may appear in
the returned vector. Buffered I/O ports are handled specially---if an
input port's buffer is not empty, or an output port's buffer is not yet
full, then these ports are immediately considered eligible for I/O
without using the actual, primitive select system call to check the
underlying file descriptor. This works pretty well for buffered input
ports, but is a little problematic for buffered output ports.

The @code{select!} procedure is similar, but indicates the subset of
active I/O channels by side-effecting the argument vectors. Non-active
I/O channels in the argument vectors are overwritten with @code{#f}
values. The call returns the number of active elements remaining in each
vector. As a convenience, the vectors passed in to @code{select!} are
allowed to contain @code{#f} values as well as integers and ports.

Remark: @code{Select} and @code{select!} do not call their
@acronym{POSIX} counterparts directly---there is a @acronym{POSIX}
@code{select} sitting at the very heart of the Scheme 48/scsh I/O
system, so all multiplexed I/O is really @code{select}-based. Therefore,
you cannot expect a performance increase from writing a single-threaded
program using @code{select} and @code{select!} instead of writing a
multi-threaded program where each thread handles one I/O connection.

The moral of this story is that @code{select} and @code{select!} make
sense in only two situations: legacy code written for an older version
of scsh, and programs which make inherent use of @code{select/select!}
which do not benefit from multiple threads. Examples are network clients
that send requests to multiple alternate servers and discard all but one
of them.  In any case, the @code{select-ports} and
@code{select-port-channels} procedures described below are usually a
preferable alternative to @code{select}/@code{select!}: they are much
simpler to use, and also have a slightly more efficient implementation.
@end deffn

@deffn Procedure select-ports @var{timeout} @var{port} @dots{}

The @code{select-ports} call will block until at least one of the ports
passed to itis ready for operation or until the timeout has expired. For
an input port this means that it either has data sitting in its buffer
or that the underlying file descriptor has data waiting. For an output
port this means that it either has space available in the associated
buffer or that the underlying file descriptor can accept output.

The @var{timeout} value can be used to force the call to time out after
a given number of seconds. A value of @code{#f} means to wait
indefinitely. A zero value can be used to poll the ports.

@code{Select-ports} returns a list of the ports ready for operation.
Note that this list may be empty if the timeout expired before any ports
became ready.
@end deffn

@deffn Procedure select-port-channels @var{timeout} @var{port} @dots{}

@code{Select-port-channels} is like @code{select-ports}, except that it
only looks at the operating system objects the ports refer to, ignoring
any buffering performed by the ports.

Remark: @code{Select-port-channels} should be used with care: for
example, if an input port has data in the buffer but no data available
on the underlying file descriptor, @code{select-port-channels} will
block, even though a read operation on the port would be able to
complete without blocking.

@code{Select-port-channels} is intended for situations where the program
is not checking for available data, but rather waiting until a port has
established a connection---for example, to a network port.
@end deffn

@deffn Procedure write-string @var{string} [@var{fd/port} @var{start} @var{end}]

This procedure writes all the data requested. If the procedure cannot
perform the write with a single kernel call (due to interrupts or
partial writes), it will perform multiple write operations until all the
data is written or an error has occurred. A non-blocking I/O error is
considered an error. (Error exception packets for this syscall include
the amount of data partially transferred before the error occurred.)

The data written are the characters of @var{string} in the half-open
interval [@var{start}, @var{end}]. The default interval is the whole
string: @var{start} = 0 and @var{end} = @code{(string-length
@var{string})}. The values of @var{start} and @var{end} must specify a
well-defined interval in @var{string}, i.e., 0 @math{<=} @var{start}
@math{<=} @var{end} @math{<=} @code{(string-length @var{string})}. A
zero-byte write returns immediately, with no error.

Output to buffered ports: write-string's efforts end as soon as all
thedata has been placed in the output buffer. Errors and true output may
not happen until a later time, of course.
@end deffn

@deffn Procedure write-string/partial @var{string} [@var{fd/port} @var{start} @var{end}]

This routine is the atomic best-effort/forward-progress analog to
@code{write-string}. It returns the number of bytes written, which may
be less than you asked for. Partial writes can occur when (1) we write
off the physical end of the media, (2) the write is interrrupted, or
(3) the filedescriptor is set for non-blocking I/O.

If the file descriptor is not set up for non-blocking I/O, then a
successful return from these procedures makes a forward progress
guarantee---that is, a partial write took place of at least one byte:

@itemize
@item
If we are at the end of physical media, and no write takes place, an
error exception is raised. So a return implies we wrote something.

@item
If the call is interrupted after a partial transfer, it returns
immediately. But if the call is interrupted before any data transfer,
then the write is retried.
@end itemize

If we request a zero-byte write, then the call immediately returns
0. If thefile descriptor is set for non-blocking I/O, then the call
may return 0 if it was unable to immediately write anything (e.g.,
full pipe). Barring thesetwo cases, a write either returns
@var{nwritten} @math{>} 0, or raises an error exception.

Non-blocking I/O is only available on file descriptors and unbuffered
ports. Doing non-blocking I/O to a buffered port is not well-defined,
and is an error (the problem is the subsequent flush operation).

Oops: @code{write-string/partial} is currently not
implemented. Consider using threads to achive the same functionality.
@end deffn

@subsection Buffered I/O
Scheme 48 ports use buffered I/O---data is transferred to or from the
OS in blocks. Scsh provides control of this mechanism: the programmer
may force saved-up output data to be transferred to the OS when he
chooses, and may also choose which I/O buffering policy to employ for
a given port (or turn buffering off completely).

It can be useful to turn I/O buffering off in some cases, for example
when an I/O stream is to be shared by multiple subprocesses. For this
reason, scsh allocates an unbuffered port for file descriptor 0 at
start-up time. Because shells frequently share stdin with
subprocesses, if the shell does buffered reads, it might ``steal''
input intended for a subprocess. For this reason, all shells,
including @code{sh}, @code{csh}, and @code{scsh} , read stdin
unbuffered. Applications that can tolerate buffered input on stdin can
reset @code{current-input-port} to block buffering for higher
performance.

Note: To support @code{peek-char} a Scheme implementation has to
maintain a buffer for all input ports. In scsh, for ``unbuffered''
input ports the buffer size is one. As you cannot request less then
one character there is no unrequested reading so this can still be
called ``unbuffered input''.

@deffn Procedure set-port-buffering @var{port} @var{policy} [@var{size}]

This procedure allows the programmer to assign a particular I/O
buffering policy to a port, and to choose the size of the associated
buffer. It may only be used on new ports, i.e., before I/O is
performed on the port. There are three buffering policies that may be
chosen:

@table @code
@item bufpol/block
General block buffering (general default)
@item bufpol/line
Line buffering (tty default)
@item bufpol/none
Direct I/O---no buffering
@end table

The line buffering policy flushes output whenever a newline is output;
whenever the buffer is full; or whenever an input is read from
stdin. Line buffering is the default for ports open on terminal
devices.

Oops: The current implementation doesn't support @code{bufpol/line}.

The @var{size} argument requests an I/O buffer of @var{size}
bytes. For output ports, @var{size} must be non-negative, for input
ports @var{size} must be positve. If not given, a reasonable default
is used. For output ports, if given and zero, buffering is turned off
(i.e., @var{size} @math{= 0} for any policy is equivalent to
@var{policy} @math{=} @code{bufpol/none}). For input ports, setting
the size to one corresponds to unbuffered input as defined above. If
given, @var{size} must be zero respectively one for
@code{bufpol/none}.
@end deffn

@deffn Procedure force-output [@var{fd/port}]
This procedure does nothing when applied to an integer file descriptor
or unbuffered port. It flushes buffered output when applied to a
buffered port, and raises a write-error exception on error. Returns no
value.
@end deffn

@deffn Procedure flush-all-ports
This procedure flushes all open output ports with buffered data.
@end deffn

@subsection File locking

Scsh provides @acronym{POSIX} advisory file locking. Advisory locks are
locks that can be checked by user code, but do not affect other I/O
operations. For example, if a process has an exclusive lock on a region
of a file, other processes will not be able to obtain locks on that
region of the file, but they will still be able to read and write the
file with no hindrance. Using advisory locks requires cooperation
amongst the agents accessing the shared resource.

@emph{Remark}: Unfortunately, @acronym{POSIX} file locks are associated
with actual files, not with associated open file descriptors. Once a
process locks a file, using some file descriptor @emph{fd}, the next
time any file descriptor referencing that file is closed, all associated
locks are released. This severely limits the utility of @acronym{POSIX}
advisory file locks, and we'd recommend caution when using them.It is
not without reason that the FreeBSD man pages refer to @acronym{POSIX}
file locking as "completely stupid."

Scsh moves Scheme ports from file descriptor to file descriptor with
@code{dup()} and @code{close()} as required by the runtime, so it is
impossible to keep file locks open across one of these shifts. Hence we
can only offer POSIX advisory file locking directly on raw integer file
descriptors; regrettably, there are no facilities for locking Scheme
ports.

Note that once a Scheme port is revealed in scsh, the runtime will not
shift the port around with @code{dup()} and @code{close()}. This means
the file-locking procedures can then be applied to the port's associated
file descriptor.

@acronym{POSIX} allows the user to lock a region of a file with either an exclusive or shared lock. Locked regions are described by the @code{lock-region} record:

@example
(define-record lock-region
  exclusive?
  start
  len
  whence
  proc)
@end example

@itemize
@item
The @code{exclusive?} field is true if the lock is exclusive; false if it is shared.
@item
The whence field is one of the values from the seek call: @code{seek/set},
@code{seek/delta}, or @code{seek/end}, and determines the interpretation of the
@code{start} field:
@itemize
@item
If @code{seek/set}, the start value is simply an absolute index into the
file.
@item
If @code{seek/delta}, the start value is an offset from the file
descriptor's current position in the file.
@item
If @code{seek/end}, the start value is an offset from the end of the
file.
@end itemize
The region of the file being locked is given by the @code{start} and
@code{len} fields; if @code{len} is zero, it means "infinity," that is,
the region extends from the starting point through the end of the file,
even as the file is extended by subsequent write operations.
@item
The @code{proc} field gives the process object for the process holding the
region lock, when relevant (see @code{get-lock-region} below).
@end itemize

@deffn Procedure make-lock-region @var{exclusive?} @var{start} @var{len} [@var{whence}]

This procedure makes a lock-region record. The @var{whence} field
defaults to @code{seek/set}.
@end deffn

@deffn Procedure lock-region @var{fdes} @var{lock}
@deffnx Procedure lock-region/no-block @var{fdes} @var{lock}

These procedures lock a region of the file referenced by file
descriptor @var{fdes}. The @code{lock-region} procedure blocks until
the lock is granted; the non-blocking variant returns a boolean
indicating whether or not the lock was granted. To take an exclusive
(write) lock, you must have the file descriptor open with write
access; to take a shared (read) lock, you must have the file
descriptor open with read access.
@end deffn

@deffn Procedure get-lock-region @var{fdes} @var{lock}

Return the first lock region on @var{fdes} that would conflict with
lock region @var{lock}. If there is no such lock region, return
false. This procedure fills out the @code{proc} field of the returned
lock region, and is the only procedure that has anything to do with
this field. (@xref{Process objects and process reaping} for a
description of process objects.) Note that if you apply this procedure
to a file system that is shared across multiple operating systems
(i.e., an NFS file system), the @code{proc} field may be ambiguous. We
note, again, that @acronym{POSIX} advisory file locking is not a
terribly useful or well-designed facility.
@end deffn

@deffn Procedure unlock-region @var{fdes} @var{lock}

Release a lock from a file.
@end deffn

@deffn Procedure with-region-lock* @var{fdes} @var{lock} @var{thunk}
@deffnx Macro with-region-lock @var{fdes} @var{lock} @var{body} @dots{}

This procedure obtains the requested lock, and then calls
@var{thunk}. When @var{thunk} returns, the lock is released. A
non-local exit (e.g., throwing to a saved continuation or raising an
exception) also causes the lock to be released.
        
After a normal return from @var{thunk}, its return values are returned
by @code{with-region-lock*}. The @code{with-region-lock} special form
is equivalent syntactic sugar.
@end deffn

@section File system

Besides the following procedures, which allow access to the computer's
file system, scsh also provides a set of procedures which manipulate
file @emph{names}. These string-processing procedures are documented
in section @ref{Manipulating file names}.

@deffn Procedure create-directory @var{fname} [@var{perms} @var{override?}]
@deffnx Procedure create-fifo @var{fname} [@var{perms} @var{override?}]
@deffnx Procedure create-hard-link @var{oldname} @var{newname} [@var{override?}]
@deffnx Procedure create-symlink @var{old-name} @var{new-name} [@var{override?}]

These procedures create objects of various kinds in the file system.

The @var{override?} argument controls the action if there is already
an object in the file system with the new name:

@table @asis
@item @code{#f}
Signal an error (the default).
@item @code{'query}
Prompt the user.
@item @var{other}
Delete the old object (with @code{delete-file} or
@code{delete-directory}, as appropriate) before creating the new
object.
@end table

@var{Perms} defaults to @code{#o777} (but is masked by the current umask).

@emph{Remark}: Currently, if you try to create a hard or symbolic link
from a file to itself, you will error out with @var{override?}  false,
and simply delete your file with @var{override?}  true. Catching this
will require some sort of true-name procedure, which I currently do
not have.
@end deffn

@deffn Procedure delete-directory @var{fname}
@deffnx Procedure delete-file @var{fname}
@deffnx Procedure delete-filesys-object @var{fname}

These procedures delete objects from the file system. The
@code{delete-filesys-object} procedure will delete an object of any
type from the filesystem: files, (empty) directories, symlinks, fifos,
etc.

If the object being deleted doesn't exist, @code{delete-directory} and
@code{delete-file} raise an error, while @code{delete-filesys-object}
simply returns.
@end deffn

@deffn Procedure read-symlink @var{fname}

Return the filename referenced by symbolic link @var{fname}.
@end deffn

@deffn Procedure rename-file @var{old-fname} @var{new-fname} [@var{override?}]

If you override an existing object, then @var{old-fname} and
@var{new-fname} must type-match--either both directories, or both
non-directories. This is required by the semantics of Unix
@code{rename()}.

@emph{Remark}: There is an unfortunate atomicity problem with the
@code{rename-file} procedure: if you specify no-override, but create
file @var{new-fname} sometime between @code{rename-file} 's existence
check and the actual rename operation, your file will be clobbered
with @code{old-fname}.There is no way to fix this problem, given the
semantics of Unix @code{rename()}; at least it is highly unlikely to
occur in practice.
@end deffn

@deffn Procedure set-file-mode @var{fname/fd/port} @var{mode}
@deffnx Procedure set-file-owner @var{fname/fd/port} @var{uid}
@deffnx Procedure set-file-group @var{fname/fd/port} @var{gid}

These procedures set the permission bits, owner id, and group id of a
file, respectively. The file can be specified by giving the file name,
or either an integer file descriptor or a port open on the
file. Setting file user ownership usually requires root privileges.
@end deffn

@deffn Procedure set-file-times @var{fname} [@var{access-time} @var{mod-time}]

This procedure sets the access and modified times for the file fname
to the supplied values (@xref{Time} for the scsh representation of
time). If neither time argument is supplied, they are both taken to be
the current time. You must provide both times or neither. If the
procedure completes successfully, the file's time of last
status-change (@code{ctime}) is set to the current time.
@end deffn

@deffn Procedure sync-file @var{fd/port}
@deffnx Procedure sync-file-system

Calling @code{sync-file} causes Unix to update the disk data
structures for a given file. If @var{fd/port} is a port, any buffered
data it may have is first flushed.

Calling @code{sync-file-system} synchronises the kernel's entire file
system with the disk.

These procedures are not @acronym{POSIX}. Interestingly enough,
@code{sync-filesystem} doesn't actually do what it is claimed to
do. We just threw it in for humor value. See the @code{sync(2)} man
page for Unix enlightenment.
@end deffn

@deffn Procedure truncate-file @var{fname/fd/port} @var{len}

The specified file is truncated to @var{len} bytes in length.
@end deffn

@c (file-info fname/fd/port [chase?]) -! file-info-record procedure
@c 
@c The file-info procedure returns a record structure containing every-thing there is to know about a file. If the chase? flag is true (the default),
@c 
@c then the procedure chases symlinks and reports on the files to which theyrefer. If chase? is false, then the procedure checks the actual file itself, even
@c if it's a symlink. The chase? flag is ignored if the file argument is a file de-scriptor or port.
@c 
@c The value returned is a file-info record, defined to have the following struc-ture:
@c 
@c (define-record file-info
@c 
@c type ; {block-special, char-special, directory,
@c 
@c ; fifo, regular, socket, symlink}
@c device ; Device file resides on.
@c inode ; File's inode.
@c mode ; File's mode bits: permissions, setuid, setgid
@c nlinks ; Number of hard links to this file.
@c uid ; Owner of file.
@c gid ; File's group id.
@c size ; Size of file, in bytes.
@c atime ; Time of last access.
@c mtime ; Time of last mod.
@c ctime) ; Time of last status change.
@c 
@c The uid field of a file-info record is accessed with the procedure
@c 
@c (file-info:uid x)
@c 
@c and similarly for the other fields. The type field is a symbol; allother fields are integers. A file-info record is discriminated with the
@c file-info? predicate.
@c The following procedures all return selected information about a file;they are built on top of
@c 
@c file-info, and are called with the same argu-ments that are passed to it.
@c 
@c Procedure returns
@c file-type type
@c file-inode inode
@c file-mode mode
@c file-nlinks nlinks
@c file-owner uid
@c file-group gid
@c file-size size
@c file-last-access atime
@c file-last-mod mtime
@c file-last-status-change ctime
@c 
@c Example:
@c 
@c ;; All my files in /usr/tmp:
@c (filter (* (f) (= (file-owner f) (user-uid)))
@c 
@c (directory-files "/usr/tmp")))
@c 
@c Remark: file-info was named file-attributes in releases ofscsh prior to release 0.4. We changed the name to
@c 
@c file-info forconsistency with the other information-retrieval procedures in scsh:
@c 
@c user-info, group-info, host-info, network-info , service-info,and
@c 
@c protocol-info.
@c 
@c The file-attributes binding is still supported in the current releaseof scsh, but is deprecated, and may go away in a future release.
@c 
@c (file-directory? fname/fd/port [chase?]) -! boolean procedure
@c (file-fifo? fname/fd/port [chase?]) -! boolean procedure
@c (file-regular? fname/fd/port [chase?]) -! boolean procedure
@c (file-socket? fname/fd/port [chase?]) -! boolean procedure
@c (file-special? fname/fd/port [chase?]) -! boolean procedure
@c (file-symlink? fname/fd/port) -! boolean procedure
@c 
@c These procedures are file-type predicates that test the type of a given file.They are applied to the same arguments to which
@c 
@c file-info is applied;the sole exception is
@c file-symlink?, which does not take the optionalchase? second argument.
@c 
@c For example,
@c 
@c (file-directory? "/usr/dalbertz") =) #t
@c 
@c There are variants of these procedures which work directly on file-inforecords:
@c 
@c (file-info-directory? file-info) -! boolean procedure
@c (file-info-fifo? file-info) -! boolean procedure
@c (file-info-regular? file-info) -! boolean procedure
@c (file-info-socket? file-info) -! boolean procedure
@c (file-info-special? file-info) -! boolean procedure
@c (file-info-symlink? file-info) -! boolean procedure
@c 
@c The following set of procedures are a convenient means to work on thepermission bits of a file:
@c 
@c (file-not-readable? fname/fd/port) -! boolean procedure
@c (file-not-writable? fname/fd/port) -! boolean procedure
@c (file-not-executable? fname/fd/port) -! boolean procedure
@c 
@c Returns:
@c 
@c Value meaning
@c 
@c #f Access permitted
@c 'search-denied Can't stat--a protected directoryis blocking access.
@c 
@c 'permission Permission denied.
@c 'no-directory Some directory doesn't exist.
@c 'nonexistent File doesn't exist.
@c A file is considered writeable if either (1) it exists and is writeable or (2)it doesn't exist and the directory is writeable. Since symlink permission
@c 
@c bits are ignored by the filesystem, these calls do not take a chase? flag.
@c Note that these procedures use the process' effective user and group idsfor permission checking. @acronym{POSIX} defines an access() function that usesthe process' real uid and gids. This is handy for setuid programs that would like to find out if the actual user has specific rights; scsh ought toprovide this functionality (but doesn't at the current time).
@c 
@c There are several problems with these procedures. First, there's an atom-icity issue. In between checking permissions for a file and then trying an
@c operation on the file, another process could change the permissions, so areturn value from these functions guarantees nothing. Second, the code
@c special-cases permission checking when the uid is root--if the file exists, root is assumed to have the requested permission. However, not evenroot can write a file that is on a read-only file system, such as a CD ROM.
@c In this case, file-not-writable? will lie, saying that root has write ac-cess, when in fact the opening the file for write access will fail. Finally,
@c write permission confounds write access and create access. These shouldbe disentangled.
@c 
@c Some of these problems could be avoided if @acronym{POSIX} had a real-uid vari-ant of the
@c 
@c access() call we could use, but the atomicity issue is still aproblem. In the final analysis, the only way to find out if you have the
@c 
@c right to perform an operation on a file is to try and open it for the desiredoperation. These permission-checking functions are mostly intended for
@c script-writing, where loose guarantees are tolerated.
@c (file-readable? fname/fd/port) -! boolean procedure
@c (file-writable? fname/fd/port) -! boolean procedure
@c (file-executable? fname/fd/port) -! boolean procedure
@c 
@c These procedures are the logical negation of the preceding
@c file-not-...? procedures. Refer to them for a discussion of theirproblems and limitations.
@c 
@c (file-info-not-readable? file-info) -! boolean procedure
@c (file-info-not-writable? file-info) -! boolean procedure
@c (file-info-not-executable? file-info) -! boolean procedure
@c 
@c (file-info-readable? file-info) -! boolean procedure
@c (file-info-writable? file-info) -! boolean procedure
@c (file-info-executable? file-info) -! boolean procedure
@c 
@c There are variants which work directly on file-info records.
@c 
@c (file-not-exists? fname/fd/port [chase?]) -! object procedure
@c 
@c Returns:
@c 
@c #f Exists.
@c 
@c #t Doesn't exist.
@c 'search-denied Some protected directory isblocking the search.
@c 
@c (file-exists? fname/fd/port [chase?]) -! boolean procedure
@c 
@c This is simply (not (file-not-exists? fname [chase?]))
@c 
@c (directory-files [dir dotfiles?]) -! string list procedure
@c 
@c Return the list of files in directory dir, which defaults to the current work-ing directory. The dotfiles? flag (default
@c 
@c #f) causes dot files to be includedin the list. Regardless of the value of dotfiles?, the two files
@c 
@c . and .. arenever returned.
@c 
@c The directory dir is not prepended to each file name in the result list. Thatis,
@c 
@c (directory-files "/etc")
@c returns
@c 
@c ("chown" "exports" "fstab" ...)
@c not
@c 
@c ("/etc/chown" "/etc/exports" "/etc/fstab" ...)
@c To use the files in returned list, the programmer can either manuallyprepend the directory:
@c 
@c (map (* (f) (string-append dir "/" f)) files)
@c or cd to the directory before using the file names:
@c 
@c (with-cwd dir
@c 
@c (for-each delete-file (directory-files)))
@c 
@c or use the glob procedure, defined below.
@c A directory list can be generated by (run/strings (ls)), but this is un-reliable, as filenames with whitespace in their names will be split into
@c 
@c separate entries. Using directory-files is reliable.
@c (open-directory-stream dir) -! directory-stream-record procedure
@c (read-directory-stream directory-stream-record) -! string or #f procedure
@c (close-directory-stream directory-stream-record) -! undefined procedure
@c 
@c These functions implement a direct interface to the opendir()/
@c readdir()/ closedir() family of functions for processing directory streams.
@c (open-directory-stream dir) creates a stream of files in the directory
@c dir. (read-directory-stream directory-stream) returns the next file inthe stream or
@c 
@c #fif no such file exists. Finally, (close-directory-stream
@c directory-stream) closes the stream.
@c 
@c (glob pat1 . . . ) -! string list procedure
@c 
@c Glob each pattern against the filesystem and return the sorted list. Du-plicates are not removed. Patterns matching nothing are not included
@c 
@c literally.3 C shell {a,b,c} patterns are expanded. Backslash quotes char-acters, turning off the special meaning of
@c 
@c {, }, *, [, ], and ?.
@c 
@c 3 Why bother to mention such a silly possibility? Because that is what sh does.
@c 
@c Note that the rules of backslash for Scheme strings and glob patternswork together to require four backslashes in a row to specify a single
@c literal backslash. Fortunately, it is very rare that a backslash occurs in aUnix file name.
@c 
@c A glob subpattern will not match against dot files unless the first char-acter of the subpattern is a literal "
@c 
@c .". Further, a dot subpattern willnot match the files
@c . or .. unless it is a constant pattern, as in (glob
@c "../*/*.c"). So a directory's dot files can be reliably generated with thesimple glob pattern
@c 
@c ".*".
@c 
@c Some examples:
@c 
@c (glob "*.c" "*.h")
@c 
@c ;; All the C and #include files in my directory.
@c 
@c (glob "*.c" "*/*.c")
@c 
@c ;; All the C files in this directory and
@c ;; its immediate subdirectories.
@c 
@c (glob "lexer/*.c" "parser/*.c")
@c (glob "{lexer,parser}/*.c")
@c 
@c ;; All the C files in the lexer and parser dirs.
@c 
@c (glob "\\{lexer,parser\\}/*.c")
@c 
@c ;; All the C files in the strange
@c ;; directory "{lexer,parser}".
@c 
@c (glob "*\\*")
@c 
@c ;; All the files ending in "*", e.g.
@c ;; ("foo*" "bar*")
@c 
@c (glob "*lexer*")
@c 
@c ("mylexer.c" "lexer1.notes")
@c ;; All files containing the string "lexer".
@c 
@c (glob "lexer")
@c 
@c ;; Either ("lexer") or ().
@c 
@c If the first character of the pattern (after expanding braces) is a slash, thesearch begins at root; otherwise, the search begins in the current working
@c directory.
@c If the last character of the pattern (after expanding braces) is a slash, thenthe result matches must be directories, e.g.,
@c 
@c (glob "/usr/man/man?/") =)
@c 
@c ("/usr/man/man1/" "/usr/man/man2/" ...)
@c 
@c Globbing can sometimes be useful when we need a list of a directory'sfiles where each element in the list includes the pathname for the file.
@c Compare:
@c 
@c (directory-files "../include") =)
@c 
@c ("cig.h" "decls.h" ...)
@c 
@c (glob "../include/*") =)
@c 
@c ("../include/cig.h" "../include/decls.h" ...)
@c 
@c (glob-quote str) -! string procedure
@c 
@c Returns a constant glob pattern that exactly matches str. All wild-cardcharacters in str are quoted with a backslash.
@c 
@c (glob-quote "Any *.c files?")=)
@c 
@c "Any \*.c files\?"
@c 
@c (file-match root dot-files? pat1 pat2 . . . patn) -! string list procedure{
@c 
@c Note This procedure is deprecated, and will probably either go awayor be substantially altered in a future release. New code should not call
@c 
@c this procedure. The problem is that it relies upon Posix-notation regu-lar expressions; the rest of scsh has been converted over to the new SRE
@c notation.}
@c file-match provides a more powerful file-matching service, at the ex-pense of a less convenient notation. It is intermediate in power between
@c 
@c most shell matching machinery and recursive find(1).
@c Each pattern is a regexp. The procedure searches from root, matching thefirst-level files against pattern pat
@c 
@c 1, the second-level files against pat2, andso forth. The list of files matching the whole path pattern is returned, in
@c 
@c sorted order. The matcher uses Spencer's regular expression package.
@c The files . and .. are never matched. Other dot files are only matched ifthe dot-files? argument is
@c 
@c #t.
@c 
@c A given pati pattern is matched as a regexp, so it is not forced to matchthe entire file name. E.g., pattern
@c 
@c "t" matches any file containing a "t" inits name, while pattern
@c "^t$" matches only a file whose entire name is"
@c t".
@c 
@c The pati patterns can be more general than stated above.
@c 
@c * A single pattern can specify multiple levels of the path by em-bedding
@c 
@c / characters within the pattern. For example, the pattern
@c "a/b/c" gives a match equivalent to the list of patterns "a" "b"
@c "c".
@c 
@c * A pati pattern can be a procedure, which is used as a match predi-cate. It will be repeatedly called with a candidate file-name to test.
@c 
@c The file-name will be the entire path accumulated. If the procedureraises an error condition,
@c 
@c file-match will catch the error and treatit as a failed match. This keeps
@c 
@c file-match from being blown out ofthe water by applying tests to dangling symlinks and other similar
@c 
@c situations.
@c 
@c Some examples:
@c 
@c (file-match "/usr/lib" #f "m$" "^tab") =)
@c 
@c ("/usr/lib/term/tab300" "/usr/lib/term/tab300-12" ...)
@c 
@c (file-match "." #f "^lex|parse|codegen$" "\\.c$") =)
@c 
@c ("lex/lex.c" "lex/lexinit.c" "lex/test.c"
@c 
@c "parse/actions.c" "parse/error.c" parse/test.c"
@c "codegen/io.c" "codegen/walk.c")
@c 
@c (file-match "." #f "^lex|parse|codegen$/\\.c$")
@c 
@c ;; The same.
@c 
@c (file-match "." #f file-directory?)
@c 
@c ;; Return all subdirs of the current directory.
@c 
@c (file-match "/" #f file-directory?) =)
@c 
@c ("/bin" "/dev" "/etc" "/tmp" "/usr")
@c ;; All subdirs of root.
@c 
@c (file-match "." #f "\\.c")
@c 
@c ;; All the C files in my directory.
@c 
@c (define (ext extension)
@c 
@c (* (fn) (string-suffix? fn extension)))
@c 
@c (define (true . x) #t)
@c 
@c (file-match "." #f "./\\.c")
@c (file-match "." #f "" "\\.c")
@c (file-match "." #f true "\\.c")
@c (file-match "." #f true (ext "c"))
@c 
@c ;; All the C files of all my immediate subdirs.
@c 
@c (file-match "." #f "lexer") =)
@c 
@c ("mylexer.c" "lexer.notes")
@c ;; Compare with (glob "lexer"), above.
@c 
@c Note that when root is the current working directory ("."), when it isconverted to directory form, it becomes
@c 
@c "", and doesn't show up in theresult file-names.
@c 
@c It is regrettable that the regexp wild card char, ".", is such an importantfile name literal, as dot-file prefix and extension delimiter.
@c 
@c (create-temp-file [prefix]) -! string procedure
@c 
@c Create-temp-file creates a new temporary file and return its name. Theoptional argument specifies the filename prefix to use, and defaults to
@c 
@c the value of "$TMPDIR/pid" if $TMPDIR is set and to "/var/tmp/pid" oth-erwise, where pid is the current process' id. The procedure generates a
@c sequence of filenames that have prefix as a common prefix, looking fora filename that doesn't already exist in the file system. When it finds
@c one, it creates it, with permission #o600 and returns the filename. (Thefile permission can be changed to a more permissive permission with
@c set-file-mode after being created).
@c This file is guaranteed to be brand new. No other process will have itopen. This procedure does not simply return a filename that is very likely
@c 
@c to be unused. It returns a filename that definitely did not exist at themoment
@c 
@c create-temp-file created it.
@c 
@c It is not necessary for the process' pid to be a part of the filename for theuniqueness guarantees to hold. The pid component of the default prefix
@c 
@c simply serves to scatter the name searches into sparse regions, so thatcollisions are less likely to occur. This speeds things up, but does not
@c affect correctness.
@c Security note: doing I/O to files created this way in /var/tmp/ is notnecessarily secure. General users have write access to
@c 
@c /var/tmp/, so evenif an attacker cannot access the new temp file, he can delete it and replace it with one of his own. A subsequent open of this filename will thengive you his file, to which he has access rights. There are several ways to defeat this attack,
@c 
@c 1. Use temp-file-iterate, below, to return the file descriptor allo-cated when the file is opened. This will work if the file only needs to be opened once.
@c 2. If the file needs to be opened twice or more, create it in a protected directory, e.g., $HOME.
@c 
@c 3. Ensure that /var/tmp has its sticky bit set. This requires system ad-ministrator privileges.
@c 
@c The actual default prefix used is controlled by the dynamic variable
@c \*temp-file-template\*, and can be overridden for increased security.See
@c 
@c temp-file-iterate.
@c 
@c (temp-file-iterate maker [template]) -! object+ procedure
@c *temp-file-template* string
@c 
@c This procedure can be used to perform certain atomic transactions on thefile system involving filenames. Some examples:
@c 
@c * Linking a file to a fresh backup temp name.*
@c 
@c Creating and opening an unused, secure temp file.*
@c Creating an unused temporary directory.
@c 
@c This procedure uses template to generate a series of trial file names.Template is a
@c 
@c format control string, and defaults to
@c 
@c "$TMPDIR/pid.~a"
@c if $TMPDIR is set and
@c 
@c "/var/tmp/pid.~a"
@c otherwise where pid is the current process' process id. File names aregenerated by calling
@c 
@c format to instantiate the template's ~a field with avarying string.
@c 
@c Maker is a procedure which is serially called on each file name gener-ated. It must return at least one value; it may return multiple values. If
@c the first return value is #f or if maker raises the errno/exist errno ex-ception,
@c 
@c temp-file-iterate will loop, generating a new file name andcalling maker again. If the first return value is true, the loop is terminated,
@c 
@c returning whatever value(s) maker returned.
@c After a number of unsuccessful trials, temp-file-iterate may give upand signal an error.
@c 
@c Thus, if we ignore its optional prefix argument, create-temp-file couldbe defined as:
@c 
@c (define (create-temp-file)
@c 
@c (let ((flags (bitwise-ior open/create open/exclusive)))
@c 
@c (temp-file-iterate
@c 
@c (* (f)
@c 
@c (close (open-output-file f flags #o600))
@c f))))
@c 
@c To rename a file to a temporary name:
@c 
@c (temp-file-iterate (* (backup)
@c 
@c (create-hard-link old-file backup)
@c backup)
@c ".#temp.~a") ; Keep link in cwd.
@c (delete-file old-file)
@c 
@c Recall that scsh reports syscall failure by raising an error exception, notby returning an error code. This is critical to to this example--the programmer can assume that if the temp-file-iterate call returns, it re-turns successully. So the following
@c 
@c delete-file call can be reliably in-voked, safe in the knowledge that the backup link has definitely been
@c 
@c established.
@c To create a unique temporary directory:
@c 
@c (temp-file-iterate (* (dir) (create-directory dir) dir)
@c 
@c "/var/tmp/tempdir.~a")
@c 
@c Similar operations can be used to generate unique symlinks and fifos, orto return values other than the new filename (e.g., an open file descriptor
@c 
@c or port).
@c The default template is in fact taken from the value of the dynamic vari-able
@c 
@c *temp-file-template*, which itself defaults to "$TMPDIR/pid.~a"if
@c $TMPDIR is set and "/usr/tmp/pid.~a" otherwise, where pid is the scshprocess' pid. For increased security, a user may wish to change the template to use a directory not allowing world write access (e.g., his homedirectory).
@c 
@c (temp-file-channel) -! [inp outp] procedure
@c 
@c This procedure can be used to provide an interprocess communicationschannel with arbitrary-sized buffering. It returns two values, an input
@c 
@c port and an output port, both open on a new temp file. The temp file itselfis deleted from the Unix file tree before
@c 
@c temp-file-channel returns, sothe file is essentially unnamed, and its disk storage is reclaimed as soon
@c 
@c as the two ports are closed.
@c Temp-file-channel is analogous to port-pipe with two exceptions:
@c 
@c * If the writer process gets ahead of the reader process, it will not hangwaiting for some small pipe buffer to drain. It will simply buffer the
@c 
@c data on disk. This is good.*
@c If the reader process gets ahead of the writer process, it will also nothang waiting for data from the writer process. It will simply see and
@c 
@c report an end of file. This is bad.
@c In order to ensure that an end-of-file returned to the reader is legit-imate, the reader and writer must serialise their I/O. The simplest
@c 
@c way to do this is for the reader to delay doing input until the writerhas completely finished doing output, or exited.
@c 
@section Processes
@c (exec prog arg1 . . . argn) -! no return value procedure
@c (exec-path prog arg1 . . . argn) -! no return value procedure
@c (exec/env prog env arg1 . . . argn) -! no return value procedure
@c (exec-path/env prog env arg1 . . . argn) -! no return value procedure
@c 
@c The .../env variants take an environment specified as a string!stringalist. An environment of
@c 
@c #t is taken to mean the current process' envi-ronment (i.e., the value of the external char
@c 
@c **environ).
@c 
@c [Rationale: #f is a more convenient marker for the current environmentthan
@c 
@c #t, but would cause an ambiguity on Schemes that identify #f and
@c ().]
@c 
@c The path-searching variants search the directories in the list exec-pathlist for the program. A path-search is not performed if the programname contains a slash character--it is used directly. So a program with
@c 
@c a name like "bin/prog" always executes the program bin/prog in thecurrent working directory. See
@c 
@c $path and exec-path-list, below.
@c 
@c Note that there is no analog to the C function execv(). To get the effectjust do
@c 
@c (apply exec prog arglist)
@c All of these procedures flush buffered output and close unrevealed portsbefore executing the new binary. To avoid flushing buffered output, see
@c 
@c %exec below.
@c Note that the C exec() procedure allows the zeroth element of the argu-ment vector to be different from the file being executed, e.g.
@c 
@c char *argv[] = {"-", "-f", 0};
@c exec("/bin/csh", argv, envp);
@c 
@c The scsh exec, exec-path, exec/env, and exec-path/env procedures donot give this functionality--element 0 of the arg vector is always identical
@c to the prog argument. In the rare case the user wishes to differentiatethese two items, he can use the low-level
@c 
@c %exec and exec-path-searchprocedures. These procedures never return under any circumstances. As
@c 
@c with any other system call, if there is an error, they raise an exception.
@c (%exec prog arglist env) -! undefined procedure
@c (exec-path-search fname pathlist) -! string or #f procedure
@c 
@c The %exec procedure is the low-level interface to the system call. Thearglist parameter is a list of arguments; env is either a string!string alist or #t. The new program's argv[0] will be taken from (car arglist),not from prog. An environment of
@c 
@c #t means the current process' environ-ment.
@c %exec does not flush buffered output (see flush-all-ports).
@c 
@c All exec procedures, including %exec, coerce the prog and arg valuesto strings using the usual conversion rules: numbers are converted to
@c 
@c decimal numerals, and symbols converted to their print-names.
@c exec-path-search searches the directories of pathlist looking for an oc-currence of file
@c 
@c fname. If no executable file is found, it returns #f. If
@c fname contains a slash character, the path search is short-circuited, butthe procedure still checks to ensure that the file exists and is executable--
@c 
@c if not, it still returns #f. Users of this procedure should be aware thatit invites a potential race condition: between checking the file with
@c exec-path-search and executing it with %exec, the file's status mightchange. The only atomic way to do the search is to loop over the candidate file names, exec'ing each one and looping when the exec operationfails.
@c 
@c See $path and exec-path-list, below.
@c (exit [status]) -! no return value procedure
@c (%exit [status]) -! no return value procedure
@c 
@c These procedures terminate the current process with a given exit status.The default exit status is 0. The low-level
@c 
@c %exit procedure immediatelyterminates the process without flushing buffered output.
@c 
@c (call-terminally thunk) -! no return value procedure
@c 
@c call-terminally calls its thunk. When the thunk returns, the processexits. Although
@c 
@c call-terminally could be implemented as
@c 
@c (* (thunk) (thunk) (exit 0))
@c an implementation can take advantage of the fact that this procedurenever returns. For example, the runtime can start with a fresh stack and also start with a fresh dynamic environment, where shadowed bindingsare discarded. This can allow the old stack and dynamic environment
@c to be collected (assuming this data is not reachable through some livecontinuation).
@c 
@c (suspend) -! undefined procedure
@c 
@c Suspend the current process with a SIGSTOP signal.
@c 
@c (fork [thunk or #f] [continue-threads?]) -! proc or #f procedure
@c (%fork [thunk or #f] [continue-threads?]) -! proc or #f procedure
@c 
@c fork with no arguments or #f instead of a thunk is like C fork(). Inthe parent process, it returns the child's process object (see below for more
@c 
@c information on process objects). In the child process, it returns #f.
@c fork with an argument only returns in the parent process, returning thechild's process object. The child process calls thunk and then exits.
@c 
@c fork flushes buffered output before forking, and sets the child processto non-interactive.
@c 
@c %fork does not perform this bookkeeping; it simplyforks.
@c 
@c The optional boolean argument continue-threads? specifies whether thecurrently active threads continue to run in the child or not. The default is
@c #f.
@c (fork/pipe [thunk] [continue-threads?]) -! proc or #f procedure
@c (%fork/pipe [thunk] [continue-threads?]) -! proc or #f procedure
@c 
@c Like fork and %fork, but the parent and child communicate via a pipeconnecting the parent's stdin to the child's stdout. These procedures sideeffect the parent by changing his stdin.
@c In effect, fork/pipe splices a process into the data stream immediatelyupstream of the current process. This is the basic function for creating pipelines. Long pipelines are built by performing a sequence of
@c fork/pipe calls. For example, to create a background two-process pipe a
@c | b, we write:
@c 
@c (fork (* () (fork/pipe a) (b)))
@c which returns the process object for b's process.
@c To create a background three-process pipe a | b | c, we write:
@c 
@c (fork (* () (fork/pipe a)
@c 
@c (fork/pipe b)
@c (c)))
@c 
@c which returns the process object for c's process.
@c Note that these procedures affect file descriptors, not ports. That is, thepipe is allocated connecting the child's file descriptor 1 to the parent's file
@c 
@c descriptor 0. Any previous Scheme port built over these affected file descriptorsis shifted to a new, unused file descriptor with
@c 
@c dup before allocating the I/O pipe.This means, for example, that the ports bound to
@c 
@c (current-input-port)and
@c (current-output-port) in either process are not affected--they stillrefer to the same I/O sources and sinks as before. Remember the simple
@c 
@c scsh rule: Scheme ports are bound to I/O sources and sinks, not particularfile descriptors.
@c 
@c If the child process wishes to rebind the current output port to the pipeon file descriptor 1, it can do this using
@c 
@c with-current-output-portor a related form. Similarly, if the parent wishes to change the current input port to the pipe on file descriptor 0, it can do this using
@c set-current-input-port! or a related form. Here is an example show-ing how to set up the I/O ports on both sides of the pipe:
@c 
@c (fork/pipe (* ()
@c 
@c (with-current-output-port (fdes->outport 1)
@c 
@c (display "Hello, world.\n"))))
@c 
@c (set-current-input-port! (fdes->inport 0))
@c (read-line) ; Read the string output by the child.
@c 
@c None of this is necessary when the I/O is performed by an exec'd pro-gram in the child or parent process, only when the pipe will be referenced
@c 
@c by Scheme code through one of the default current I/O ports.
@c (fork/pipe+ conns [thunk] [continue-threads?]) -! proc or #f procedure
@c (%fork/pipe+ conns [thunk] [continue-threads?]) -! proc or #f procedure
@c 
@c Like fork/pipe, but the pipe connections between the child and parentare specified by the connection list conns. See the
@c 
@c (|+ conns pf1 ... pfn)
@c process form for a description of connection lists.
@c 
@c @subsection Process objects and process reaping
@c Scsh uses process objects to represent Unix processes. They are created by the
@c fork procedure, and have the following exposed structure:
@c 
@c (define-record proc pid)
@c 
@c The only exposed slot in a proc record is the process' pid, the integer id as-signed by Unix to the process. The only exported primitive procedures for manipulating process objects are proc? and proc:pid. Process objects are createdwith the fork procedure.
@c 
@c (pid->proc pid [probe?]) -! proc procedure
@c 
@c This procedure maps integer Unix process ids to scsh process objects. Itis intended for use in interactive and debugging code, and is deprecated
@c 
@c for use in production code. If there is no process object in the systemindexed by the given pid,
@c 
@c pid->proc's action is determined by the probe?parameter (default
@c #f):
@c 
@c probe? Return
@c #f signal error condition.
@c 'create Create new proc object.True value
@c 
@c #f
@c 
@c Sometime after a child process terminates, scsh will perform a wait systemcall on the child in background, caching the process' exit status in the child's
@c proc object. This is called "reaping" the process. Once the child has beenwaited, the Unix kernel can free the storage allocated for the dead process'
@c exit information, so process reaping prevents the process table from becomingcluttered with un-waited dead child processes (a.k.a. "zombies"). This can be
@c especially severe if the scsh process never waits on child processes at all; if theprocess table overflows with forgotten zombies, the OS may be unable to fork
@c further processes.
@c 
@c Reaping a child process moves its exit status information from the kernelinto the scsh process, where it is cached inside the child's process object. If
@c 
@c the scsh user drops all pointers to the process object, it will simply be garbagecollected. On the other hand, if the scsh program retains a pointer to the process object, it can use scsh's wait system call to synchronise with the child andretrieve its exit status multiple times (this is not possible with simple Unix integer pids in C--the programmer can only wait on a pid once).
@c 
@c Thus, process objects allow scsh programmer to do two things not allowedin other programming environments:
@c 
@c * Subprocesses that are never waited on are still removed from the pro-cess table, and their associated exit status data is eventually automatically garbage collected.
@c 
@c * Subprocesses can be waited on multiple times.
@c 
@c However, note that once a child has exited, if the scsh programmer dropsall pointers to the child's proc object, the child's exit status will be reaped and
@c 
@c 58
@c 
@c thrown away. This is the intended behaviour, and it means that integer pids arenot enough to cause a process's exit status to be retained by the scsh runtime.
@c (This is because it is clearly impossible to GC data referenced by integers.)
@c 
@c As a convenience for interactive use and debugging, all procedures thattake process objects will also accept integer Unix pids as arguments, coercing
@c 
@c them to the corresponding process objects. Since integer process ids are notreliable ways to keep a child's exit status from being reaped and garbage collected, programmers are encouraged to use process objects in production code.
@c (autoreap-policy [policy]) -! old-policy procedure
@c 
@c The scsh programmer can choose different policies for automatic processreaping. The policy is determined by applying this procedure to one of
@c 
@c the values 'early, 'late, or #f (i.e., no autoreap).
@c early The child is reaped from the Unix kernel's process table into scshas soon as it dies. This is done by having a signal handler for the
@c 
@c SIGCHLD signal reap the process.
@c late The child is not autoreaped until it dies and the scsh program dropsall pointers to its process object. That is, the process table is cleaned
@c 
@c out during garbage collection.
@c #f If autoreaping is turned off, process reaping is completely under con-trol of the programmer, who can force outstanding zombies to be
@c 
@c reaped by manually calling the reap-zombies procedure (see be-low).
@c 
@c Note that under any of the autoreap policies, a particular process p canbe manually reaped into scsh by simply calling
@c 
@c (wait p). All zombiescan be manually reaped with
@c reap-zombies.
@c 
@c The autoreap-policy procedure returns the policy's previous value.Calling
@c 
@c autoreap-policy with no arguments returns the current policywithout no change.
@c 
@c (reap-zombies) -! boolean procedure
@c 
@c This procedure reaps all outstanding exited child processes into scsh. Itreturns true if there are no more child processes to wait on, and false if
@c 
@c there are outstanding processes still running or suspended.
@c 
@c Issues with process reaping
@c Reaping a process does not reveal its process group at the time of death; thisinformation is lost when the process reaped. This means that a dead, reaped
@c 
@c 59
@c 
@c process is not eligible as a return value for a future wait-process-group call.This is not likely to be a problem for most code, as programs almost never wait
@c on exited processes by process group. Process group waiting is usually appliedto stopped processes, which are never reaped. So it is unlikely that this will be
@c a problem for most programs.
@c 
@c Automatic process reaping is a useful programming convenience. How-ever, if a program is careful to wait for all children, and does not wish automatic reaping to happen, the programmer can simply turn process autoreapingoff.
@c 
@c Programs that do not wish to use automatic process reaping should beaware that some scsh routines create subprocesses but do not return the child's
@c pid: run/port*, and its related procedures and special forms (run/strings, etal.). Automatic process reaping will clean the child processes created by these
@c procedures out of the kernel's process table. If a program doesn't use processreaping, it should either avoid these forms, or use
@c 
@c wait-any to wait for thechildren to exit.
@c 
@c @subsection Process waiting
@c (wait proc/pid [flags]) -! status procedure
@c 
@c This procedure waits until a child process exits, and returns its exit code.The proc/pid argument is either a process object (section @ref{3.4.1}) or an integer process id. Wait returns the child's exit status code (or suspensioncode, if the
@c 
@c wait/stopped-children option is used, see below). Statusvalues can be queried with the procedures in section @ref{3.4.3}.
@c 
@c The flags argument is an integer whose bits specify additional options. Itis composed by or'ing together the following flags:
@c 
@c Flag Meaning
@c wait/poll Return #f immediately if child still active.
@c wait/stopped-children Wait for suspend as well as exit.
@c 
@c (wait-any [flags]) -! [proc status] procedure
@c 
@c The optional flags argument is as for wait. This procedure waits for anychild process to exit (or stop, if the
@c 
@c wait/stopped-children flag is used)It returns the process' process object and status code. If there are no children left for which to wait, the two values [#f #t] are returned. If the
@c wait/poll flag is used, and none of the children are immediately eligblefor waiting, then the values
@c 
@c [#f #f] are returned:
@c 
@c [#f #f] Poll, none ready[
@c 
@c #f #t] No children
@c 
@c 60
@c 
@c Wait-any will not return a process that has been previouslywaited by any other process-wait procedure (
@c 
@c wait, wait-any, and
@c wait-process-group). It will return reaped processes that haven't yetbeen waited.
@c 
@c The use of wait-any is deprecated.
@c 
@c (wait-process-group proc/pid [flags]) -! [proc status] procedure
@c 
@c This procedure waits for any child whose process group is proc/pid (eithera process object or a pid). The flags argument is as for
@c 
@c wait.
@c 
@c Note that if the programmer wishes to wait for exited processes by pro-cess group, the program should take care not to use process reaping
@c 
@c (section @ref{3.4.1}), as this loses process group information. However, mostprocess-group waiting is for stopped processes (to implement job control), so this is rarely an issue, as stopped processes are not subject toreaping.
@c 
@c @subsection Analysing process status codes
@c When a child process dies (or is suspended), its parent can call the wait pro-cedure to recover the exit (or suspension) status of the child. The exit status is
@c a small integer that encodes information describing how the child terminated.The bit-level format of the exit status is not defined by P
@c 
@c OSIX; you must usethe following three functions to decode one. However, if a child terminates
@c 
@c normally with exit code 0, @acronym{POSIX} does require wait to return an exit status thatis exactly zero. So
@c 
@c (zero? status) is a correct way to test for non-error, normaltermination, e.g.,
@c 
@c (if (zero? (run (rcp scsh.tar.gz lambda.csd.hku.hk:)))
@c 
@c (delete-file "scsh.tar.gz"))
@c 
@c (status:exit-val status) -! integer or #f procedure
@c (status:stop-sig status) -! integer or #f procedure
@c (status:term-sig status) -! integer or #f procedure
@c 
@c For a given status value produced by calling wait, exactly one of theseroutines will return a true value.
@c 
@c If the child process exited normally, status:exit-val returns the exitcode for the child process (i.e., the value the child passed to
@c 
@c exit or re-turned from
@c main). Otherwise, this function returns false.
@c 
@c 61
@c 
@c If the child process was suspended by a signal, status:stop-sig returnsthe signal that suspended the child. Otherwise, this function returns
@c false.
@c If the child process terminated abnormally, status:term-sig returns thesignal that terminated the child. Otherwise, this function returns false.
@c 
@section Process state
@c (umask) -! fixnum procedure
@c (set-umask perms) -! undefined procedure
@c (with-umask* perms thunk) -! value(s) of thunk procedure
@c (with-umask perms . body) -! value(s) of body syntax
@c 
@c The process' current umask is retrieved with umask, and set with
@c (set-umask perms). Calling with-umask* changes the umask to permsfor the duration of the call to thunk. If the program throws out of thunk
@c 
@c by invoking a continuation, the umask is reset to its external value. Ifthe program throws back into thunk by calling a stored continuation, the
@c umask is restored to the perms value. The special form with-umask isequivalent in effect to the procedure
@c 
@c with-umask*, but does not requirethe programmer to explicitly wrap a
@c (* () ...) around the body of thecode to be executed.
@c 
@c (chdir [fname]) -! undefined procedure
@c (cwd) -! string procedure
@c (with-cwd* fname thunk) -! value(s) of thunk procedure
@c (with-cwd fname . body) -! value(s) of body syntax
@c 
@c These forms manipulate the current working directory. The cwd can bechanged with
@c 
@c chdir (although in most cases, with-cwd is preferrable). If
@c chdir is called with no arguments, it changes the cwd to the user's homedirectory. The
@c 
@c with-cwd* procedure calls thunk with the cwd temporar-ily set to fname; when thunk returns, or is exited in a non-local fashion
@c 
@c (e.g., by raising an exception or by invoking a continuation), the cwd isreturned to its original value. The special form
@c 
@c with-cwd is simply syn-tactic sugar for
@c with-cwd*.
@c 
@c (pid) -! fixnum procedure
@c (parent-pid) -! fixnum procedure
@c (process-group) -! fixnum procedure
@c (set-process-group [proc/pid] pgrp) -! undefined procedure
@c 
@c (pid) and (parent-pid) retrieve the process id for the current processand its parent.
@c 
@c (process-group) returns the process group of the current
@c 
@c 62
@c 
@c process. A process' process-group can be set with set-process-group;the value proc/pid specifies the affected process. It may be either a process
@c object or an integer process id, and defaults to the current process.
@c (set-priority which who priority) -! undefined procedure
@c (priority which who) -! fixnum procedure
@c (nice [proc/pid delta]) -! undefined procedure
@c 
@c These procedures set and access the priority of processes. I can't remem-ber how
@c 
@c set-priority and priority work, so no documentation, andbesides, they aren't implemented yet, anyway.
@c 
@c (user-login-name) -! string procedure
@c (user-uid) -! fixnum procedure
@c (user-gid) -! fixnum procedure
@c (user-supplementary-gids) -! fixnum list procedure
@c (set-uid uid) -! undefined procedure
@c (set-gid gid) -! undefined procedure
@c 
@c These routines get and set the effective and real user and group ids. The
@c set-uid and set-gid routines correspond to the @acronym{POSIX} setuid() and
@c setgid() procedures.
@c 
@c (user-effective-uid) -! fixnum procedure
@c (set-user-effective-uid fixnum) -! undefined procedure
@c (with-user-effective-uid* fixnum thunk) -! value(s) of thunk procedure
@c (with-user-effective-uid fixnum . body) -! value(s) of body syntax
@c (user-effective-gid) -! fixnum procedure
@c (set-user-effective-gid fixnum) -! undefined procedure
@c (with-user-effective-gid* fixnum thunk) -! value(s) of thunk procedure
@c (with-user-effective-gid fixnum . body) -! value(s) of body syntax
@c 
@c These forms manipulate the effective user/group IDs. Possible valuesfor setting this resource are either the real user/group ID or the saved
@c 
@c set-user/group-ID. The with-... forms perform the ususal tempraryassignment during the execution of the second argument. The effective
@c user and group IDs are thread-local.
@c (process-times) -! [fixnum fixnum fixnum fixnum] procedure
@c 
@c Returns four values:user CPU time in clock-ticks
@c 
@c system CPU time in clock-ticksuser CPU time of all descendant processes
@c system CPU time of all descendant processesNote that CPU time clock resolution is not the same as the real-time clock
@c resolution provided by time+ticks. That's Unix.
@c 
@c 63
@c 
@c (cpu-ticks/sec) -! integer procedure
@c 
@c Returns the resolution of the CPU timer in clock ticks per second. Thiscan be used to convert the times reported by
@c 
@c process-times to seconds.
@c 
@section User and group database access
@c These procedures are used to access the user and group databases (e.g., theones traditionally stored in
@c 
@c /etc/passwd and /etc/group.)
@c 
@c (user-info uid/name) -! record procedure
@c 
@c Return a user-info record giving the recorded information for a partic-ular user:
@c 
@c (define-record user-info
@c 
@c name uid gid home-dir shell)
@c 
@c The uid/name argument is either an integer uid or a string user-name.
@c 
@c (->uid uid/name) -! fixnum procedure
@c (->username uid/name) -! string procedure
@c 
@c These two procedures coerce integer uid's and user names to a particularform.
@c 
@c (group-info gid/name) -! record procedure
@c 
@c Return a group-info record giving the recorded information for a partic-ular group:
@c 
@c (define-record group-info
@c 
@c name gid members)
@c 
@c The gid/name argument is either an integer gid or a string group-name.
@c 
@section Accessing command-line arguments
@c command-line-arguments string list
@c (command-line) -! string list procedure
@c 
@c The list of strings command-line-arguments contains the argumentspassed to the scsh process on the command line. Calling
@c 
@c (command-line)returns the complete
@c argv string list, including the program. So if we runa scsh program
@c 
@c /usr/shivers/bin/myls -CF src
@c 
@c 64
@c 
@c then command-line-arguments is
@c 
@c ("-CF" "src")
@c and (command-line) returns
@c 
@c ("/usr/shivers/bin/myls" "-CF" "src")
@c command-line returns a fresh list each time it is called. In this way,the programmer can get a fresh copy of the original argument list if
@c 
@c command-line-arguments has been modified or is lexically shadowed.
@c (arg arglist n [default]) -! string procedure
@c (arg* arglist n [default-thunk]) -! string procedure
@c (argv n [default]) -! string procedure
@c 
@c These procedures are useful for accessing arguments from argument lists.
@c arg returns the nth element of arglist. The index is 1-based. If n is toolarge, default is returned; if no default, then an error is signaled.
@c 
@c arg* is similar, except that the default-thunk is called to generate the de-fault value.
@c (argv n) is simply (arg (command-line) (+ n 1)). The +1 offset en-sures that the two forms
@c 
@c (arg command-line-arguments n)
@c (argv n)
@c 
@c return the same argument (assuming the user has not rebound or modi-fied
@c 
@c command-line-arguments).
@c 
@c Example:
@c 
@c (if (null? command-line-arguments)
@c 
@c (& (xterm -n ,host -title ,host
@c 
@c -name ,(string-append "xterm_" host)))
@c (let* ((progname (file-name-nondirectory (argv 1)))
@c 
@c (title (string-append host ":" progname)))
@c (& (xterm -n ,title
@c 
@c -title ,title
@c -e ,@command-line-arguments))))
@c 
@c A subtlety: when the scsh interpreter is used to execute a scsh program,the program name reported in the head of the
@c 
@c (command-line) list is thescsh program, not the interpreter. For example, if we have a shell script
@c 
@c in file fullecho:
@c 
@c #!/usr/local/bin/scsh -s
@c !#
@c (for-each (* (arg) (display arg) (display " "))
@c 
@c (command-line))
@c 
@c 65
@c 
@c and we run the program
@c 
@c fullecho hello world
@c the program will print out
@c 
@c fullecho hello world
@c not
@c 
@c /usr/local/bin/scsh -s fullecho hello world
@c 
@c This argument line processing ensures that if a scsh program is sub-sequently compiled into a standalone executable or byte-compiled to a
@c heap-image executable by the Scheme 48 virtual machine, its semanticswill be unchanged--the arglist processing is invariant. In effect, the
@c 
@c /usr/local/bin/scsh -s
@c is not part of the program; it's a specification for the machine to executethe program on, so it is not properly part of the program's argument list.
@c 
@section System parameters
@c (system-name) -! string procedure
@c 
@c Returns the name of the host on which we are executing. This may be alocal name, such as "solar," as opposed to a fully-qualified domain name
@c 
@c such as "solar.csie.ntu.edu.tw."
@c (uname) -! uname-record procedure
@c 
@c Returns a uname-record of the following structure:
@c 
@c (define-record uname
@c 
@c os-name
@c node-name
@c release
@c version
@c machine)
@c 
@c Each of the fields contains a string.
@c Be aware that @acronym{POSIX} limits the length of all entries to 32 characters, andthat the node name does not necessarily correspond to the fully-qualified
@c 
@c domain name.
@c 
@c 66
@c 
@section Signal system
@c Signal numbers are bound to the variables signal/hup, signal/int, . . . . Seetables 3.9 and 3.3 for the full list.
@c 
@c (signal-process proc sig) -! undefined procedure
@c (signal-process-group prgrp sig) -! undefined procedure
@c 
@c These two procedures send signals to a specific process, and all the pro-cesses in a specific process group, respectively. The proc and prgrp arguments are either processes or integer process ids.
@c (itimer secs) -! undefined procedure
@c 
@c Schedules a timer interrupt in secs seconds.{
@c Note As the thread system needs the timer interrupt for its own purpose,
@c itimer works by spawning a thread which calls the interrupt handler for
@c interrupt/alrm after the specified time.}
@c 
@c (process-sleep secs) -! undefined procedure
@c (process-sleep-until time) -! undefined procedure
@c 
@c The sleep procedure causes the process to sleep for secs seconds. The
@c sleep-until procedure causes the process to sleep until time (see section @ref{3.10}).
@c 
@c {Note The use of these procedures is deprecated as they suspend all run-ning threads, including the ones Scsh uses for administrtive purposes.
@c Consider using the sleep procedure from the thread package.}
@c 
@c Interrupt handlers
@c Scsh interrupt handlers are complicated by the fact that scsh is implemented ontop of the Scheme 48 virtual machine, which has its own interrupt system, independent of the Unix signal system. This means that Unix signals are deliveredin two stages: first, Unix delivers the signal to the Scheme 48 virtual machine,
@c then the Scheme 48 virtual machine delivers the signal to the executing Schemeprogram as a Scheme 48 interrupt. This ensures that signal delivery happens
@c between two VM instructions, keeping individual instructions atomic.
@c 
@c The Scheme 48 machine has its own set of interrupts, which includes theasynchronous Unix signals (table 3.9).
@c 
@c (signal->interrupt integer) -! integer procedure
@c 
@c The programmer maps from Unix signals to Scheme 48 interrupts withthe
@c 
@c signal->interrupt procedure. If the signal does not have a definedScheme 48 interrupt, an error is signaled.
@c 
@c 67
@c 
@c Interrupt Unix signal OS Variant
@c interrupt/alrma signal/alrm @acronym{POSIX}
@c interrupt/intb signal/int @acronym{POSIX}
@c interrupt/memory-shortage N/A
@c interrupt/chld signal/chld @acronym{POSIX}
@c interrupt/cont signal/cont @acronym{POSIX}
@c interrupt/hup signal/hup @acronym{POSIX}
@c interrupt/quit signal/quit @acronym{POSIX}
@c interrupt/term signal/term @acronym{POSIX}
@c interrupt/tstp signal/tstp @acronym{POSIX}
@c interrupt/usr1 signal/usr1 @acronym{POSIX}
@c interrupt/usr2 signal/usr2 @acronym{POSIX}
@c 
@c interrupt/info signal/info BSD only
@c interrupt/io signal/io BSD + SVR4
@c interrupt/poll signal/poll SVR4 only
@c interrupt/prof signal/prof BSD + SVR4
@c interrupt/pwr signal/pwr SVR4 only
@c interrupt/urg signal/urg BSD + SVR4
@c interrupt/vtalrm signal/vtalrm BSD + SVR4
@c interrupt/winch signal/winch BSD + SVR4
@c interrupt/xcpu signal/xcpu BSD + SVR4
@c interrupt/xfsz signal/xfsz BSD + SVR4
@c 
@c Table 3.2: Scheme 48 virtual-machine interrupts and related Unix signals. Onlythe P
@c 
@c OSIX signals are guaranteed to be defined; however, your implementationand OS may define other signals and interrupts not listed here.
@c 
@c aAlso bound to Scheme 48 interrupt interrupt/alarm.
@c bAlso bound to Scheme 48 interrupt interrupt/keyboard.
@c 
@c 68
@c 
@c Unix signal Type OS Variant
@c signal/stop Uncatchable @acronym{POSIX}
@c signal/kill Uncatchable @acronym{POSIX}
@c 
@c signal/abrt Synchronous @acronym{POSIX}
@c signal/fpe Synchronous @acronym{POSIX}
@c signal/ill Synchronous @acronym{POSIX}
@c signal/pipe Synchronous @acronym{POSIX}
@c signal/segv Synchronous @acronym{POSIX}
@c signal/ttin Synchronous @acronym{POSIX}
@c signal/ttou Synchronous @acronym{POSIX}
@c 
@c signal/bus Synchronous BSD + SVR4
@c signal/emt Synchronous BSD + SVR4
@c signal/iot Synchronous BSD + SVR4
@c signal/sys Synchronous BSD + SVR4
@c signal/trap Synchronous BSD + SVR4
@c 
@c Table 3.3: Uncatchable and synchronous Unix signals. While these signals maybe sent with
@c 
@c signal-process or signal-process-group, there are no corre-sponding scsh interrupt handlers. Only the P
@c 
@c OSIX signals are guaranteed to bedefined; however, your implementation and OS may define other signals not
@c 
@c listed here.
@c 
@c 69
@c 
@c (interrupt-set integer1 . . . integern) -! integer procedure
@c 
@c This procedure builds interrupt sets from its interrupt arguments. A setis represented as an integer using a two's-complement representation of
@c 
@c the bit set.
@c 
@c (enabled-interrupts) -! interrupt-set procedure
@c (set-enabled-interrupts interrupt-set) -! interrupt-set procedure
@c 
@c Get and set the value of the enabled-interrupt set. Only interrupts in thisset have their handlers called when delivered. When a disabled interrupt
@c 
@c is delivered to the Scheme 48 machine, it is held pending until it becomesenabled, at which time its handler is invoked.
@c 
@c Interrupt sets are represented as integer bit sets (constructed with the
@c interrupt-set function). The set-enabled-interrupts procedure re-turns the previous value of the enabled-interrupt set.
@c 
@c (with-enabled-interrupts interrupt-set . body) -! value(s) of body syntax
@c (with-enabled-interrupts* interrupt-set thunk) -! value(s) of thunk procedure
@c 
@c Run code with a given set of interrupts enabled. Note that "enabling"an interrupt means enabling delivery from the Scheme 48 vm to the scsh
@c 
@c program. Using the Scheme 48 interrupt system is fairly lightweight,and does not involve actually making a system call. Note that enabling
@c an interrupt means that the assigned interrupt handler is allowed to runwhen the interrupt is delivered. Interrupts not enabled are held pending
@c when delivered.
@c Interrupt sets are represented as integer bit sets (constructed with the
@c interrupt-set function).
@c 
@c (set-interrupt-handler interrupt handler) -! old-handler procedure
@c 
@c Assigns a handler for a given interrupt, and returns the interrupt's oldhandler. The handler argument is
@c 
@c #f (ignore), #t (default), or a proceduretaking an integer argument; the return value follows the same conventions. Note that the interrupt argument is an interrupt value, not a signalvalue. An interrupt is delivered to the Scheme 48 machine by (1) blocking all interrupts, and (2) applying the handler procedure to the set ofinterrupts that were enabled prior to the interrupt delivery. If the procedure returns normally (i.e., it doesn't throw to a continuation), the setof enabled interrupts will be returned to its previous value. (To restore
@c the enabled-interrupt set before throwing out of an interrupt handler, see
@c set-enabled-interrupts)
@c 
@c 70
@c 
@c {Note If you set a handler for the interrupt/chld interrupt, you maybreak scsh's autoreaping process machinery. See the discussion of autoreaping in section @ref{3.4.1}.}
@c {Note We recommend you avoid using interrupt handlers unless you ab-solutely have to; Section @ref{9.4} describes a better interface to handling signals.}
@c 
@c (interrupt-handler interrupt) -! handler procedure
@c 
@c Return the handler for a given interrupt. Note that the argument is aninterrupt value, not a signal value. A handler is either
@c 
@c #f (ignore), #t(default), or a procedure taking an integer argument.
@c 
@c Note that scsh does not support interrupt handlers for "synchronous" Unixsignals, such as
@c 
@c signal/ill or signal/pipe (see table 3.3). Synchronous oc-currences of these signals are better handled by raising a Scheme exception.
@c 
@c There are, however, some rare situtations where it is necessary to ignore theoccurrence of a synchronous signal. For this case, the following procedures
@c exist:
@c (ignore-signal integer) -! undefined procedure
@c (handle-signal-default integer) -! undefined procedure
@c 
@c The procedure ignore-signal tells the process to ignore the given signal.The procedure
@c 
@c handle-signal-default resets the signal handler to thedefault handler.
@c 
@c These procedures manipulate the raw signal handler of the scsh processand therfore undermine the signal handling facility of the VM. They are
@c intended to be used for igoring synchronous signals if system calls can-not succeed otherwise. Do not use these procedures for asynchronous
@c signals!
@c 
@section Time
@c 
@c Scsh's time system is fairly sophisticated, particularly with respect to its carefultreatment of time zones. However, casual users shouldn't be intimidated; all of
@c the complexity is optional, and defaulting all the optional arguments reducesthe system to a simple interface.
@c 
@c 71
@c 
@c @subsection Terminology
@c 
@c "UTC" and "UCT" stand for "universal coordinated time," which is the officialname for what is colloquially referred to as "Greenwich Mean Time."
@c 
@c @acronym{POSIX} allows a single time zone to specify two different offsets from UTC:one standard one, and one for "summer time." Summer time is frequently
@c some sort of daylight savings time.
@c 
@c The scsh time package consistently uses this terminology: we never say"gmt" or "dst;" we always say "utc" and "summer time."
@c 
@c @subsection Basic data types
@c 
@c We have two types: time and date.
@c 
@c A time specifies an instant in the history of the universe. It is location andtime-zone independent.4 A time is a real value giving the number of elapsed
@c 
@c seconds since the Unix "epoch" (Midnight, January 1, 1970 UTC). Time valuesprovide arbitrary time resolution, limited only by the number system of the
@c underlying Scheme system.
@c 
@c A date is a name for an instant in time that is specified relative to somelocation/time-zone in the world, e.g.:
@c 
@c Friday October 31, 1994 3:47:21 pm EST.Dates provide one-second resolution, and are expressed with the following
@c record type:
@c 
@c (define-record date ; A Posix tm struct
@c 
@c seconds ; Seconds after the minute [0-59]
@c minute ; Minutes after the hour [0-59]
@c hour ; Hours since midnight [0-23]
@c month-day ; Day of the month [1-31]
@c month ; Months since January [0-11]
@c year ; Years since 1900
@c tz-name ; Time-zone name: #f or a string.
@c tz-secs ; Time-zone offset: #f or an integer.
@c summer? ; Summer (Daylight Savings) time in effect?
@c week-day ; Days since Sunday [0-6]
@c year-day) ; Days since Jan. 1 [0-365]
@c 
@c If the tz-secs field is given, it specifies the time-zone's offset from UTC inseconds. If it is specified, the
@c 
@c tz-name and summer? fields are ignored whenusing the date structure to determine a specific instant in time.
@c 
@c 4Physics pedants please note: The scsh authors live in a Newtonian universe. We disclaim
@c responsibility for calculations performed in non-@acronym{ANSI} standard light-cones.
@c 
@c 72
@c 
@c If the tz-name field is given, it is a time-zone string such as "EST" or
@c "HKT" understood by the OS. Since @acronym{POSIX} time-zone strings can specify dualstandard/summer time-zones (e.g., "EST5EDT" specifies U.S. Eastern Standard/Eastern Daylight Time), the value of the summer? field is used to resolvethe amiguous boundary cases. For example, on the morning of the Fall daylight savings change-over, 1:00am-2:00am happens twice. Hence the date 1:30am on this morning can specify two different seconds; the
@c 
@c summer? flag sayswhich one.
@c 
@c A date with tz-name = tz-secs = #f is a date that is specified in terms ofthe system's current time zone.
@c There is redundancy in the date data structure. For example, the year-dayfield is redundant with the
@c 
@c month-day and month fields. Either of these impliesthe values of the
@c week-day field. The summer? and tz-name fields are redun-dant with the
@c tz-secs field in terms of specifying an instant in time. Thisredundancy is provided because consumers of dates may want it broken out
@c 
@c in different ways. The scsh procedures that produce date records fill them outcompletely. However, when date records produced by the programmer are
@c passed to scsh procedures, the redundancy is resolved by ignoring some of thesecondary fields. This is described for each procedure below.
@c 
@c (make-date s min h mday mon y [tzn tzs summ? wday yday]) -! date procedure
@c 
@c When making a date record, the last five elements of the record are op-tional, and default to
@c 
@c #f, #f, #f, 0, and 0 respectively. This is useful whencreating a
@c date record to pass as an argument to time. Other procedures,however, may refuse to work with these incomplete
@c 
@c date records.
@c 
@c @subsection Time zones
@c 
@c Several time procedures take time zones as arguments. When optional, thetime zone defaults to local time zone. Otherwise the time zone can be one of:
@c 
@c #f Local timeInteger Seconds of offset from UTC. For example, New York City is -18000 (-5 hours), San Francisco is-28800 (-8 hours).
@c 
@c String A @acronym{POSIX} time zone string understood by the OS(i.e.., the sort of time zone assigned to the $TZ environment variable).
@c 
@c An integer time zone gives the number of seconds you must add to UTC to gettime in that zone. It is not "seconds west" of UTC--that flips the sign.
@c 
@c To get UTC time, use a time zone of either 0 or "UCT0".
@c 
@c 73
@c 
@c @subsection Procedures
@c 
@c (time+ticks) -! [secs ticks] procedure
@c (ticks/sec) -! real procedure
@c 
@c The current time, with sub-second resolution. Sub-second resolution is not provided by @acronym{POSIX}, but is available on many systems. The time isreturned as elapsed seconds since the Unix epoch, plus a number of subsecond "ticks." The length of a tick may vary from implementation toimplementation; it can be determined from
@c 
@c (ticks/sec).
@c 
@c The system clock is not required to report time at the full resolution givenby
@c 
@c (ticks/sec). For example, on BSD, time is reported at 1us resolution,so
@c 
@c (ticks/sec) is 1,000,000. That doesn't mean the system clock hasmicro-second resolution.
@c 
@c If the OS does not support sub-second resolution, the ticks value is always0, and
@c 
@c (ticks/sec) returns 1.
@c 
@c Remark: I chose to represent system clock resolution as ticks/secinstead of sec/tick to increase the odds that the value could be represented as an exact integer, increasing efficiency and making it easierfor Scheme implementations that don't have sophisticated numeric
@c support to deal with the quantity.
@c You can convert seconds and ticks to seconds with the expression
@c 
@c (+ secs (/ ticks (ticks/sec)))
@c 
@c Given that, why not have the fine-grain time procedure just return anon-integer real for time? Following Common Lisp, I chose to allow
@c 
@c the system clock to report sub-second time in its own units to lowerthe overhead of determining the time. This would be important for a
@c system that wanted to precisely time the duration of some event. Timestamps could be collected with little overhead, deferring the overhead
@c of precisely calculating with them until after collection.
@c This is all a bit academic for the Scheme 48 implementation, where wedetermine time with a heavyweight system call, but it's nice to plan
@c 
@c for the future.
@c 
@c (date) -! date-record procedure
@c (date [time tz]) -! date-record procedure
@c 
@c Simple (date) returns the current date, in the local time zone.
@c With the optional arguments, date converts the time to the date as spec-ified by the time zone tz. Time defaults to the current time; tz defaults to
@c 
@c local time, and is as described in the time-zone section.
@c If the tz argument is an integer, the date's tz-name field is a @acronym{POSIX} timezone of the form "
@c 
@c UTC+hh :mm :ss "; the trailing :mm :ss portion is deletedif it is zeroes.
@c 
@c 74
@c 
@c Oops: The Posix facility for converting dates to times, mktime(), hasa broken design: it indicates an error by returning -1, which is also a
@c legal return value (for date 23:59:59 UCT, 12/31/1969). Scsh resolvesthe ambiguity in a paranoid fashion: it always reports an error if the
@c underlying Unix facility returns -1. We feel your pain.
@c 
@c (time) -! integer procedure
@c (time [date]) -! integer procedure
@c 
@c Simple (time) returns the current time.
@c With the optional date argument, time converts a date to a time. Datedefaults to the current date.
@c 
@c Note that the input date record is overconstrained. time ignores date's
@c week-day and year-day fields. If the date's tz-secs field is set, the
@c tz-name and summer? fields are ignored.
@c 
@c If the tz-secs field is #f, then the time-zone is taken from the tz-namefield. A false
@c 
@c tz-name means the system's current time zone. When cal-culating with time-zones, the date's
@c 
@c summer? field is used to resolve am-biguities:
@c 
@c #f Resolve an ambiguous time in favor of non-summer time.true Resolve an ambiguous time in favor of summer time.
@c This is useful in boundary cases during the change-over. For example, inthe Fall, when US daylight savings time changes over at 2:00 am, 1:30 am
@c happens twice--it names two instants in time, an hour apart.
@c Outside of these boundary cases, the summer? flag is ignored. For ex-ample, if the standard/summer change-overs happen in the Fall and the
@c 
@c Spring, then the value of summer? is ignored for a January or July date. AJanuary date would be resolved with standard time, and a July date with
@c summer time, regardless of the summer? value.
@c The summer? flag is also ignored if the time zone doesn't have a summertime--for example, simple UTC.
@c 
@c (date->string date) -! string procedure
@c (format-date fmt date) -! string procedure
@c 
@c Date->string formats the date as a 24-character string of the form:Sun Sep 16 01:03:52 1973
@c 
@c Format-date formats the date according to the format string fmt. Theformat string is copied verbatim, except that tilde characters indicate conversion specifiers that are replaced by fields from the date record. Figure3.1 gives the full set of conversion specifiers supported by
@c 
@c format-date.
@c 
@c (fill-in-date! date) -! date procedure
@c 
@c 75
@c 
@c ~~ Converted to the ~ character.
@c ~a abbreviated weekday name
@c ~A full weekday name
@c ~b abbreviated month name
@c ~B full month name
@c ~c time and date using the time and date representation for the locale(
@c 
@c ~X ~x)
@c 
@c ~d day of the month as a decimal number (01-31)
@c ~H hour based on a 24-hour clock as a decimal number (00-23)
@c ~I hour based on a 12-hour clock as a decimal number (01-12)
@c ~j day of the year as a decimal number (001-366)
@c ~m month as a decimal number (01-12)
@c ~M minute as a decimal number (00-59)
@c ~p AM/PM designation associated with a 12-hour clock
@c ~S second as a decimal number (00-61)
@c ~U week number of the year; Sunday is first day of week (00-53)
@c ~w weekday as a decimal number (0-6), where Sunday is 0
@c ~W week number of the year; Monday is first day of week (00-53)
@c ~x date using the date representation for the locale
@c ~X time using the time representation for the locale
@c ~y year without century (00-99)
@c ~Y year with century (e.g.1990)
@c ~Z time zone name or abbreviation, or no characters if no time zone isdeterminable
@c 
@c Figure 3.1: format-date conversion specifiers
@c 
@c 76
@c 
@c This procedure fills in missing, redundant slots in a date record. In de-creasing order of priority:
@c 
@c * year, month, month-day ) year-dayIf the
@c 
@c year, month, and month-day fields are all defined (are all inte-gers), the
@c 
@c year-day field is set to the corresponding value.*
@c 
@c year, year-day ) month, month-dayIf the
@c 
@c month and month-day fields aren't set, but the year and
@c year-day fields are set, then month and month-day are calculated.*
@c 
@c year, month, month-day, year-day ) week-dayIf either of the above rules is able to determine what day it is, the
@c 
@c week-day field is then set.*
@c tz-secs ) tz-nameIf
@c 
@c tz-secs is defined, but tz-name is not, it is assigned a time-zonename of the form "
@c 
@c UTC+hh :mm :ss "; the trailing :mm :ss portion isdeleted if it is zeroes.
@c 
@c * tz-name, date, summer? ) tz-secs, summer?If the date information is provided up to second resolution,
@c 
@c tz-nameis also provided, and
@c tz-secs is not set, then tz-secs and summer?are set to their correct values. Summer-time ambiguities are resolved using the original value of summer?. If the time zone doesn'thave a summer time variant, then
@c 
@c summer? is set to #f.*
@c 
@c local time, date, summer? ) tz-name, tz-secs, summer?If the date information is provided up to second resolution, but no
@c 
@c time zone information is provided (both tz-name and tz-secs aren'tset), then we proceed as in the above case, except the system's current time zone is used.
@c These rules allow one particular ambiguity to escape: if both tz-nameand
@c 
@c tz-secs are set, they are not brought into agreement. It isn't clearhow to do this, nor is it clear which one should take precedence.
@c 
@c Oops: fill-in-date! isn't implemented yet.
@c 
@section Environment variables
@c 
@c (setenv var val) -! undefined procedure
@c (getenv var) -! string procedure
@c 
@c These functions get and set the process environment, stored in the exter-nal C variable
@c 
@c char **environ. An environment variable var is a string.If an environment variable is set to a string val, then the process' global
@c 
@c 77
@c 
@c environment structure is altered with an entry of the form "var=val". Ifval is
@c 
@c #f, then any entry for var is deleted.
@c 
@c (env->alist) -! string!string alist procedure
@c 
@c The env->alist procedure converts the entire environment into an alist,e.g.,
@c 
@c (("TERM" . "vt100")
@c 
@c ("SHELL" . "/usr/local/bin/scsh")
@c ("PATH" . "/sbin:/usr/sbin:/bin:/usr/bin")
@c ("EDITOR" . "emacs")
@c ...)
@c 
@c (alist->env alist) -! undefined procedure
@c 
@c Alist must be an alist whose keys are all strings, and whose values areall either strings or string lists. String lists are converted to colon lists
@c 
@c (see below). The alist is installed as the current Unix environment (i.e.,converted to a null-terminated C vector of
@c 
@c "var=val" strings which is as-signed to the global
@c char **environ).
@c 
@c ;;; Note $PATH entry is converted
@c ;;; to /sbin:/usr/sbin:/bin:/usr/bin.
@c (alist->env '(("TERM" . "vt100")
@c 
@c ("PATH" "/sbin" "/usr/sbin" "/bin")
@c ("SHELL" . "/usr/local/bin/scsh")))
@c 
@c Note that env->alist and alist->env are not exact inverses--
@c alist->env will convert a list value into a single colon-separated string,but
@c 
@c env->alist will not parse colon-separated values into lists. (See the
@c $PATH element in the examples given for each procedure.)
@c 
@c The following three functions help the programmer manipulate alist tablesin some generally useful ways. They are all defined using
@c 
@c equal? for key com-parison.
@c 
@c (alist-delete key alist) -! alist procedure
@c 
@c Delete any entry labelled by value key.
@c 
@c (alist-update key val alist) -! alist procedure
@c 
@c Delete key from alist, then cons on a (key . val) entry.
@c 
@c 78
@c 
@c (alist-compress alist) -! alist procedure
@c 
@c Compresses alist by removing shadowed entries. Example:
@c 
@c ;;; Shadowed (1 . c) entry removed.
@c (alist-compress '( (1 . a) (2 . b) (1 . c) (3 . d) ))=)
@c 
@c ((1 . a) (2 . b) (3 . d))
@c 
@c (with-env* env-alist-delta thunk) -! value(s) of thunk procedure
@c (with-total-env* env-alist thunk) -! value(s) of thunk procedure
@c 
@c These procedures call thunk in the context of an altered environment.They return whatever values thunk returns. Non-local returns restore the
@c 
@c environment to its outer value; throwing back into the thunk by invokinga stored continuation restores the environment back to its inner value.
@c 
@c The env-alist-delta argument specifies a modification to the current environ-ment--thunk's environment is the original environment overridden with
@c the bindings specified by the alist delta.
@c The env-alist argument specifies a complete environment that is installedfor thunk.
@c 
@c (with-env env-alist-delta . body) -! value(s) of body syntax
@c (with-total-env env-alist . body) -! value(s) of body syntax
@c 
@c These special forms provide syntactic sugar for with-env* and withtotal-env*. The env alists are not evaluated positions, but are implicitlybackquoted. In this way, they tend to resemble binding lists for
@c 
@c let and
@c let* forms.
@c 
@c Example: These four pieces of code all run the mailer with special $TERMand
@c 
@c $EDITOR values.
@c 
@c (with-env (("TERM" . "xterm") ("EDITOR" . ,my-editor))
@c 
@c (run (mail shivers@lcs.mit.edu)))
@c 
@c (with-env* `(("TERM" . "xterm") ("EDITOR" . ,my-editor))
@c 
@c (* () (run (mail shivers@csd.hku.hk))))
@c 
@c (run (begin (setenv "TERM" "xterm") ; Env mutation happens
@c 
@c (setenv "EDITOR" my-editor) ; in the subshell.
@c (exec-epf (mail shivers@research.att.com))))
@c 
@c 79
@c 
@c ;; In this example, we compute an alternate environment ENV2
@c ;; as an alist, and install it with an explicit call to the
@c ;; EXEC-PATH/ENV procedure.
@c (let* ((env (env->alist)) ; Get the current environment,
@c 
@c (env1 (alist-update env "TERM" "xterm")) ; and compute
@c (env2 (alist-update env1 "EDITOR" my-editor))) ; the new env.
@c (run (begin (exec-path/env "mail" env2 "shivers@cs.cmu.edu"))))
@c 
@c @subsection Path lists and colon lists
@c 
@c When environment variables such as $PATH need to encode a list of strings(such as a list of directories to be searched), the common Unix convention is
@c to separate the list elements with colon delimiters.5 To convert between thecolon-separated string encoding and the list-of-strings representation, see the
@c infix-splitter function (section @ref{8.1.2}) and the string library's string-joinfunction. For example,
@c 
@c (define split (infix-splitter (rx ":")))
@c (split "/sbin:/bin::/usr/bin") )
@c 
@c '("/sbin" "/bin" "" "/usr/bin")
@c (string-join ":" '("/sbin" "/bin" "" "/usr/bin")) )
@c 
@c "/sbin:/bin::/usr/bin"
@c 
@c The following two functions are useful for manipulating these ordered lists,once they have been parsed from their colon-separated form.
@c 
@c (add-before elt before list) -! list procedure
@c (add-after elt after list) -! list procedure
@c 
@c These functions are for modifying search-path lists, where element orderis significant.
@c 
@c add-before adds elt to the list immediately before the first occurrence ofbefore in the list. If before is not in the list, elt is added to the end of the list.
@c add-after is similar: elt is added after the last occurrence of after. If afteris not found, elt is added to the beginning of the list.
@c Neither function destructively alters the original path-list. The result mayshare structure with the original list. Both functions use
@c 
@c equal? for com-paring elements.
@c 
@c 5. . . and hope the individual list elements don't contain colons themselves.
@c 
@c 80
@c 
@c @subsection $USER, $HOME, and $PATH
@c 
@c Like sh and unlike csh, scsh has no interactive dependencies on environmentvariables. It does, however, initialise certain internal values at startup time
@c from the initial process environment, in particular $HOME and $PATH. Scshnever uses
@c 
@c $USER at all. It computes (user-login-name) from the system call
@c (user-uid).
@c 
@c home-directory string
@c exec-path-list string list thread-fluid
@c 
@c Scsh accesses $HOME at start-up time, and stores the value in the globalvariable
@c 
@c home-directory. It uses this value for ~ lookups and for return-ing to home on
@c 
@c (chdir).
@c 
@c Scsh accesses $PATH at start-up time, colon-splits the path list, and storesthe value in the thread fluid
@c 
@c exec-path-list. This list is used for
@c exec-path and exec-path/env searches.
@c 
@c To access, rebind or side-effect thread-fluid cells, you must open the
@c thread-fluids package.
@c 
@section Terminal device control
@c 
@c Scsh provides a complete set of routines for manipulating terminal devices--putting them in "raw" mode, changing and querying their special characters,
@c modifying their I/O speeds, and so forth. The scsh interface is designed bothfor generality and portability across different Unix platforms, so you don't
@c have to rewrite your program each time you move to a new system. We'vealso made an effort to use reasonable, Scheme-like names for the multitudinous named constants involved, so when you are reading code, you'll haveless likelihood of getting lost in a bewildering maze of obfuscatory constants
@c named ICRNL, INPCK, IUCLC, and ONOCR.
@c 
@c This section can only lay out the basic functionality of the terminal deviceinterface. For further details, see the termios(3) man page on your system, or
@c 
@c consult one of the standard Unix texts.
@c 
@c @subsection Portability across OS variants
@c 
@c Terminal-control software is inescapably complex, ugly, and low-level. Unixvariants each provide their own way of controlling terminal devices, making
@c it difficult to provide interfaces that are portable across different Unix systems.Scsh's terminal support is based primarily upon the @acronym{POSIX} termios interface.Programs that can be written using only the @acronym{POSIX} interface are likely to bewidely portable.
@c 
@c 81
@c 
@c The bulk of the documentation that follows consists of several pages worthof tables defining different named constants that enable and disable different
@c features of the terminal driver. Some of these flags are @acronym{POSIX}; others are takenfrom the two common branches of Unix development, SVR4 and 4.3+ Berkeley.
@c Scsh guarantees that the non-@acronym{POSIX} constants will be bound identifiers.
@c 
@c * If your OS supports a particular non-@acronym{POSIX} flag, its named constant willbe bound to the flag's value.
@c 
@c * If your OS doesn't support the flag, its named constant will be present,but bound to
@c 
@c #f.
@c 
@c This means that if you want to use SVR4 or Berkeley features in a program,your program can portably test the values of the flags before using them--the
@c flags can reliably be referenced without producing OS-dependent "unboundvariable" errors.
@c 
@c Finally, note that although @acronym{POSIX}, SVR4, and Berkeley cover the lion's shareof the terminal-driver functionality, each operating system inevitably has nonstandard extensions. While a particular scsh implementation may providethese extensions, they are not portable, and so are not documented here.
@c 
@c @subsection Miscellaneous procedures
@c 
@c (tty? fd/port) -! boolean procedure
@c 
@c Return true if the argument is a tty.
@c 
@c (tty-file-name fd/port) -! string procedure
@c 
@c The argument fd/port must be a file descriptor or port open on a tty. Re-turn the file-name of the tty.
@c 
@c @subsection The tty-info record type
@c 
@c The primary data-structure that describes a terminal's mode is a tty-inforecord, defined as follows:
@c 
@c 82
@c 
@c (define-record tty-info
@c 
@c control-chars ; String: Magic input chars
@c input-flags ; Int: Input processing
@c output-flags ; Int: Output processing
@c control-flags ; Int: Serial-line control
@c local-flags ; Int: Line-editting UI
@c input-speed ; Int: Code for input speed
@c output-speed ; Int: Code for output speed
@c min ; Int: Raw-mode input policy
@c time) ; Int: Raw-mode input policy
@c 
@c The control-characters string
@c The control-chars field is a character string; its characters may be indexed byinteger values taken from table 3.4.
@c 
@c As discussed above, only the @acronym{POSIX} entries in table 3.4 are guaranteed tobe legal, integer indices. A program can reliably test the OS to see if the non@acronym{POSIX} characters are supported by checking the index constants. If the control-character function is supported by the terminal driver, then the corresponding
@c index will be bound to an integer; if it is not supported, the index will be boundto
@c 
@c #f.
@c 
@c To disable a given control-character function, set its correspondingentry in the
@c 
@c tty-info:control-chars string to the special character
@c disable-tty-char (and then use the (set-tty-info fd/port info) procedureto update the terminal's state).
@c 
@c The flag fields
@c The tty-info record's input-flags, output-flags, control-flags, and
@c local-flags fields are all bit sets represented as two's-complement integers.Their values are composed by or'ing together values taken from the named
@c 
@c constants listed in tables 3.5 through 3.9.
@c 
@c As discussed above, only the @acronym{POSIX} entries listed in these tables are guar-anteed to be legal, integer flag values. A program can reliably test the OS to see
@c 
@c if the non-@acronym{POSIX} flags are supported by checking the named constants. If thefeature is supported by the terminal driver, then the corresponding flag will be
@c bound to an integer; if it is not supported, the flag will be bound to #f.
@c 
@c 83
@c 
@c The speed fields
@c The input-speed and output-speed fields determine the I/O rate of the ter-minal's line. The value of these fields is an integer giving the speed in bits-persecond. The following speeds are supported by @acronym{POSIX}:
@c 
@c 0 134 600 480050 150 1200 9600
@c 
@c 75 200 1800 19200110 300 2400 38400
@c 
@c Your OS may accept others; it may also allow the special symbols 'exta and
@c 'extb.
@c 
@c The min and time fields
@c The integer min and time fields determine input blocking behaviour duringnon-canonical (raw) input; otherwise, they are ignored. See the termios(3) man
@c page for further details.
@c 
@c Be warned that @acronym{POSIX} allows the base system call's representation of the
@c tty-info record to share storage for the min field and the ttychar/eof elementof the control-characters string, and for the
@c 
@c time field and the ttychar/eolelement of the control-characters string. Many implementations in fact do this.
@c 
@c To stay out of trouble, set the min and time fields only if you are putting theterminal into raw mode; set the @acronym{eof} and eol control-characters only if you are
@c putting the terminal into canonical mode. It's ugly, but it's Unix.
@c 
@c @subsection Using tty-info records
@c 
@c (make-tty-info if of cf lf ispeed ospeed min time) -! tty-info-record procedure
@c (copy-tty-info tty-info-record) -! tty-info-record procedure
@c 
@c These procedures make it possible to create new tty-info records. Thetypical method for creating a new record is to copy one retrieved by a call
@c 
@c to the tty-info procedure, then modify the copy as desired. Note thatthe
@c 
@c make-tty-info procedure does not take a parameter to define thenew record's control characters.6 Instead, it simply returns a
@c 
@c tty-inforecord whose control-character string has all elements initialised to A
@c 
@c SCIInul. You may then install the special characters by assigning to the
@c 
@c string. Similarly, the control-character string in the record produced by
@c copy-tty-info does not share structure with the string in the record be-ing copied, so you may mutate it freely.
@c 
@c 6 Why? Because the length of the string varies from Unix to Unix. For example, the word-erase
@c control character (typically control-w) is provided by most Unixes, but not part of the @acronym{POSIX} spec.
@c 
@c 84
@c 
@c (tty-info [fd/port/fname]) -! tty-info-record procedure
@c 
@c The fd/port/fname parameter is an integer file descriptor or Scheme I/Oport opened on a terminal device, or a file-name for a terminal device;
@c 
@c it defaults to the current input port. This procedure returns a tty-inforecord describing the terminal's current mode.
@c 
@c (set-tty-info/now fd/port/fname info) -! no-value procedure
@c (set-tty-info/drain fd/port/fname info) -! no-value procedure
@c (set-tty-info/flush fd/port/fname info) -! no-value procedure
@c 
@c The fd/port/fname parameter is an integer file descriptor or Scheme I/Oport opened on a terminal device, or a file-name for a terminal device.
@c 
@c The procedure chosen determines when and how the terminal's mode isaltered:
@c 
@c Procedure Meaning
@c set-tty-info/now Make change immediately.
@c set-tty-info/drain Drain output, then change.
@c set-tty-info/flush Drain output, flush input, then change.
@c 
@c Oops: If I had defined these with the parameters in the reverse order,I could have made fd/port/fname optional. Too late now.
@c 
@c @subsection Other terminal-device procedures
@c 
@c (send-tty-break [fd/port/fname duration]) -! no-value procedure
@c 
@c The fd/port/fname parameter is an integer file descriptor or Scheme I/Oport opened on a terminal device, or a file-name for a terminal device;
@c 
@c it defaults to the current output port. Send a break signal to the desig-nated terminal. A break signal is a sequence of continuous zeros on the
@c terminal's transmission line.
@c The duration argument determines the length of the break signal. A zerovalue (the default) causes a break of between 0.25 and 0.5 seconds to be
@c 
@c sent; other values determine a period in a manner that will depend uponlocal community standards.
@c 
@c (drain-tty [fd/port/fname]) -! no-value procedure
@c 
@c The fd/port/fname parameter is an integer file descriptor or Scheme I/Oport opened on a terminal device, or a file-name for a terminal device; it
@c 
@c defaults to the current output port.
@c This procedure waits until all the output written to the terminal devicehas been transmitted to the device. If fd/port/fname is an output port with
@c 
@c buffered I/O enabled, then the port's buffered characters are flushed be-fore waiting for the device to drain.
@c 
@c 85
@c 
@c (flush-tty/input [fd/port/fname]) -! no-value procedure
@c (flush-tty/output [fd/port/fname]) -! no-value procedure
@c (flush-tty/both [fd/port/fname]) -! no-value procedure
@c 
@c The fd/port/fname parameter is an integer file descriptor or SchemeI/O port opened on a terminal device, or a file-name for a terminal device; it defaults to the current input port (flush-tty/input and
@c flush-tty/both), or output port (flush-tty/output).
@c 
@c These procedures discard the unread input chars or unwritten outputchars in the tty's kernel buffers.
@c 
@c (start-tty-output [fd/port/fname]) -! no-value procedure
@c (stop-tty-output [fd/port/fname]) -! no-value procedure
@c (start-tty-input [fd/port/fname]) -! no-value procedure
@c (stop-tty-input [fd/port/fname]) -! no-value procedure
@c 
@c These procedures can be used to control a terminal's input and outputflow. The fd/port/fname parameter is an integer file descriptor or Scheme
@c 
@c I/O port opened on a terminal device, or a file-name for a terminal de-vice; it defaults to the current input or output port.
@c 
@c The stop-tty-output and start-tty-output procedures suspend andresume output from a terminal device. The
@c 
@c stop-tty-input and
@c start-tty-input procedures transmit the special STOP and STARTcharacters to the terminal with the intention of stopping and starting terminal input flow.
@c 
@c @subsection Control terminals, sessions, and terminal process groups
@c 
@c (open-control-tty tty-name [flags]) -! port procedure
@c 
@c This procedure opens terminal device tty-name as the process' control ter-minal (see the
@c 
@c termios man page for more information on control termi-nals). The tty-name argument is a file-name such as
@c 
@c /dev/ttya. The flagsargument is a value suitable as the second argument to the
@c 
@c open-filecall; it defaults to
@c open/read+write, causing the terminal to be openedfor both input and output.
@c 
@c The port returned is an input port if the flags permit it, otherwise an out-put port. R5RS/Scheme 48/scsh do not have input/output ports, so it's
@c one or the other. However, you can get both read and write ports openon a terminal by opening it read/write, taking the result input port, and
@c duping it to an output port with dup->outport.
@c This procedure guarantees to make the opened terminal the process' con-trol terminal only if the process does not have an assigned control terminal at the time of the call. If the scsh process already has a controlterminal, the results are undefined.
@c 
@c 86
@c 
@c To arrange for the process to have no control terminal prior to calling thisprocedure, use the
@c 
@c become-session-leader procedure.
@c 
@c (become-session-leader) -! integer procedure
@c 
@c This is the C setsid() call. @acronym{POSIX} job-control has a three-level hierarchy:session/process-group/process. Every session has an associated control
@c 
@c terminal. This procedure places the current process into a brand newsession, and disassociates the process from any previous control terminal. You may subsequently use open-control-tty to open a new controlterminal.
@c 
@c It is an error to call this procedure if the current process is already aprocess-group leader. One way to guarantee this is not the case is only to
@c call this procedure after forking.
@c (tty-process-group fd/port/fname) -! integer procedure
@c (set-tty-process-group fd/port/fname pgrp) -! undefined procedure
@c 
@c This pair of procedures gets and sets the process group of a given termi-nal.
@c 
@c (control-tty-file-name) -! string procedure
@c 
@c Return the file-name of the process' control tty. On every version of Unixof which we are aware, this is just the string
@c 
@c "/dev/tty". However, thisprocedure uses the official Posix interface, so it is more portable than simply using a constant string.
@c 
@c @subsection Pseudo-terminals
@c 
@c Scsh implements an interface to Berkeley-style pseudo-terminals.
@c (fork-pty-session thunk) -! [process pty-in pty-out tty-name] procedure
@c 
@c This procedure gives a convenient high-level interface to pseudo-terminals. It first allocates a pty/tty pair of devices, and then forks a
@c 
@c child to execute procedure thunk. In the child process
@c 
@c * Stdio and the current I/O ports are bound to the terminal device.*
@c 
@c The child is placed in its own, new session (see become-sessionleader).*
@c 
@c The terminal device becomes the new session's controlling terminal(see
@c 
@c open-control-tty).*
@c 
@c The (error-output-port) is unbuffered.
@c 
@c 87
@c 
@c The fork-pty-session procedure returns four values: the child's processobject, two ports open on the controlling pty device, and the name of the
@c child's corresponding terminal device.
@c (open-pty) -! pty-inport tty-name procedure
@c 
@c This procedure finds a free pty/tty pair, and opens the pty device withread/write access. It returns a port on the pty, and the name of the corresponding terminal device.
@c The port returned is an input port--Scheme doesn't allow input/outputports. However, you can easily use
@c 
@c (dup->outport pty-inport) to pro-duce a matching output port. You may wish to turn off I/O buffering for
@c 
@c this output port.
@c (pty-name->tty-name pty-name) -! tty-name procedure
@c (tty-name->pty-name tty-name) -! pty-name procedure
@c 
@c These two procedures map between corresponding terminal and pty con-troller names. For example,
@c 
@c (pty-name->tty-name "/dev/ptyq3") =) "/dev/ttyq3"
@c (tty-name->pty-name "/dev/ttyrc") =) "/dev/ptyrc"
@c 
@c Remark: This is rather Berkeley-specific. SVR4 ptys are rare enoughthat I've no real idea if it generalises across the Unix gap. Experts are
@c invited to advise. Users feel free to not worry--the predominance ofcurrent popular Unix systems use Berkeley ptys.
@c 
@c (make-pty-generator) -! procedure procedure
@c 
@c This procedure returns a generator of candidate pty names. Each time thereturned procedure is called, it produces a new candidate. Software that
@c 
@c wishes to search through the set of available ptys can use a pty generatorto iterate over them. After producing all the possible ptys, a generator
@c returns #f every time it is called. Example:
@c 
@c (define pg (make-pty-generator))
@c (pg) =) "/dev/ptyp0"
@c (pg) =) "/dev/ptyp1"
@c 
@c ...
@c 
@c (pg) =) "/dev/ptyqe"
@c (pg) =) "/dev/ptyqf" (Last one)
@c (pg) =) #f
@c (pg) =) #f
@c 
@c ...
@c 
@c 88
@c 
@c Scsh C Typical char
@c 
@c @acronym{POSIX}
@c ttychar/delete-char ERASE del
@c ttychar/delete-line KILL ^U
@c ttychar/eof EOF ^D
@c ttychar/eol EOL
@c ttychar/interrupt INTR ^C
@c ttychar/quit QUIT ^\
@c ttychar/suspend SUSP ^Z
@c ttychar/start START ^Q
@c ttychar/stop STOP ^S
@c 
@c SVR4 and 4.3+BSD
@c ttychar/delayed-suspend DSUSP ^Y
@c ttychar/delete-word WERASE ^W
@c ttychar/discard DISCARD ^O
@c ttychar/eol2 EOL2
@c ttychar/literal-next LNEXT ^V
@c ttychar/reprint REPRINT ^R
@c 
@c 4.3+BSD
@c ttychar/status STATUS ^T
@c 
@c Table 3.4: Indices into the tty-info record's control-chars string, and the char-acter traditionally found at each index. Only the indices for the P
@c 
@c OSIX entriesare guaranteed to be non#f.
@c 
@c 89
@c 
@c Scsh C Meaning
@c 
@c @acronym{POSIX}
@c ttyin/check-parity INPCK Check parity.
@c ttyin/ignore-bad-parity-chars IGNPAR Ignore chars with parity errors.
@c ttyin/mark-parity-errors PARMRK Insert chars to mark parity errors.
@c ttyin/ignore-break IGNBRK Ignore breaks.
@c ttyin/interrupt-on-break BRKINT Signal on breaks.
@c ttyin/7bits ISTRIP Strip char to seven bits.
@c ttyin/cr->nl ICRNL Map carriage-return to newline.
@c ttyin/ignore-cr IGNCR Ignore carriage-returns.
@c ttyin/nl->cr INLCR Map newline to carriage-return.
@c ttyin/input-flow-ctl IXOFF Enable input flow control.
@c ttyin/output-flow-ctl IXON Enable output flow control.
@c 
@c SVR4 and 4.3+BSD
@c ttyin/xon-any IXANY Any char restarts after stop.
@c ttyin/beep-on-overflow IMAXBEL Ring bell when queue full.
@c 
@c SVR4
@c ttyin/lowercase IUCLC Map upper case to lower case.
@c 
@c Table 3.5: Input-flags. These are the named flags for the tty-info record'sinput-flags field. These flags generally control the processing of input chars.
@c Only the @acronym{POSIX} entries are guaranteed to be non-#f.
@c 
@c Scsh C Meaning
@c 
@c @acronym{POSIX}
@c ttyout/enable OPOST Enable output processing.
@c 
@c SVR4 and 4.3+BSD
@c ttyout/nl->crnl ONLCR Map nl to cr-nl.
@c 
@c 4.3+BSD
@c ttyout/discard-eot ONOEOT Discard EOT chars.
@c ttyout/expand-tabs OXTABS7 Expand tabs.
@c 
@c SVR4
@c ttyout/cr->nl OCRNL Map cr to nl.
@c ttyout/nl-does-cr ONLRET Nl performs cr as well.
@c ttyout/no-col0-cr ONOCR No cr output in column 0.
@c ttyout/delay-w/fill-char OFILL Send fill char to delay.
@c ttyout/fill-w/del OFDEL Fill char is ASCII DEL.
@c ttyout/uppercase OLCUC Map lower to upper case.
@c 
@c Table 3.6: Output-flags. These are the named flags for the tty-info record'soutput-flags field. These flags generally control the processing of output chars.
@c Only the @acronym{POSIX} entries are guaranteed to be non-#f.
@c 
@c 90
@c 
@c Value CommentBackspace delay
@c ttyout/bs-delay Bit-field mask
@c 
@c ttyout/bs-delay0
@c ttyout/bs-delay1Carriage-return delay
@c ttyout/cr-delay Bit-field mask
@c 
@c ttyout/cr-delay0
@c ttyout/cr-delay1
@c ttyout/cr-delay2
@c ttyout/cr-delay3Form-feed delay
@c ttyout/ff-delay Bit-field mask
@c 
@c ttyout/ff-delay0
@c ttyout/ff-delay1Horizontal-tab delay
@c ttyout/tab-delay Bit-field mask
@c 
@c ttyout/tab-delay0
@c ttyout/tab-delay1
@c ttyout/tab-delay2
@c ttyout/tab-delayx Expand tabsNewline delay
@c ttyout/nl-delay Bit-field mask
@c 
@c ttyout/nl-delay0
@c ttyout/nl-delay1Vertical tab delay
@c ttyout/vtab-delay Bit-field mask
@c 
@c ttyout/vtab-delay0
@c ttyout/vtab-delay1All
@c ttyout/all-delay Total bit-field mask
@c 
@c Table 3.7: Delay constants. These are the named flags for the tty-info record'soutput-flags field. These flags control the output delays associated with printing special characters. They are non-@acronym{POSIX}, and have non-#f values only on SVR4systems.
@c 
@c 91
@c 
@c Scsh C Meaning
@c 
@c @acronym{POSIX}
@c ttyc/char-size CSIZE Character size mask
@c ttyc/char-size5 CS5 5 bits
@c ttyc/char-size6 CS6 6 bits
@c ttyc/char-size7 CS7 7 bits
@c ttyc/char-size8 CS8 8 bits
@c ttyc/enable-parity PARENB Generate and detect parity.
@c ttyc/odd-parity PARODD Odd parity.
@c ttyc/enable-read CREAD Enable reception of chars.
@c ttyc/hup-on-close HUPCL Hang up on last close.
@c ttyc/no-modem-sync LOCAL Ignore modem lines.
@c ttyc/2-stop-bits CSTOPB Send two stop bits.
@c 
@c 4.3+BSD
@c ttyc/ignore-flags CIGNORE Ignore control flags.
@c ttyc/CTS-output-flow-ctl CCTS_OFLOW CTS flow control of output
@c ttyc/RTS-input-flow-ctl CRTS_IFLOW RTS flow control of input
@c ttyc/carrier-flow-ctl MDMBUF
@c 
@c Table 3.8: Control-flags. These are the named flags for the tty-info record'scontrol-flags field. These flags generally control the details of the terminal's
@c serial line. Only the @acronym{POSIX} entries are guaranteed to be non-#f.
@c 
@c 92
@c 
@c Scsh C Meaning
@c 
@c @acronym{POSIX}
@c ttyl/canonical ICANON Canonical input processing.
@c ttyl/echo ECHO Enable echoing.
@c ttyl/echo-delete-line ECHOK Echo newline after line kill.
@c ttyl/echo-nl ECHONL Echo newline even if echo is off.
@c ttyl/visual-delete ECHOE Visually erase chars.
@c ttyl/enable-signals ISIG Enable ^C, ^Z signalling.
@c ttyl/extended IEXTEN Enable extensions.
@c ttyl/no-flush-on-interrupt NOFLSH Don't flush after interrupt.
@c ttyl/ttou-signal ITOSTOP SIGTTOU on background output.
@c 
@c SVR4 and 4.3+BSD
@c ttyl/echo-ctl ECHOCTL Echo control chars as "^X".
@c ttyl/flush-output FLUSHO Output is being flushed.
@c ttyl/hardcopy-delete ECHOPRT Visual erase for hardcopy.
@c ttyl/reprint-unread-chars PENDIN Retype pending input.
@c ttyl/visual-delete-line ECHOKE Visually erase a line-kill.
@c 
@c 4.3+BSD
@c ttyl/alt-delete-word ALTWERASE Alternate word erase algorithm
@c ttyl/no-kernel-status NOKERNINFO No kernel status on ^T.
@c 
@c SVR4
@c ttyl/case-map XCASE Canonical case presentation
@c 
@c Table 3.9: Local-flags. These are the named flags for the tty-info record'slocal-flags field. These flags generally control the details of the line-editting
@c user interface. Only the @acronym{POSIX} entries are guaranteed to be non-#f.

@node Networking
@chapter Networking
 
@c The Scheme Shell provides a BSD-style sockets interface. There is not an of-ficial standard for a network interface for scsh to adopt (this is the subject of
@c the forthcoming Posix.8 standard). However, Berkeley sockets are a de factostandard, being found on most Unix workstations and PC operating systems.
@c 
@c It is fairly straightforward to add higher-level network protocols such assmtp, telnet, or http on top of the the basic socket-level support scsh provides.
@c The Scheme Underground has also released a network library with many ofthese protocols as a companion to the current release of scsh. See this code for
@c examples showing the use of the sockets interface.
@c 
@section High-level interface
@c 
@c For convenience, and to avoid some of the messy details of the socket interface,we provide a high level socket interface. These routines attempt to make it easy
@c to write simple clients and servers without having to think of many of the de-tails of initiating socket connections. We welcome suggested improvements to
@c this interface, including better names, which right now are solely descriptionsof the procedure's action. This might be fine for people who already understand sockets, but does not help the new networking programmer.
@c (socket-connect protocol-family socket-type . args) -! socket procedure
@c 
@c socket-connect is intended for creating client applications.protocol-family is specified as either the
@c 
@c protocol-family/internetor
@c protocol-family/unix. socket-type is specified as either
@c socket-type/stream or socket-type/datagram. See socket for amore complete description of these terms.
@c 
@c 94
@c 
@c The variable args list is meant to specify protocol family specific informa-tion. For Internet sockets, this consists of two arguments: a host name
@c and a port number. For Unix sockets, this consists of a pathname.
@c socket-connect returns a socket which can be used for input and out-put from a remote server. See
@c 
@c socket for a description of the socket record.
@c 
@c (bind-listen-accept-loop protocol-family proc arg) -! does-not-return procedure
@c 
@c bind-listen-accept-loop is intended for creating server applications.protocol-family is specified as either the
@c 
@c protocol-family/internet or
@c protocol-family/unix. proc is a procedure of two arguments: a socketand a socket-address. arg specifies a port number for Internet sockets or a
@c 
@c pathname for Unix sockets. See socket for a more complete descriptionof these terms.
@c 
@c proc is called with a socket and a socket address each time there is a con-nection from a client application. The socket allows communications
@c with the client. The socket address specifies the address of the remoteclient.
@c 
@c This procedure does not return, but loops indefinitely accepting connec-tions from client programs.
@c 
@c (bind-prepare-listen-accept-loop protocol-family prepare proc arg) -! does-not-return procedure
@c 
@c Same as bind-listen-accept-loop but runs the thunk prepare after bind-ing the address and before entering the loop. The typical task of the
@c 
@c prepare procedure is to change the user id from the superuser to someunprivileged id once the address has been bound.
@c 
@section Sockets
@c 
@c (create-socket protocol-family type [protocol]) -! socket procedure
@c (create-socket-pair type) -! [socket1 socket2] procedure
@c (close-socket socket) -! undefined procedure
@c 
@c A socket is one end of a network connection. Three specific propertiesof sockets are specified at creation time: the protocol-family, type, and
@c 
@c protocol.
@c The protocol-family specifies the protocol family to be used with thesocket. This also determines the address family of socket addresses,
@c 
@c which are described in more detail below. Scsh currently supports theUnix internal protocols and the Internet protocols using the following
@c constants:
@c 
@c 95
@c 
@c protocol-family/unspecified
@c protocol-family/unix
@c protocol-family/internet
@c 
@c The type specifies the style of communication. Examples that your oper-ating system probably provides are stream and datagram sockets. Others
@c maybe available depending on your system. Typical values are:
@c 
@c socket-type/stream
@c socket-type/datagram
@c socket-type/raw
@c 
@c The protocol specifies a particular protocol to use within a protocol familyand type. Usually only one choice exists, but it's probably safest to set this
@c explicitly. See the protocol database routines for information on lookingup protocol constants.
@c 
@c New sockets are typically created with create-socket. However,
@c create-socket-pair can also be used to create a pair of connected sock-ets in the
@c 
@c protocol-family/unix protocol-family. The value of a re-turned socket is a socket record, defined to have the following structure:
@c 
@c (define-record socket
@c 
@c family ; protocol family
@c inport ; input-port
@c outport) ; output-port
@c 
@c The family specifies the protocol family of the socket. The inport and
@c outport fields are ports that can be used for input and output, respec-tively. For a stream socket, they are only usable after a connection has
@c 
@c been established via connect-socket or accept-connection. For a data-gram socket, outport can be immediately using
@c 
@c send-message, and inportcan be used after
@c bind has created a local address.
@c 
@c close-socket provides a convenient way to close a socket's port. It ispreferred to explicitly closing the inport and outport because using
@c 
@c closeon sockets is not currently portable across operating systems.
@c 
@c (port->socket port protocol-family) -! socket procedure
@c 
@c This procedure turns port into a socket object. The port's underly-ing file descriptor must be a socket with protocol family protocol-family.
@c 
@c port->socket applies dup->inport and dup->outport to port to createthe ports of the socket object.
@c 
@c port->socket comes in handy for writing servers which run as childrenof
@c 
@c inetd: after receiving a connection inetd creates a socket and passesit as standard input to its child.
@c 
@c 96
@c 
@section Socket addresses
@c 
@c The format of a socket-address depends on the address family of the socket.Address-family-specific routines are provided to convert protocol-specific addresses to socket addresses. The value returned by these routines is a socket-address record, defined to have the following visible structure:
@c 
@c (define-record socket-address
@c 
@c family) ; address family
@c 
@c The family is one of the following constants:
@c 
@c address-family/unspecified
@c address-family/unix
@c address-family/internet
@c 
@c (unix-address->socket-address pathname) -! socket-address procedure
@c 
@c unix-address->socket-address returns a socket-address based on thestring pathname. There is a system dependent limit on the length of
@c 
@c pathname.
@c (internet-address->socket-address host-address service-port) -! socket-address procedure
@c 
@c internet-address->socket-address returns a socket-address based onan integer host-address and an integer service-port. Besides being a 32-bit
@c 
@c host address, an Internet host address can also be one of the followingconstants:
@c 
@c internet-address/any
@c internet-address/loopback
@c internet-address/broadcast
@c 
@c The use of internet-address/any is described below in bind-socket.
@c internet-address/loopback is an address that always specifies the localmachine.
@c 
@c internet-address/broadcast is used for network broadcastcommunications.
@c 
@c For information on obtaining a host's address, see the host-info func-tion.
@c 
@c (socket-address->unix-address socket-address) -! pathname procedure
@c (socket-address->internet-address socket-address) -! [host-address service-port] procedure
@c 
@c The routines socket-address->internet-address and
@c socket-address->unix-address return the address-family-specificaddresses. Be aware that most implementations don't correctly return anything more than an empty string for addresses in the Unixaddress-family.
@c 
@c 97
@c 
@section Socket primitives
@c 
@c The procedures in this section are presented in the order in which a typicalprogram will use them. Consult a text on network systems programming for
@c more information on sockets.1 The last two tutorials are freely available as partof BSD. In the absence of these, your Unix manual pages for socket might be a
@c good starting point for information.
@c (connect-socket socket socket-address) -! undefined procedure
@c 
@c connect-socket sets up a connection from a socket to a remotesocket-address. A connection has different meanings depending on the
@c 
@c socket type. A stream socket must be connected before use. A datagramsocket can be connected multiple times, but need not be connected at all
@c if the remote address is specified with each send-message, described be-low. Also, datagram sockets may be disassociated from a remote address
@c by connecting to a null remote address.
@c (connect-socket-no-wait socket socket-address) -! boolean procedure
@c (connect-socket-successful? socket) -! boolean procedure
@c 
@c Just like connect-socket, connect-socket-no-wait sets up a connec-tion from a socket to a remote socket-address. Unlike
@c 
@c connect-socket,
@c connect-socket-no-wait does not block if it cannot establish the con-nection immediately. Instead it will return
@c 
@c #f at once. In this case a sub-sequent
@c select on the output port of the socket will report the outputport as ready as soon as the operation system has established the connection or as soon as setting up the connection led to an error. Afterwards,the procedure
@c 
@c connect-socket-successful? can be used to test whetherthe connection has been established successfully or not.
@c 
@c (bind-socket socket socket-address) -! undefined procedure
@c 
@c bind-socket assigns a certain local socket-address to a socket. Binding asocket reserves the local address. To receive connections after binding
@c 
@c the socket, use listen-socket for stream sockets and receive-messagefor datagram sockets.
@c 
@c Binding an Internet socket with a host address of internet-address/anyindicates that the caller does not care to specify from which local network
@c 1 Some recommended ones are:
@c 
@c * "Unix Network Programming" by W. Richard Stevens*
@c 
@c "An Introductory 4.3BSD Interprocess Communication Tutorial." (reprinted in UNIX Pro-grammer's Supplementary Documents Volume 1, PS1:7)
@c 
@c * "An Advanced 4.3BSD Interprocess Communication Tutorial." (reprinted in UNIX Pro-grammer's Supplementary Documents Volume 1, PS1:8)
@c 
@c 98
@c 
@c interface connections are received. Binding an Internet socket with a ser-vice port number of zero indicates that the caller has no preference as to
@c the port number assigned.
@c Binding a socket in the Unix address family creates a socket special filein the file system that must be deleted before the address can be reused.
@c 
@c See delete-file.
@c (listen-socket socket backlog) -! undefined procedure
@c 
@c listen-socket allows a stream socket to start receiving connections, al-lowing a queue of up to backlog connection requests. Queued connections
@c 
@c may be accepted by accept-connection.
@c (accept-connection socket) -! [new-socket socket-address] procedure
@c 
@c accept-connection receives a connection on a socket, returning a newsocket that can be used for this connection and the remote socket address
@c 
@c associated with the connection.
@c (socket-local-address socket) -! socket-address procedure
@c (socket-remote-address socket) -! socket-address procedure
@c 
@c Sockets can be associated with a local address or a remote addressor both.
@c 
@c socket-local-address returns the local socket-address recordassociated with socket.
@c 
@c socket-remote-address returns the remotesocket-address record associated with socket.
@c 
@c (shutdown-socket socket how-to) -! undefined procedure
@c 
@c shutdown-socket shuts down part of a full-duplex socket. The methodof shutting done is specified by the how-to argument, one of:
@c 
@c shutdown/receives
@c shutdown/sends
@c shutdown/sends+receives
@c 
@section Performing input and output on sockets
@c 
@c (receive-message socket length [flags]) -! [string-or-#f socket-address] procedure
@c (receive-message! socket string [start] [end] [flags]) -! [count-or-#f socket-address] procedure
@c (receive-message/partial socket length [flags]) -! [string-or-#f socket-address] procedure
@c (receive-message!/partial socket string [start] [end] [flags]) -! [count-or-#f socket-address] procedure
@c 
@c (send-message socket string [start] [end] [flags] [socket-address]) -! undefined procedure
@c (send-message/partial socket string [start] [end] [flags] [socket-address]) -! count procedure
@c 
@c For most uses, standard input and output routines such as read-stringand
@c 
@c write-string should suffice. However, in some cases an extended
@c 
@c 99
@c 
@c interface is required. The receive-message and send-message calls par-allel the
@c 
@c read-string and write-string calls with a similar namingscheme.
@c 
@c One additional feature of these routines is that receive-message re-turns the remote socket-address and send-message takes an optional remote
@c socket-address. This allows a program to know the source of inputfrom a datagram socket and to use a datagram socket for output without
@c first connecting it.
@c All of these procedures take an optional flags field. This argument is aninteger bit-mask, composed by or'ing together the following constants:
@c 
@c message/out-of-band
@c message/peek
@c message/dont-route
@c 
@c See read-string and write-string for a more detailed description ofthe arguments and return values.
@c 
@section Socket options
@c 
@c (socket-option socket level option) -! value procedure
@c (set-socket-option socket level option value) -! undefined procedure
@c 
@c socket-option and set-socket-option allow the inspection and mod-ification, respectively, of several options available on sockets. The level
@c 
@c argument specifies what protocol level is to be examined or affected. Alevel of
@c 
@c level/socket specifies the highest possible level that is avail-able on all socket types. A specific protocol number can also be used as
@c 
@c provided by protocol-info, described below.
@c There are several different classes of socket options. The first class con-sists of boolean options which can be either true or false. Examples of
@c 
@c this option type are:
@c 
@c socket/debug
@c socket/accept-connect
@c socket/reuse-address
@c socket/keep-alive
@c socket/dont-route
@c socket/broadcast
@c socket/use-loop-back
@c socket/oob-inline
@c socket/use-privileged
@c socket/cant-signal
@c tcp/no-delay
@c 
@c 100
@c 
@c Value options are another category of socket options. Options of this typeare an integer value. Examples of this option type are:
@c 
@c socket/send-buffer
@c socket/receive-buffer
@c socket/send-low-water
@c socket/receive-low-water
@c socket/error
@c socket/type
@c ip/time-to-live
@c tcp/max-segment
@c 
@c A third option type specifies how long for data to linger after a socket hasbeen closed. There is only one option of this type:
@c 
@c socket/linger. It isset with either
@c #fto disable it or an integer number of seconds to lingerand returns a value of the same type upon inspection.
@c 
@c The fourth and final option type of this time is a timeout option.There are two examples of this option type:
@c 
@c socket/send-timeout and
@c socket/receive-timeout. These are set with a real number of microsec-onds resolution and returns a value of the same type upon inspection.
@c 
@section Database-information entries
@c 
@c (host-info name-or-socket-address) -! host-info procedure
@c (network-info name-or-socket-address) -! network-info or #f procedure
@c (service-info name-or-number [protocol-name]) -! service-info or #f procedure
@c (protocol-info name-or-number) -! protocol-info or #f procedure
@c 
@c host-info allows a program to look up a host entry based on either itsstring name or socket-address. The value returned by this routine is a hostinfo record, defined to have the following structure:
@c 
@c (define-record host-info
@c 
@c name ; Host name
@c aliases ; Alternative names
@c addresses) ; Host addresses
@c 
@c host-info could fail and raise an error for one of the following reasons:
@c 
@c herror/host-not-found
@c herror/try-again
@c herror/no-recovery
@c herror/no-data
@c herror/no-address
@c 
@c 101
@c 
@c network-info allows a program to look up a network entry based oneither its string name or socket-address. The value returned by this routine
@c is a network-info record, defined to have the following structure:
@c 
@c (define-record network-info
@c 
@c name ; Network name
@c aliases ; Alternative names
@c net) ; Network number
@c 
@c service-info allows a program to look up a service entry based on ei-ther its string name or integer port. The value returned by this routine is
@c a service-info record, defined to have the following structure:
@c 
@c (define-record service-info
@c 
@c name ; Service name
@c aliases ; Alternative names
@c port ; Port number
@c protocol) ; Protocol name
@c 
@c protocol-info allows a program to look up a protocol entry based on ei-ther its string name or integer number. The value returned by this routine
@c is a protocol-info record, defined to have the following structure:
@c 
@c (define-record protocol-info
@c 
@c name ; Protocol name
@c aliases ; Alternative names
@c number) ; Protocol number)
@c 
@c network-info, service-info and protocol-info return #fif the speci-fied entity was not found.
@c 
@c 102

@node Strings and characters
@chapter Strings and characters

@c Strings are the basic communication medium for Unix processes, so a Unix pro-gramming environment must have reasonable facilities for manipulating them.
@c Scsh provides a powerful set of procedures for processing strings and charac-ters. Besides the the facilities described in this chapter, scsh also provides
@c 
@c * Regular expressions (chapter 6)A complete regular-expression system.
@c 
@c * Field parsing, delimited record I/O and the awk loop (chapter 8)These procedures let you read in chunks of text delimited by selected
@c 
@c characters, and parse each record into fields based on regular expressions(for example, splitting a string at every occurrence of colon or whitespace). The awk form allows you to loop over streams of these recordsin a convenient way.
@c 
@c * The SRFI-13 string librariesThis pair of libraries contains procedures that create, fold, iterate
@c 
@c over, search, compare, assemble, cut, hash, case-map, and other-wise manipulate strings. They are provided by the
@c 
@c string-lib and
@c string-lib-internals packages, and are also available in the default
@c scsh package.
@c 
@c More documentation on these procedures can be found at URLs
@c 
@c http://srfi.schemers.org/srfi-13/srfi-13.html
@c http://srfi.schemers.org/srfi-13/srfi-13.txt
@c 
@c * The SRFI-14 character-set libraryThis library provides a set-of-characters abstraction, which is frequently
@c 
@c useful when searching, parsing, filtering or otherwise operating on
@c 
@c 103
@c 
@c strings and character data. The SRFI is provided by the char-set-libpackage; it's bindings are also available in the default
@c 
@c scsh package.
@c 
@c More documentation on this library can be found at URLs
@c 
@c http://srfi.schemers.org/srfi-14/srfi-14.html
@c http://srfi.schemers.org/srfi-14/srfi-14.txt
@c 
@section Manipulating file names
@c 
@c These procedures do not access the file-system at all; they merely operate onfile-name strings. Much of this structure is patterned after the gnu emacs design. Perhaps a more sophisticated system would be better, something likethe pathname abstractions of COMMON LISP or MIT Scheme. However, beingUnix-specific, we can be a little less general.
@c 
@c @subsection Terminology
@c 
@c These procedures carefully adhere to the @acronym{POSIX} standard for file-name reso-lution, which occasionally entails some slightly odd things. This section will
@c describe these rules, and give some basic terminology.
@c 
@c A file-name is either the file-system root ("/"), or a series of slash-terminateddirectory components, followed by a a file component. Root is the only filename that may end in slash. Some examples:
@c 
@c File name Dir components File component
@c src/des/main.c ("src" "des") "main.c"
@c /src/des/main.c ("" "src" "des") "main.c"
@c main.c () "main.c"
@c 
@c Note that the relative filename src/des/main.c and the absolute filename
@c /src/des/main.c are distinguished by the presence of the root component ""in the absolute path.
@c 
@c Multiple embedded slashes within a path have the same meaning as a sin-gle slash. More than two leading slashes at the beginning of a path have the
@c same meaning as a single leading slash--they indicate that the file-name is anabsolute one, with the path leading from root. However, P
@c 
@c OSIX permits the OSto give special meaning to two leading slashes. For this reason, the routines in
@c 
@c this section do not simplify two leading slashes to a single slash.
@c 
@c A file-name in directory form is either a file-name terminated by a slash, e.g.,"
@c /src/des/", or the empty string, "". The empty string corresponds to the cur-rent working directory, whose file-name is dot ("
@c 
@c ."). Working backwards fromthe append-a-slash rule, we extend the syntax of P
@c 
@c OSIX file-names to define the
@c 
@c 104
@c 
@c empty string to be a file-name form of the root directory "/". (However, "/" isalso acceptable as a file-name form for root.) So the empty string has two interpretations: as a file-name form, it is the file-system root; as a directory form,it is the current working directory. Slash is also an ambiguous form:
@c 
@c / is botha directory-form and a file-name form.
@c 
@c The directory form of a file-name is very rarely used. Almost allof the procedures in scsh name directories by giving their file-name
@c form (without the trailing slash), not their directory form. So, you say"
@c 
@c /usr/include", and ".", not "/usr/include/" and "". The sole exceptionsare
@c 
@c file-name-as-directory and directory-as-file-name, whose jobs areto convert back-and-forth between these forms, and
@c 
@c file-name-directory,whose job it is to split out the directory portion of a file-name. However, most
@c 
@c procedures that expect a directory argument will coerce a file-name in direc-tory form to file-name form if it does not have a trailing slash. Bear in mind
@c that the ambiguous case, empty string, will be interpreted in file-name form,i.e., as root.
@c 
@c @subsection Procedures
@c 
@c (file-name-directory? fname) -! boolean procedure
@c (file-name-non-directory? fname) -! boolean procedure
@c 
@c These predicates return true if the string is in directory form, or file-nameform (see the above discussion of these two forms). Note that they both
@c 
@c return true on the ambiguous case of empty string, which is both a direc-tory (current working directory), and a file name (the file-system root).
@c 
@c File name ...-directory? ...-non-directory?
@c "src/des" #f #t
@c "src/des/" #t #f
@c "/" #t #f
@c "." #f #t
@c "" #t #t
@c 
@c (file-name-as-directory fname) -! string procedure
@c 
@c Convert a file-name to directory form. Basically, add a trailing slash ifneeded:
@c 
@c (file-name-as-directory "src/des") =) "src/des/"
@c (file-name-as-directory "src/des/") =) "src/des/"
@c 
@c ., /, and "" are special:
@c (file-name-as-directory ".") =) ""
@c (file-name-as-directory "/") =) "/"
@c (file-name-as-directory "") =) "/"
@c 
@c 105
@c 
@c (directory-as-file-name fname) -! string procedure
@c 
@c Convert a directory to a simple file-name. Basically, kill a trailing slash ifone is present:
@c 
@c (directory-as-file-name "foo/bar/") =) "foo/bar"
@c / and "" are special:
@c (directory-as-file-name "/") =) "/"
@c (directory-as-file-name "") =) "." (i.e., the cwd)
@c 
@c (file-name-absolute? fname) -! boolean procedure
@c 
@c Does fname begin with a root or ~ component? (Recognising ~ as a home-directory specification is an extension of P
@c 
@c OSIX rules.)
@c 
@c (file-name-absolute? "/usr/shivers") =) #t
@c (file-name-absolute? "src/des") =) #f
@c (file-name-absolute? "~/src/des") =) #t
@c 
@c Non-obvious case:
@c (file-name-absolute? "") =) #t (i.e., root)
@c 
@c (file-name-directory fname) -! string or false procedure
@c 
@c Return the directory component of fname in directory form. If the file-name is already in directory form, return it as-is.
@c 
@c (file-name-directory "/usr/bdc") =) "/usr/"
@c (file-name-directory "/usr/bdc/") =) "/usr/bdc/"
@c (file-name-directory "bdc/.login") =) "bdc/"
@c (file-name-directory "main.c") =) ""
@c 
@c Root has no directory component:
@c (file-name-directory "/") =) ""
@c (file-name-directory "") =) ""
@c 
@c (file-name-nondirectory fname) -! string procedure
@c 
@c Return non-directory component of fname.
@c 
@c 106
@c 
@c (file-name-nondirectory "/usr/ian") =) "ian"
@c (file-name-nondirectory "/usr/ian/") =) ""
@c (file-name-nondirectory "ian/.login") =) ".login"
@c (file-name-nondirectory "main.c") =) "main.c"
@c (file-name-nondirectory "") =) ""
@c (file-name-nondirectory "/") =) "/"
@c 
@c (split-file-name fname) -! string list procedure
@c 
@c Split a file-name into its components.
@c 
@c (split-file-name "src/des/main.c")=)
@c 
@c ("src" "des" "main.c")
@c 
@c (split-file-name "/src/des/main.c")=)
@c 
@c ("" "src" "des" "main.c")
@c 
@c (split-file-name "main.c")=)
@c 
@c ("main.c")
@c 
@c (split-file-name "/")=)
@c 
@c ("")
@c 
@c (path-list->file-name path-list [dir]) -! string procedure
@c 
@c Inverse of split-file-name.
@c 
@c (path-list->file-name '("src" "des" "main.c"))=)
@c 
@c "src/des/main.c"
@c (path-list->file-name '("" "src" "des" "main.c"))=)
@c 
@c "/src/des/main.c"
@c 
@c Optional dir arg anchors relative path-lists:
@c (path-list->file-name '("src" "des" "main.c")
@c 
@c "/usr/shivers")=)
@c "/usr/shivers/src/des/main.c"
@c 
@c The optional dir argument is usefully (cwd).
@c 
@c (file-name-extension fname) -! string procedure
@c 
@c Return the file-name's extension.
@c 
@c (file-name-extension "main.c") =) ".c"
@c (file-name-extension "main.c.old") =) ".old"
@c (file-name-extension "/usr/shivers") =) ""
@c 
@c 107
@c 
@c Weird cases:
@c (file-name-extension "foo.") =) "."
@c (file-name-extension "foo..") =) "."
@c 
@c Dot files are not extensions:
@c (file-name-extension "/usr/shivers/.login") =) ""
@c 
@c (file-name-sans-extension fname) -! string procedure
@c 
@c Return everything but the extension.
@c 
@c (file-name-sans-extension "main.c") =) "main"
@c (file-name-sans-extension "main.c.old") =) "main.c""
@c (file-name-sans-extension "/usr/shivers")=)
@c 
@c "/usr/shivers"
@c 
@c Weird cases:
@c (file-name-sans-extension "foo.") =) "foo"
@c (file-name-sans-extension "foo..") =) "foo."
@c 
@c Dot files are not extensions:
@c (file-name-sans-extension "/usr/shivers/.login")=)
@c 
@c "/usr/shivers/.login
@c 
@c Note that appending the results of file-name-extension and filename-sans-extension in all cases produces the original file-name.
@c 
@c (parse-file-name fname) -! [dir name extension] procedure
@c 
@c Let f be (file-name-nondirectory fname). This function returns thethree values:
@c 
@c * (file-name-directory fname)*
@c 
@c (file-name-sans-extension f))*
@c (file-name-extension f)
@c 
@c The inverse of parse-file-name, in all cases, is string-append. Theboundary case of
@c 
@c / was chosen to preserve this inverse.
@c 
@c (replace-extension fname ext) -! string procedure
@c 
@c This procedure replaces fname's extension with ext. It is exactly equiva-lent to
@c 
@c (string-append (file-name-sans-extension fname) ext)
@c 
@c 108
@c 
@c (simplify-file-name fname) -! string procedure
@c 
@c Removes leading and internal occurrences of dot. A trailing dot is leftalone, as the parent could be a symlink. Removes internal and trailing
@c 
@c double-slashes. A leading double-slash is left alone, in accordance withP
@c 
@c OSIX. However, triple and more leading slashes are reduced to a singleslash, in accordance with P
@c 
@c OSIX. Double-dots (parent directory) are leftalone, in case they come after symlinks or appear in a
@c 
@c /../machine/..."super-root" form (which P
@c OSIX permits).
@c 
@c (resolve-file-name fname [dir]) -! string procedure*
@c 
@c Do ~ expansion.*
@c If dir is given, convert a relative file-name to an absolute file-name,relative to directory dir.
@c 
@c (expand-file-name fname [dir]) -! string procedure
@c 
@c Resolve and simplify the file-name.
@c 
@c (absolute-file-name fname [dir]) -! string procedure
@c 
@c Convert file-name fname into an absolute file name, relative to directorydir, which defaults to the current working directory. The file name is
@c 
@c simplified before being returned.
@c This procedure does not treat a leading tilde character specially.
@c 
@c (home-dir [user]) -! string procedure
@c 
@c home-dir returns user's home directory. User defaults to the current user.
@c 
@c (home-dir) =) "/user1/lecturer/shivers"
@c (home-dir "ctkwan") =) "/user0/research/ctkwan"
@c 
@c (home-file [user] fname) -! string procedure
@c 
@c Returns file-name fname relative to user's home directory; user defaults tothe current user.
@c 
@c (home-file "man") =) "/usr/shivers/man"
@c (home-file "fcmlau" "man") =) "/usr/fcmlau/man"
@c 
@c The general substitute-env-vars string procedure, defined in the previ-ous section, is also frequently useful for expanding file-names.
@c 
@c 109
@c 
@section Other string manipulation facilities
@c 
@c (substitute-env-vars fname) -! string procedure
@c 
@c Replace occurrences of environment variables with their values. An en-vironment variable is denoted by a dollar sign followed by alphanumeric
@c 
@c chars and underscores, or is surrounded by braces.
@c 
@c (substitute-env-vars "$USER/.login")=)
@c 
@c "shivers/.login"
@c (substitute-env-vars "${USER}_log") =) "shivers_log"
@c 
@section ASCII encoding
@c 
@c (char->ascii character) -! integer procedure
@c (ascii->char integer) -! character procedure
@c 
@c These are identical to char->integer and integer->char except thatthey use the A
@c 
@c SCII encoding.
@c 
@section Character predicates
@c 
@c (char-letter? character) -! boolean procedure
@c (char-lower-case? character) -! boolean procedure
@c (char-upper-case? character) -! boolean procedure
@c (char-title-case? character) -! boolean procedure
@c (char-digit? character) -! boolean procedure
@c (char-letter+digit? character) -! boolean procedure
@c (char-graphic? character) -! boolean procedure
@c (char-printing? character) -! boolean procedure
@c (char-whitespace? character) -! boolean procedure
@c (char-blank? character) -! boolean procedure
@c (char-iso-control? character) -! boolean procedure
@c (char-punctuation? character) -! boolean procedure
@c (char-hex-digit? character) -! boolean procedure
@c (char-ascii? character) -! boolean procedure
@c 
@c Each of these predicates tests for membership in one of the standard char-acter sets provided by the SRFI-14 character-set library. Additionally, the
@c 
@c following redundant bindings are provided for R5RS compatibility:
@c 
@c 110
@c 
@c R5RS name scsh definition
@c char-alphabetic? char-letter+digit?
@c char-numeric? char-digit?
@c char-alphanumeric? char-letter+digit?
@c 
@section Deprecated character-set procedures
@c 
@c The SRFI-13 character-set library grew out of an earlier library developed forscsh. However, the SRFI standardisation process introduced incompatibilities
@c with the original scsh bindings. The current version of scsh provides the library
@c obsolete-char-set-lib, which contains the old bindings found in previousreleases of scsh. The following table lists the members of this library, along
@c 
@c with the equivalent SRFI-13 binding. This obsolete library is deprecated andnot open by default in the standard
@c 
@c scsh environment; new code should usethe SRFI-13 bindings.
@c 
@c Old obsolete-char-set-lib SRFI-13 char-set-lib
@c char-set-members char-set->list
@c chars->char-set list->char-set
@c ascii-range->char-set ucs-range->char-set (not exact)
@c predicate->char-set char-set-filter (not exact)
@c char-set-every? char-set-every
@c char-set-any? char-set-any
@c 
@c char-set-invert char-set-complement
@c char-set-invert! char-set-complement!
@c 
@c char-set:alphabetic char-set:letter
@c char-set:numeric char-set:digit
@c char-set:alphanumeric char-set:letter+digit
@c char-set:control char-set:iso-control
@c 
@c Note also that the ->char-set procedure no longer handles a predicate argument.

@node Pattern-matching strings with regular expressions
@chapter Pattern-matching strings with regular expressions

@c Scsh provides a rich facility for matching regular-expression patterns in strings.The system is composed of several pieces:
@c 
@c * An s-expression notation for writing down general regular expressions.In most systems, regexp patterns are encoded as string literals, such as
@c 
@c "g(oo|ee)se". In scsh, they are written using s-expressions, such as (:
@c "g" (| "oo" "ee") "se"), and are called sre's. The sre notation has sev-eral advantages over the traditional string-based notation. It's more expressive, can be commented, and can be indented to expose the structureof the form.
@c 
@c * An abstract data type (ADT) representation for regexp values. Traditionalregular-expression systems compute regular expressions from run-time
@c 
@c values using strings. This can be awkward. Scsh, instead, provides aseparate data type for regexps, with a set of basic constructor and accessor functions; regular expressions can be dynamically computed andmanipulated using these functions.
@c 
@c * Some tools that work on the regexp ADT: case-sensitve to case-insensitiveregexp transform, a regexp simplifier, and so forth.
@c 
@c * Parsers and unparsers that can convert between external representationsand the regexp ADT. The supported external representations are
@c 
@c - Posix strings
@c - S-expression notation (that is, sre's)
@c 
@c 112
@c 
@c Being able to convert regexps to Posix strings allows implementations toimplement regexp matching using standard Posix C-based engines.
@c 
@c * Macro support for the s-expression notation. The rx macro provides anew special form that allows you to embed regexps in the s-expression
@c 
@c notation within a Scheme program. Evaluating the macro form producesa regexp ADT value which can be used by Scheme pattern-matching procedures and other regexp consumers.
@c 
@c * Pattern-matching and searching procedures. Spencer's Posix regexp en-gine is linked in to the runtime; the regexp code uses this engine to provide text matching.
@c 
@c The regexp language supported is a complete superset of Posix functional-ity, providing:
@c 
@c * sequencing and choice (|)
@c 
@c * repetition (*, +, ?, {m,n})
@c 
@c * character classes (e.g., [aeiou]) and wildcard (.)
@c 
@c * beginning/end of string anchors (^, $)
@c 
@c * case-sensitivity control
@c 
@c * submatch-marking
@c 
@section Summary SRE syntax
@c The following figures give a summary of the SRE syntax; the next section is afriendlier tutorial introduction.
@c 
@c 113
@c 
@c string Literal match--interpreted relative to the currentcase-sensitivity lexical context (default is casesensitive)
@c (string1 string2 ...) Set of chars, e.g., ("abc" "XYZ"). Interpretedrelative to the current case-sensitivity lexical
@c 
@c context.
@c (* sre ...) 0 or more matches
@c (+ sre ...) 1 or more matches
@c (? sre ...) 0 or 1 matches
@c (= n sre ...) n matches
@c (>= n sre ...) n or more matches
@c (** n m sre ...) n to m matchesN and m are Scheme expressions producing non-negative integers.
@c 
@c M may also be #f, meaning "infinity."
@c (| sre ...) Choice (or is R5RS symbol;
@c (or sre ...) | is not specified by R5RS.)
@c 
@c (: sre ...) Sequence (seq is legal
@c (seq sre ...) Common Lisp symbol)
@c 
@c (submatch sre ...) Numbered submatch
@c (dsm pre post sre ...) Deleted submatchesPre and post are numerals.
@c 
@c (uncase sre ...) Case-folded match
@c (w/case sre ...) Introduce a lexical case-sensitivity
@c (w/nocase sre ...) context.
@c 
@c ,@exp Dynamically computed regexp
@c ,exp Same as ,@exp, but no submatch infoExp must produce a character, string, char-set, or regexp.
@c 
@c bos eos Beginning/end of string
@c bol eol Beginning/end of line
@c 
@c Figure 6.1: SRE syntax summary (part 1)
@c 
@c 114
@c 
@c (posix-string string) Escape for Posix string notation
@c char Singleton char setclass-name alphanumeric, whitespace, etc.
@c 
@c These two forms are interpreted subject to the lexical case-sensitivitycontext.
@c 
@c (~ cset-sre ...) Complement-of-union ([^...])
@c (- cset-sre ...) Difference
@c (& cset-sre ...) Intersection
@c 
@c (/ range-spec ...) Character range--interpreted subject to the lexi-cal case-sensitivy context
@c 
@c Figure 6.2: SRE syntax summary (part 2)
@c 
@c class-name ::= any
@c 
@c | nonl
@c | lower-case | lower
@c | upper-case | upper
@c | alphabetic | alpha
@c | numeric | digit | num
@c | alphanumeric | alnum
@c | punctuation | punct
@c | graphic | graph
@c | whitespace | space | white
@c | printing | print
@c | control | cntrl
@c | hex-digit | xdigit | hex
@c | ascii
@c 
@c range-spec ::= string | charThe chars are taken in pairs to form inclusive ranges.
@c 
@c Figure 6.3: SRE character-class names and range specs.
@c 
@c 115
@c 
@c <cset-sre> ::= (~ <cset-sre> ...) Set complement-of-union
@c 
@c | (- <cset-sre> ...) Set difference
@c | (& <cset-sre> ...) Intersection
@c | (| <cset-sre> ...) Set union
@c | (/ <range-spec> ...) Range
@c 
@c | (<string>) Constant set
@c | <char> Singleton constant set
@c | <string> For 1-char string "c"
@c 
@c | <class-name> Constant set
@c | ,<exp> <exp> evals to a char-set,
@c | ,@<exp> char, single-char string,
@c 
@c or re-char-set regexp.
@c 
@c | (uncase <cset-sre>) Case-folding
@c | (w/case <cset-sre>)
@c | (w/nocase <cset-sre>)
@c 
@c Figure 6.4: applied to SRE's that specify character sets. These are the "type-checking" rules for character-set SRE's.
@c 
@c 116
@c 
@section Examples
@c 
@c (- alpha ("aeiouAEIOU")) ; Various forms of
@c (- alpha ("aeiou") ("AEIOU")) ; non-vowel letter
@c (w/nocase (- alpha ("aeiou")))
@c (- (/"azAZ") ("aeiouAEIOU"))
@c (w/nocase (- (/"az") ("aeiou")))
@c 
@c ;;; Upper-case letter, lower-case vowel, or digit
@c (| upper ("aeiou") digit)
@c (| (/"AZ09") ("aeiou"))
@c 
@c ;;; Not an SRE, but Scheme code containing some embedded SREs.
@c (let* ((ws (rx (+ whitespace))) ; Seq of whitespace
@c 
@c (date (rx (: (| "Jan" "Feb" "Mar" ...) ; A month/day date.
@c 
@c ,ws
@c (| ("123456789") ; 1-9
@c 
@c (: ("12") digit) ; 10-29
@c "30" "31"))))) ; 30-31
@c 
@c ;; Now we can use DATE several times:
@c (rx ... ,date ... (* ... ,date ...)
@c 
@c ... .... ,date))
@c 
@c ;;; More Scheme code
@c (define (csl re) ; A comma-separated list of RE's is
@c 
@c (rx (| "" ; either zero of them (empty string), or
@c 
@c (: ,re ; one RE, followed by
@c 
@c (* ", " ,re))))) ; Zero or more comma-space-RE matches.
@c 
@c (csl (rx (| "John" "Paul" "George" "Ringo")))
@c 
@section A short tutorial
@c 
@c S-expression regexps are called "SRE"s. Keep in mind that they are not Schemeexpressions; they are another, separate notation that is expressed using the underlying framework of s-expression list structure: lists, symbols, etc. SRE'scan be embedded inside of Scheme expressions using special forms that extend
@c Scheme's syntax (such as the rx macro); there are places in the SRE grammarwhere one may place a Scheme expression. In these ways, SRE's and Scheme
@c expressions can be intertwined. But this isn't fundamental; SRE's may be usedin a completely Scheme-independent context. By simply restricting the nota117
@c 
@c tion to eliminate two special Scheme-embedding forms, they can be a com-pletely independent notation.
@c Constant strings The simplest SRE is a string, denoting a constant regexp.For example, the SRE
@c 
@c "Spot"
@c matches only the string <<capital-S, little-p, little-o, little-t>>. There is no in-terpretation of the characters in the string at all--the SRE
@c 
@c ".*["
@c matches the string <<period, asterisk, open-bracket>>.
@c 
@c Simple character sets To specify a set of characters, write a list whose singleelement is a string containing the set's elements. So the SRE
@c 
@c ("aeiou")
@c only matches a vowel. One way to think of this, notationally, is that the setbrackets are
@c 
@c (" and ").
@c 
@c Wild card Another simple SRE is the symbol any, which matches any singlecharacter--including newline, but excluding ASCII NUL.
@c 
@c Sequences We can form sequences of SRE's with the SRE (: sre ...). So theSRE
@c 
@c (: "x" any "z")
@c matches any three-character string starting with "x" and ending with "z". Aswe'll see shortly, many SRE forms have bodies that are implicit sequences of
@c other SRE's, analogous to the manner in which the body of a Scheme lambdaor
@c 
@c let expression is an implicit begin sequence. The regexp (seq sre ...) iscompletely equivalent to
@c 
@c (: sre ...); it's included in order to have a syntaxthat doesn't require
@c : to be a legal symbol 1
@c 
@c 1That is, for use within s-expression syntax frameworks that, unlike R5RS, don't allow for : as
@c a legal symbol. A Common Lisp embedding of SREs, for example, would need to use seq insteadof
@c 
@c :.
@c 
@c 118
@c 
@c Choices The SRE (| sre ...) is a regexp that matches anything any of thesre regexps match. So the regular expression
@c 
@c (| "sasha" "Pete")
@c matches either the string "sasha" or the string "Pete". The regexp
@c 
@c (| ("aeiou") ("0123456789"))
@c is the same as
@c 
@c ("aeiou0123456789")
@c The regexp (or sre ...) is completely equivalent to (| sre ...); it's includedin order to have a syntax that doesn't require
@c 
@c | to be a legal symbol.
@c 
@c Repetition There are several SRE forms that match multiple occurences of aregular expression. For example, the SRE
@c 
@c (* sre ...) matches zero or moreoccurences of the sequence
@c (: sre ...). Here is the complete list of SRE repe-tition forms:
@c 
@c SRE means at least no more than
@c (* sre ...) zero-or-more 0 infinity
@c (+ sre ...) one-or-more 1 infinity
@c (? sre ...) zero-or-one 0 1
@c (= from sre ...) exactly-n from from
@c (>= from sre ...) n-or-more from infinity
@c (** from to sre ...) n-to-m from to
@c 
@c A from field is a Scheme expression that produces an integer. A to field is aScheme expression that produces either an integer, or false, meaning infinity.
@c 
@c While it is illegal for the from or to fields to be negative, it is allowed forfrom to be greater than to in a
@c 
@c ** form--this simply produces a regexp that willnever match anything.
@c 
@c As an example, we can describe the names of car/cdr access functions("car", "cdr", "cadr", "cdar", "caar" , "cddr", "caaadr", etc.) with either of
@c the SREs
@c 
@c (: "c" (+ (| "a" "d")) "r")
@c (: "c" (+ ("ad")) "r")
@c 
@c We can limit the a/d chains to 4 characters or less with the SRE
@c 
@c (: "c" (** 1 4 ("ad")) "r")
@c 
@c 119
@c 
@c Some boundary cases:
@c 
@c (** 5 2 "foo") ; Will never match
@c (** 0 0 "foo") ; Matches the empty string
@c 
@c Character classes There is a special set of SRE's that form "characterclasses"--basically, a regexp that matches one character from some specified
@c set of characters. There are operators to take the intersection, union, comple-ment, and difference of character classes to produce a new character class. (Except for union, these capabilities are not provided for general regexps as theyare computationally intractable in the general case.)
@c 
@c A single character is the simplest character class: #\x is a character classthat matches only the character "x". A string that has only one letter is also a
@c character class: "x" is the same SRE as #\x.
@c 
@c The character-set notation (string) we've seen is a primitive character class,as is the wildcard
@c 
@c any. When arguments to the choice operator, |, are all char-acter classes, then the choice form is itself a character-class. So these SREs are
@c 
@c all character-classes:
@c 
@c ("aeiou")
@c (| #\a #\e #\i #\o #\u)
@c (| ("aeiou") ("1234567890"))
@c 
@c However, these SRE's are not character-classes:
@c 
@c "aeiou"
@c (| "foo" #\x)
@c 
@c The (~ cset-sre ...) char class matches one character not in the specifiedclasses:
@c 
@c (~ ("0248") ("1359"))
@c matches any character that is not a digit.
@c 
@c More compactly, we can use the / operator to specify character sets by giv-ing the endpoints of contiguous ranges, where the endpoints are specified by a
@c 
@c sequence of strings and characters. For example, any of these char classes
@c 
@c (/ #\A #\Z #\a #\z #\0 #\9)
@c (/ "AZ" #\a #\z "09")
@c (/ "AZ" #\a "z09")
@c (/"AZaz09")
@c 
@c 120
@c 
@c matches a letter or a digit. The range endpoints are taken in pairs to forminclusive ranges of characters. Note that the exact set of characters included
@c in a range is dependent on the underlying implementation's character type, soranges may not be portable across different implementations.
@c 
@c There is a wide selection of predefined, named character classes that maybe used. One such SRE is the wildcard
@c 
@c any. nonl is a character class matchinganything but newline; it is equivalent to
@c 
@c (~ #\newline)
@c and is useful as a wildcard in line-oriented matching.
@c 
@c There are also predefined named char classes for the standard Posix andGnu character classes:
@c 
@c scsh name Posix/ctype Alternate name Comment
@c lower-case lower
@c upper-case upper
@c alphabetic alpha
@c numeric digit num
@c alphanumeric alnum alphanum
@c punctuation punct
@c graphic graph
@c blank (Gnu extension)
@c whitespace space white "space" is deprecated.
@c printing print
@c control cntrl
@c hex-digit xdigit hex
@c ascii (Gnu extension)
@c 
@c See the scsh character-set documentation or the Posix isalpha(3) man page forthe exact definitions of these sets.
@c 
@c You can use either the long scsh name or the shorter Posix and alternatenames to refer to these char classes. The standard Posix name "
@c 
@c space" is pro-vided, but deprecated, since it is ambiguous. It means "whitespace," the set
@c 
@c of whitespace characters, not the singleton set of the #\space character. If youwant a short name for the set of whitespace characters, use the char-class name
@c "white" instead.
@c 
@c Char classes may be intersected with the operator (& cset-sre ...), and set-difference can be performed with
@c 
@c (- cset-sre ...). These operators are partic-ularly useful when you want to specify a set by negation with respect to a limited
@c 
@c universe. For example, the set of all non-vowel letters is
@c 
@c (- alpha ("aeiou") ("AEIOU"))
@c whereas writing a simple complement
@c 
@c 121
@c 
@c (~ ("aeiouAEIOU"))
@c gives a char class that will match any non-vowel--including punctuation, dig-its, white space, control characters, and A
@c 
@c SCII nul.
@c 
@c We can compute a char class by writing the SRE
@c 
@c ,cset-exp
@c where cset-exp is a Scheme expression producing a value that can be coercedto a character set: a character set, character, one-character string, or char-class
@c regexp value. This regexp matches one character from the set.
@c 
@c The char-class SRE ,@cset-exp is entirely equivalent to ,cset-exp whencset-exp produces a character set (but see below for the more general non-charclass context, where there is a distinction between ,exp and ,@exp.
@c 
@c As an example of character-class SREs, an SRE that matches a lower-casevowel, upper-case letter, or digit is
@c 
@c (| ("aeiou") (/"AZ09"))
@c or, equivalently
@c 
@c (| ("aeiou") upper-case numeric)
@c Boundary cases: the empty-complement char class
@c 
@c (~)
@c matches any character; it is equivalent to any. The empty-union char class
@c 
@c (|)
@c never matches at all. This is rarely useful for human-written regexps, but maybe of occasional utility in machine-generated regexps, perhaps produced by
@c macros.
@c 
@c The rules for determining if an SRE is a simple, char-class SRE or a morecomplex SRE form a little "type system" for SRE's. See the summary section
@c 
@c preceding this one for a complete listing of these rules.{
@c 
@c Note There is no way to include the ASCII NUL character in a characterset or search for it in any other way using regular expression. This is because
@c 
@c the @acronym{POSIX} regexp facility is based on the C language which uses ASCII NULto terminate strings.}
@c 
@c 122
@c 
@c Case sensitivity There are three forms that control case sensitivity:
@c 
@c (uncase sre ...)
@c (w/case sre ...)
@c (w/nocase sre ...)
@c 
@c uncase is a regexp operator producing a regexp that matches any case per-mutation of any string that matches
@c 
@c (: sre ...). For example, the regexp
@c 
@c (uncase "foo")
@c matches the strings "foo", "foO", "fOo", "fOO", "Foo", . . .
@c 
@c Expressions in SRE notation are interpreted in a lexical case-sensitivy con-text. The forms
@c 
@c w/case and w/nocase are the scoping operators for this con-text, which controls how constant strings and char-class forms are interpreted
@c 
@c in their bodies. So, for example, the regexp
@c 
@c (w/nocase "abc"
@c 
@c (* "FOO" (w/case "Bar"))
@c ("aeiou"))
@c 
@c defines a case-insensitive match for all of its elements except for the sub-element "Bar", which must match exactly capital-B, little-a, little-r. The default,
@c the outermost, top-level context is case sensitive.
@c 
@c The lexical case-sensitivity context affects the interpretation of
@c 
@c * constant strings, such as "foo",
@c 
@c * chars, such as #\x,
@c 
@c * char sets, such as ("abc"), and
@c 
@c * ranges, such as (/"az") that appear within that context. It does not affectdynamically computed regexps--ones that are introduced by ,exp and
@c 
@c ,@exp forms. It does not affect named char-classes--presumably, if youwrote
@c 
@c lower, you didn't mean alpha.
@c 
@c uncase is not the same as w/nocase. To point up one distinction, considerthe two regexps
@c 
@c (uncase (~ "a"))
@c (w/nocase (~ "a"))
@c 
@c 123
@c 
@c The regexp (~ "a") matches any character except "a," which means it doesmatch "A." Now,
@c 
@c (uncase re) matches any case-permutation of a string that rematches.
@c (~ "a") matches "A," so (uncase (~ "a")) matches "A" and "a"--and, for that matter, every other character. So
@c 
@c (uncase (~ "a")) is equivalentto
@c any.
@c 
@c In contrast, (w/nocase (~ "a")) establishes a case-insensitive lexical con-text in which the
@c 
@c "a" is interpreted, making the SRE equivalent to (~ ("aA")).
@c 
@c Dynamic regexps SRE notation allows you to compute parts of a regular ex-pressions at run time. The SRE
@c 
@c ,exp
@c is a regexp whose body exp is a Scheme expression producing a string, charac-ter, char-set, or regexp as its value. Strings and characters are converted into
@c 
@c constant regexps; char-sets are converted into char-class regexps; and regexpvalues are substituted in place. So we can write regexps like this
@c 
@c (: "feeding the "
@c 
@c ,(if (> n 1) "geese" "goose"))
@c 
@c This is how you can drop computed strings, such as someone's name, or thedecimal numeral for a computed number, into a complex regexp.
@c 
@c If we have a large, complex regular expression that is used multiple times insome other, containing regular expression, we can name it, using the binding
@c forms of the embedding language (e.g., Scheme), and refer to it by name in thecontaining expression. For example, consider the Scheme expression
@c 
@c (let* ((ws (rx (+ whitespace))) ; Seq of whitespace
@c 
@c ;; Something like "Mar 14"
@c (date (rx (: (| "Jan" "Feb" "Mar" ...)
@c 
@c ,ws
@c (| ("123456789") ; 1-9
@c 
@c (: ("12") digit) ; 10-29
@c "30" ; 30
@c "31"))))) ; 31
@c ;; Now we can use DATE several times:
@c (rx ... ,date ... (* ... ,date ...)
@c 
@c ... ,date ...))
@c 
@c where the (rx sre ...) macro is the Scheme special form that produces aScheme regexp value given a body in SRE notation.
@c 
@c As we saw in the char-class section, if a dynamic regexp is used in a char-class context (e.g., as an argument to a
@c 
@c ~ operation), the expression must be
@c 
@c 124
@c 
@c coercable not merely to a general regexp, but to a character sre--so it must beeither a singleton string, a character, a scsh char set, or a char-class regexp.
@c 
@c We can also define and use functions on regexps in the host language.For example, consider the following Scheme expressions, containing embedded SRE's (inside the rx macro expressions) which in term contain embeddedScheme expressions computing dynamic regexps:
@c 
@c (define (csl re)
@c 
@c ;; A comma-separated list of RE's is either
@c (rx (| "" ; zero of them (empty string),
@c 
@c (: ,re ; or RE followed by
@c 
@c (* ", " ,re))))); zero or more comma-space-RE matches.
@c 
@c (rx ... ,date ...
@c 
@c ,(csl (rx (| "John" "Paul" "George" "Ringo")))
@c ...
@c ,(csl date)
@c ...)
@c 
@c We leave the extension of csl to allow for an optional "and" between the lasttwo matches as an exercise for the interested reader (e.g., to match "John, Paul,
@c George and Ringo").
@c 
@c Note, in passing, one of the nice features of SRE notation: they can be com-mented, and indented in a fashion to show the lexical extent of the subexpressions.
@c 
@c When we embed a computed regexp inside another regular expression withthe ,exp form, we must specify how to account for the submatches that may be
@c 
@c in the computed part. For example, suppose we have the regexp
@c 
@c (rx (submatch (* "foo"))
@c 
@c (submatch (? "bar"))
@c ,(f x)
@c (submatch "baz"))
@c 
@c It's clear that the submatch for the (* "foo") part of the regexp is submatch#1, and the
@c 
@c (? "bar") part is submatch #2. But what number submatch isthe
@c "baz" submatch? It's not clear. Suppose the Scheme expression (f x)produces a regular expression that itself has 3 subforms. Are these counted
@c 
@c (making the "baz" submatch #6), or not counted (making the "bar" submatch#3)?
@c 
@c SRE notation provides for both possibilities. The SRE
@c 
@c ,exp
@c 
@c 125
@c 
@c does not contribute its submatches to its containing regexp; it has zero sub-matches. So one can reliably assign submatch indices to forms appearing after
@c a ,exp form in a regexp.
@c 
@c On the other hand, the SRE
@c 
@c ,@exp
@c "splices" its resulting regexp into place, exposing its submatches to the con-taining regexp. This is useful if the computed regexp is defined to produce a
@c certain number of submatches--if that is part of exp's "contract."
@c 
@c String and line units The regexps bos and eos match the empty string at thebeginning and end of the string, respectively.
@c 
@c The regexps bol and eol match the empty string at the beginning and endof a line, respectively. A line begins at the beginning of the string, and just after
@c every newline character. A line ends at the end of the string, and just beforeevery newline character. The char class
@c 
@c nonl matches any character exceptnewline, and is useful in conjunction with line-based pattern matching.
@c 
@c {Note bol and eol are not supported by scsh's current regexp search en-gine, which is Spencer's Posix matcher. This is the only element of the notation
@c that is not supported by the current scsh reference implementation.}
@c 
@c Posix string notation The SRE (posix-string string), where string is astring literal (not a general Scheme expression), allows one to use Posix string
@c notation for a regexp. It's intended as backwards compatibility and is depre-cated. For example,
@c 
@c (posix-string "[aeiou]+|x*|y{3,5}") matches a stringof vowels, a possibly empty string of x's, or three to five y's.
@c 
@c Note that parentheses are used ambiguously in Posix notation--both forgrouping and submatch marking. The
@c 
@c (posix-string string) form makes theconservative assumption: all parentheses introduce submatches.
@c 
@c Deleted submatches Deleted submatches, or "DSM's," are a subtle featurethat are never required in expressions written by humans. They can be introduced by the simplifier when reducing regular expressions to simpler equiva-lents, and are included in the syntax to give it expressibility spanning the full
@c regexp ADT. They may appear when unparsing simplified regular expressionsthat have been run through the simplifier; otherwise you are not likely to see
@c them. Feel free to skip this section.
@c 
@c The regexp simplifier can sometimes eliminate entire sub-expressions froma regexp. For example, the regexp
@c 
@c 126
@c 
@c (: "foo" (** 0 0 "apple") "bar")
@c can be simplified to
@c 
@c "foobar"
@c since (** 0 0 "apple") will always match the empty string. The regexp
@c 
@c (| "foo"
@c 
@c (: "Richard" (|) "Nixon")
@c "bar")
@c 
@c can be simplified to
@c 
@c (| "foo" "bar")
@c The empty choice (|) can't match anything, so the whole
@c 
@c (: "Richard" (|) "Nixon")
@c sequence can't match, and we can remove it from the choice.
@c 
@c However, if deleting part of a regular expression removes a submatch form,any following submatch forms will have their numbering changed, which
@c 
@c would be an error. For example, if we simplify
@c 
@c (: (** 0 0 (submatch "apple"))
@c 
@c (submatch "bar"))
@c 
@c to
@c 
@c (submatch "bar")
@c then the "bar" submatch changes from submatch #2 to submatch #1--so thisis not a legal simplification.
@c 
@c When the simplifier deletes a sub-regexp that contains submatches, it in-troduces a special regexp form to account for the missing, deleted submatches,
@c thus keeping the submatch accounting correct.
@c 
@c (dsm pre post sre ...)
@c is a regexp that matches the sequence (: sre ...). pre and post are integerconstants. The DSM form introduces pre deleted submatches before the body,
@c and post deleted submatches after the body. If the body (: sre . . . ) itself hasbody-sm submatches, then the total number of submatches for the DSM form is
@c 
@c pre + body-sm + post.
@c 
@c 127
@c 
@c These extra, deleted submatches are never assigned string indices in any matchvalues produced when matching the regexp against a string.
@c 
@c As examples,
@c 
@c (| (: (submatch "Richard") (|) "Nixon")
@c 
@c (submatch "bar"))
@c 
@c can be simplified to
@c 
@c (dsm 1 0 (submatch "bar"))
@c The regexp
@c 
@c (: (** 0 0 (submatch "apple"))
@c 
@c (submatch "bar"))
@c 
@c can be simplified to
@c 
@c (dsm 1 0 (submatch "bar"))
@c 
@c @subsection Embedding regexps within Scheme programs
@c 
@c SRE's can be placed in a Scheme program using the (rx sre ...) Schemeform, which evaluates to a Scheme regexp value.
@c 
@c Static and dynamic regexps
@c We separate SRE expressions into two classes: static and dynamic expressions.A static expression is one that has no run-time dependencies; it is a complete,
@c self-contained description of a regular set. A dynamic expression is one thatrequires run-time computation to determine the particular regular set being
@c described. There are two places where one can embed run-time computationsin an SRE:
@c 
@c * The from or to repetition counts of **, =, and >= forms;
@c 
@c * ,exp and ,@exp forms.
@c 
@c A static SRE is one that does not contain any ,exp or ,@exp forms, and whose
@c **, =, and >= forms all contain constant repetition counts.
@c 
@c Scsh's rx macro is able, at macro-expansion time, to completely parse, sim-plify and translate any static SRE into the equivalent Posix string which is used
@c 
@c to drive the underlying C-based matching engine; there is no run-time over-head. Dynamic SRE's are partially simplified and then expanded into Scheme
@c code that constructs the regexp at run-time.
@c 
@c 128
@c 
@section Regexp functions
@c 
@c @subsection Obsolete, deprecated procedures
@c 
@c These two procedures are survivors from the previous, now-obsolete scsh reg-exp interface. Old code must open the
@c 
@c re-old-funs package to access them.They should not be used in new code.
@c 
@c (string-match posix-re-string string [start]) -! match or false procedure
@c (make-regexp posix-re-string) -! regexp procedure
@c 
@c These are old functions included for backwards compatibility with pre-vious releases. They are deprecated and will go away at some point in
@c 
@c the future.
@c Note that the new release has no "regexp compiling" procedure at all--regexp values are compiled for the matching engine on-demand, and the
@c 
@c necessary data structures are cached inside the ADT values.
@c 
@c @subsection Standard procedures and syntax
@c 
@c (rx sre . . . ) -! regexp Syntax
@c 
@c This allows you to describe a regexp value with SRE notation.
@c 
@c (regexp? x) -! boolean procedure
@c 
@c Returns true if the value is a regular expression.
@c 
@c (regexp-search re string [start flags]) -! match-data or false procedure
@c (regexp-search? re string [start flags]) -! boolean procedure
@c 
@c Search string starting at position start, looking for a match for regexp re.If a match is found, return a match structure describing the match, otherwise #f. Start defaults to 0.
@c Flags is the bitwise-or of regexp/bos-not-bol and regexp/eos-not-eol.
@c regexp/bos-not-bol means the beginning of the string isn't a line-begin.
@c regexp/eos-not-eol is analogous. {Note They're currently ignored be-cause begining/end-of-line anchors aren't supported by the current implementation.}
@c Use regexp-search? when you don't need submatch information, as ithas the potential to be significantly faster on submatch-containing regexps.
@c There is no longer a separate regexp "compilation" function; regexp val-ues are compiled for the C engine on demand, and the resulting C structures are cached in the regexp structure after the first use.
@c 
@c 129
@c 
@c (match:start m [i]) -! integer or false procedure
@c (match:end m [i]) -! integer or false procedure
@c (match:substring m [i]) -! string or false procedure
@c 
@c match:start returns the start position of the submatch denoted bymatch-number. The whole regexp is 0; positive integers index submatches
@c 
@c in the regexp, counting left-to-right. Match-number defaults to 0.
@c If the regular expression matches as a whole, but a particular sub-expression does not match, then
@c 
@c match:start returns #f.
@c 
@c match:end is analogous to match:start, returning the end position ofthe indexed submatch.
@c 
@c match:substring returns the substring matched regexp's submatch. Ifthere was no match for the indexed submatch, it returns false.
@c 
@c (regexp-substitute port-or-false match . items) -! object procedure
@c 
@c This procedure can be used to perform string substitutions based onregular-expression matches. The results of the substitution can be either
@c 
@c output to a port or returned as a string.
@c The match argument is a regular-expression match structure that controlsthe substitution. If port is an output port, the items are written out to the
@c 
@c port:
@c 
@c * If an item is a string, it is copied directly to the port.*
@c 
@c If an item is an integer, the corresponding submatch from match iswritten to the port.
@c 
@c * If an item is 'pre, the prefix of the matched string (the text precedingthe match) is written to the port.
@c 
@c * If an item is 'post, the suffix of the matched string is written.
@c If port is #f, nothing is written, and a string is constructed and returnedinstead.
@c 
@c (regexp-substitute/global port-or-false re str . items) -! object procedure
@c 
@c This procedure is similar to regexp-substitute, but can be used to per-form repeated match/substitute operations over a string. It has the following differences with regexp-substitute:
@c 
@c * It takes a regular expression and string to be matched as parameters,instead of a completed match structure.
@c 
@c * If the regular expression doesn't match the string, this procedure isthe identity transform--it returns or outputs the string.
@c 
@c 130
@c 
@c * If an item is 'post, the procedure recurses on the suffix string (thetext from string following the match). Including a
@c 
@c 'post in the listof items is how one gets multiple match/substitution operations.
@c 
@c * If an item is a procedure, it is applied to the match structure for agiven match. The procedure returns a string to be used in the result.
@c 
@c The regexp parameter can be either a compiled regular expression or astring specifying a regular expression.
@c Some examples:
@c ;;; Replace occurrences of "Cotton" with "Jin".
@c (regexp-substitute/global #f (rx "Cotton") s
@c 
@c 'pre "Jin" 'post)
@c 
@c ;;; mm/dd/yy -> dd/mm/yy date conversion.
@c (regexp-substitute/global #f (rx (submatch (+ digit)) "/" ; 1 = M
@c 
@c (submatch (+ digit)) "/" ; 2 = D
@c (submatch (+ digit))) ; 3 = Y
@c s ; Source string
@c 'pre 2 "/" 1 "/" 3 'post)
@c 
@c ;;; "9/29/61" -> "Sep 29, 1961" date conversion.
@c (regexp-substitute/global #f (rx (submatch (+ digit)) "/" ; 1 = M
@c 
@c (submatch (+ digit)) "/" ; 2 = D
@c (submatch (+ digit))) ; 3 = Y
@c s ; Source string
@c 'pre
@c ;; Sleazy converter -- ignores "year 2000" issue,
@c ;; and blows up if month is out of range.
@c (lambda (m)
@c 
@c (let ((mon (vector-ref '#("Jan" "Feb" "Mar" "Apr" "May" "Jun"
@c 
@c "Jul" "Aug" "Sep" "Oct" "Nov" "Dec")
@c (- (string->number (match:substring m 1)) 1)))
@c (day (match:substring m 2))
@c (year (match:substring m 3)))
@c (string-append mon " " day ", 19" year)))
@c 'post)
@c 
@c ;;; Remove potentially offensive substrings from string S.
@c (define (kill-matches re s)
@c 
@c (regexp-substitute/global #f re s 'pre 'post))
@c 
@c (kill-matches (rx (| "Windows" "tcl" "Intel")) s) ; Protect the children.
@c 
@c (regexp-fold re kons knil s [finish start]) -! object procedure
@c 
@c 131
@c 
@c The following definition is a bit unwieldy, but the intuition is sim-ple: this procedure uses the regexp re to divide up string s into nonmatching/matching chunks, and then "folds" the procedure kons acrossthis sequence of chunks. It is useful when you wish to operate on a
@c string in sub-units defined by some regular expression, as are the related
@c regexp-fold-right and regexp-for-each procedures.
@c 
@c Search from start (defaulting to 0) for a match to re; call this match m. Leti be the index of the end of the match (that is,
@c 
@c (match:end m 0)). Loopas follows:
@c 
@c (regexp-fold re kons (kons start m knil) s finish i)If there is no match, return instead
@c (finish start knil)Finish defaults to
@c 
@c (lambda (i knil) knil).
@c 
@c In other words, we divide up s into a sequence of non-matching/matching chunks:
@c 
@c NM1 M1 NM1 M2 . . . NMk-1 Mk-1 NMk
@c where NM1 is the initial part of s that isn't matched by the regexp re,M
@c 
@c 1 is the first match, NM2 is the following part of s that isn't matched,M
@c 2 is the second match, and so forth--NMk is the final non-matchingchunk of s. We apply kons from left to right to build up a result, passing it one non-matching/matching chunk each time: on an application
@c (kons i m knil), the non-matching chunk goes from i to (match:beginm
@c 
@c 0), and the following matching chunk goes from (match:begin m 0)to
@c (match:end m 0). The last non-matching chunk NMk is processed byk. So the computation we perform is
@c 
@c (final Q (kons jk Mk ... (kons J1 M1 knil) ...))
@c where Ji is the index of the start of NMi, Mi is a match value describingM
@c 
@c i, and Q is the index of the beginning of NMk.
@c Hint: The let-match macro is frequently useful for operating on thematch value M passed to the kons function.
@c 
@c (regexp-fold-right re kons knil s [finish start]) -! object procedure
@c 
@c The right-to-left variant of regexp-fold.
@c This procedure repeatedly matches regexp re across string s. This dividess up into a sequence of matching/non-matching chunks:
@c 
@c NM1 M1 NM1 M2 . . . NMk-1 Mk-1 NMk
@c where NM1 is the initial part of s that isn't matched by the regexp re, M1is the first match, NM
@c 
@c 2 is the following part of s that isn't matched, M2
@c 
@c 132
@c 
@c is the second match, and so forth--NMk is the final non-matching chunkof s. We apply kons from right to left to build up a result, passing it one
@c non-matching/matching chunk each time:
@c 
@c (final Q (kons M1 j1 ... (kons Mk Jk knil) ...))
@c where MTCHi is a match value describing Mi, Ji is the index of the endof NMi (or, equivalently, the beginning of Mi+1), and Q is the index of
@c 
@c the beginning of M1. In other words, KONS is passed a match, an indexdescribing the following non-matching text, and the value produced by
@c folding the following text. The FINAL function "polishes off" the fold op-eration by handling the initial chunk of non-matching text (NM0, above).
@c FINISH defaults to (lambda (i knil) knil)
@c Example: To pick out all the matches to re in s, say
@c 
@c (regexp-fold-right re
@c 
@c (* (m i lis)
@c 
@c (cons (match:substring m 0) lis))
@c 
@c '() s)
@c 
@c Hint: The let-match macro is frequently useful for operating on thematch value m passed to the
@c 
@c kons function.
@c 
@c (regexp-for-each re proc s [start]) -! undefined procedure
@c 
@c Repeatedly match regexp re against string s. Apply proc to each matchthat is produced. Matches do not overlap.
@c 
@c Hint: The let-match macro is frequently useful for operating on thematch value m passed to varproc.
@c 
@c (let-match match-exp mvars body . . . ) -! object Syntax
@c (if-match match-exp mvars on-match no-match) -! object Syntax
@c 
@c Mvars is a list of vars that is bound to the match and submatches of thestring;
@c 
@c #F is allowed as a don't-care element. For example,
@c 
@c (let-match (regexp-search date s) (whole-date month day year)
@c 
@c ... body ...)
@c 
@c matches the regexp against string s, then evaluates the body of the
@c let-match in a scope where whole-date is bound to the matched string,and
@c 
@c month, day and year are bound to the first, second and third sub-matches.
@c 
@c if-match is similar, but if the match expression is false, then the no-matchexpression is evaluated; this would be an error in
@c 
@c let-match.
@c 
@c (match-cond clause . . . ) -! object Syntax
@c 
@c 133
@c 
@c This macro allows one to conditionally attempt a sequence of patternmatches, interspersed with other, general conditional tests. There are
@c four kinds of match-cond clause, one introducing a pattern match, andthe other three simply being regular
@c 
@c cond-style clauses, marked by the
@c test and else keywords:
@c 
@c (match-cond (match-exp match-vars body ...) ; As in if-match
@c 
@c (test exp body ...) ; As in cond
@c (test exp => proc) ; As in cond
@c (else body ...)) ; As in cond
@c 
@c (flush-submatches re) -! re procedure
@c (uncase re) -! re procedure
@c (simplify-regexp re) -! re procedure
@c (uncase-char-set cset) -! re procedure
@c (uncase-string str) -! re procedure
@c 
@c These functions map regexps and char sets to other regexps.
@c flush-submatches returns a regexp which matches exactly what its ar-gument matches, but contains no submatches.
@c 
@c uncase returns a regexp that matches any case-permutation of its argu-ment regexp.
@c simplify-regexp applies the simplifier to its argument. This is done au-tomatically when compiling regular expressions, so this is only useful for
@c programmers that are directly examining the ADT value with lower-levelaccessors.
@c 
@c uncase-char-set maps a char set to a regular expression thatmatches any character from that set, regardless of case. Similarly,
@c uncase-string returns a regexp that matches any case-permutation ofthe string. For example,
@c 
@c (uncase-string "Knight") returns the samevalue that
@c (rx ("kK") ("nN") ("iI") ("gG") ("hH") ("tT")) or (rx
@c (w/nocase "Knight")).
@c 
@c (sre->regexp sre) -! re procedure
@c (regexp->sre re) -! sre procedure
@c 
@c These are the SRE parser and unparser. That is, sre->regexp maps anSRE to a regexp value, and
@c 
@c regexp->sre does the inverse. The latterfunction can be useful for printing out regexps in a readable format.
@c 
@c 134
@c 
@c (sre->regexp '(: "Olin " (? "G. ") "Shivers")) =) regexp
@c (define re (re-seq (re-string "Pete ")
@c 
@c (re-repeat 1 #f (re-string "Sz"))
@c (re-string "ilagyi")))
@c (regexp->sre (re-repeat 0 1 re))=)
@c 
@c '(? "Pete" (+ "Sz") "ilagyi")
@c 
@c (posix-string->regexp string) -! re procedure
@c (regexp->posix-string re) -! [string syntax-level paren-count submatches-vector] procedure
@c 
@c These two functions are the Posix notation parser and unparser. That is,
@c posix-string->regexp maps a Posix-notation regular expression, suchas
@c 
@c "g(ee|oo)se", to a regexp value, and regexp->posix-string does theinverse.
@c 
@c You can use these tools to map between scsh regexps and Posix regexpstrings, which can be useful if you want to do conversion between SRE's
@c and Posix form. For example, you can write a particularly complex reg-exp in SRE form, or compute it using the ADT constructors, then convert
@c to Posix form, print it out, cut and paste it into a C or emacs lisp program.Or you can import an old regexp from some other program, parse it into
@c an ADT value, render it to an SRE, print it out, then cut and paste it intoa scsh program.
@c 
@c Note:
@c 
@c * The string parser doesn't handle the exotica of character class namessuch as
@c 
@c [[:alnum:]]; the current implementation was written in inthree hours.
@c 
@section The regexp ADT
@c 
@c The following functions may be used to construct and examine scsh's regexpabstract data type. They are in the following Scheme 48 packages: re-adt-lib
@c re-lib scsh
@c 
@c Each basic class of regexp has a predicate, a basic constructor, a "smart"consructor that performs limited "peephole" optimisation on its arguments,
@c 
@c and a set of accessors. The ...:tsm accessor returns the total number of sub-matches contained in the regular expression.
@c 
@c (re-seq? x) -! boolean Type predicate
@c (make-re-seq re-list) -! re Basic constructor
@c (re-seq re-list) -! re Smart constructor
@c (re-seq:elts re) -! re-list Accessor
@c 
@c 135
@c 
@c (re-seq:tsm re) -! integer Accessor
@c (re-choice? x) -! boolean Type predicate
@c (make-re-choice re-list) -! re Basic constructor
@c (re-choice re-list) -! re Smart constructor
@c (re-choice:elts re) -! re-list Accessor
@c (re-choice:tsm re) -! integer Accessor
@c 
@c (re-repeat? x) -! boolean Type predicate
@c (make-re-repeat from to body) -! re Accessor
@c (re-repeat:from re) -! integer Accessor
@c (re-repeat:to re) -! integer Accessor
@c (re-repeat:tsm re) -! integer Accessor
@c 
@c (re-submatch? x) -! boolean Type predicate
@c (make-re-submatch body [pre-dsm post-dsm]) -! re Accessor
@c (re-submatch:pre-dsm re) -! integer Accessor
@c (re-submatch:post-dsm re) -! integer Accessor
@c (re-submatch:tsm re) -! integer Accessor
@c 
@c (re-string? x) -! boolean Type predicate
@c (make-re-string chars) -! re Basic constructor
@c (re-string chars) -! re Basic constructor
@c (re-string:chars re) -! string Accessor
@c 
@c (re-char-set? x) -! boolean Type predicate
@c (make-re-char-set cset) -! re Basic constructor
@c (re-char-set cset) -! re Basic constructor
@c (re-char-set:cset re) -! char-set Accessor
@c 
@c (re-dsm? x) -! boolean Type predicate
@c (make-re-dsm body pre-dsm post-dsm) -! re Basic constructor
@c (re-dsm body pre-dsm post-dsm) -! re Smart constructor
@c (re-dsm:body re) -! re Accessor
@c (re-dsm:pre-dsm re) -! integer Accessor
@c (re-dsm:post-dsm re) -! integer Accessor
@c (re-dsm:tsm re) -! integer Accessor
@c 
@c re-bos regexp
@c re-eos regexp
@c re-bol regexp
@c re-eol regexp
@c 
@c These variables are bound to the primitive anchor regexps.
@c 
@c (re-bos? object) -! boolean procedure
@c (re-eos? object) -! boolean procedure
@c (re-bol? object) -! boolean procedure
@c (re-eol? object) -! boolean procedure
@c 
@c 136
@c 
@c These predicates recognise the associated primitive anchor regexp.
@c re-trivial regexp
@c (re-trivial? re) -! boolean procedure
@c 
@c The variable re-trivial is bound to a regular expression that matchesthe empty string (corresponding to the SRE
@c 
@c "" or (:)); it is recognisedby the associated predicate. Note that the predicate is only guaranteed to
@c 
@c recognise this particular trivial regexp; other trivial regexps built usingother constructors may or may not produce a true value.
@c 
@c re-empty regexp
@c (re-empty? re) -! boolean procedure
@c 
@c The variable re-empty is bound to a regular expression that nevermatches (corresponding to the SRE
@c 
@c (|)); it is recognised by the associ-ated predicate. Note that the predicate is only guaranteed to recognise
@c 
@c this particular empty regexp; other empty regexps built using other con-structors may or may not produce a true value.
@c 
@c re-any regexp
@c (re-any? re) -! boolean procedure
@c 
@c The variable re-any is bound to a regular expression that matches anycharacter (corresponding to the SRE
@c 
@c any); it is recognised by the associ-ated predicate. Note that the predicate is only guaranteed to recognise
@c 
@c this particular any-character regexp value; other any-character regexpsbuilt using other constructors may or may not produce a true value.
@c 
@c re-nonl regexp
@c 
@c The variable re-nonl is bound to a regular expression that matches anynon-newline character (corresponding to the SRE
@c 
@c (~ #\newline)).
@c 
@c (regexp? object) -! boolean procedure
@c 
@c Is the object a regexp?
@c 
@c (re-tsm re) -! integer procedure
@c 
@c Return the total number of submatches contained in the regexp.
@c 
@c (clean-up-cres) -! undefined procedure
@c 
@c The current scsh implementation should call this function periodically torelease C-heap storage associated with compiled regexps. Hopefully, this
@c 
@c procedure will be removed at a later date.
@c 
@c 137
@c 
@section Syntax-hacking tools
@c 
@c The Scheme 48 package sre-syntax-tools exports several tools for macrowriters that want to use SREs in their macros. In the functions defined below,
@c compare and rename parameters are as passed to Clinger-Rees explicit-renaminglow-level macros.
@c 
@c (if-sre-form form conseq-form alt-form) -! form Syntax
@c 
@c If form is a legal SRE, this is equivalent to the expression conseq-form, oth-erwise it expands to alt-form.
@c 
@c This is useful for high-level macro authors who want to write a macrowhere one field in the macro can be an SRE or possibly something else.
@c E.g., we might have a conditional form wherein if the test part of one armis an SRE, it expands to a regexp match on some implied value, otherwise
@c the form is evaluated as a boolean Scheme expression. For example, aconditional macro might expand into code containing the following form,
@c which in turn would have one of two possible expansions:
@c 
@c (if-sre-form test-exp ; If TEST-EXP is SRE,
@c 
@c (regexp-search? (rx test-exp) line) ; match it w/the line,
@c test-exp) ; otw it's a text exp.
@c 
@c (sre-form? form rename compare) -! boolean procedure
@c 
@c This procedure is for low-level macros doing things equivalent to
@c if-sre-form. It returns true if the form is a legal SRE.
@c 
@c Note that neither sre-form nor if-sre-form does a deep recursion overthe form in the case where the form is a list. They simply check the car of
@c 
@c the form for one of the legal SRE keywords.
@c (parse-sre sre-form compare rename) -! re procedure
@c (parse-sres sre-forms compare rename) -! re procedure
@c 
@c Parse sre-form into an ADT. Note that if the SRE is dynamic--contains
@c ,exp or ,@exp forms, or has repeat operators whose from/to counts arenot constants--then the returned ADT will have Scheme expressions in the
@c 
@c corresponding slots of the regexp records instead of the correspondinginteger, char-set, or regexp. In other words, we use the ADT as its own
@c AST. It's called a "hack."
@c parse-sres parses a list of SRE forms that comprise an implicit sequence.
@c 
@c (regexp->scheme re rename) -! Scheme-expression procedure
@c 
@c Returns a Scheme expression that will construct the regexp re using ADTconstructors such as
@c 
@c make-re-sequence, make-re-repeat, and so forth.
@c 
@c If the regexp is static, it will be simplified and pre-translated to a Posixstring as well, which will be part of the constructed regexp value.
@c 
@c 138
@c 
@c (static-regexp? re) -! boolean procedure
@c 
@c Is the regexp a static one?

@node Reading delimited strings
@chapter Reading delimited strings

@c Scsh provides a set of procedures that read delimited strings from input ports.There are procedures to read a single line of text (terminated by a newline character), a single paragraph (terminated by a blank line), and general delimitedstrings (terminated by a character belonging to an arbitrary character set).
@c 
@c These procedures can be applied to any Scheme input port. However, thescsh virtual machine has native-code support for performing delimited reads
@c on Unix ports, and these input operations should be particularly fast--muchfaster than doing the equivalent character-at-a-time operation from Scheme
@c code.
@c 
@c All of the delimited input operations described below take a handle-delimparameter, which determines what the procedure does with the terminating
@c 
@c delimiter character. There are four possible choices for a handle-delim param-eter:
@c 
@c handle-delim Meaning
@c 'trim Ignore delimiter character.
@c 'peek Leave delimiter character in input stream.
@c 'concat Append delimiter character to returned value.
@c 'split Return delimiter as second value.
@c 
@c The first case, 'trim, is the standard default for all the routines described inthis section. The last three cases allow the programmer to distinguish between
@c 
@c strings that are terminated by a delimiter character, and strings that are termi-nated by an end-of-file.
@c 
@c (read-line [port handle-newline]) -! string or eof-object procedure
@c 
@c Reads and returns one line of text; on @acronym{eof}, returns the @acronym{eof} object. A line isterminated by newline or @acronym{eof}.
@c 
@c 140
@c 
@c handle-newline determines what read-line does with the newline or @acronym{eof} that terminates the line; it takes the general set of values described for
@c the general handle-delim case above, and defaults to 'trim (discard thenewline). Using this argument allows one to tell whether or not the last
@c line of input in a file is newline terminated.
@c 
@c (read-paragraph [port handle-delim]) -! string or @acronym{eof} procedure
@c 
@c This procedure skips blank lines, then reads text from a port until a blankline or @acronym{eof} is found. A "blank line" is a (possibly empty) line composed
@c 
@c only of white space. The handle-delim parameter determines how the ter-minating blank line is handled. It is described above, and defaults to
@c 'trim. The 'peek option is not available.
@c The following procedures read in strings from ports delimited by charactersbelonging to a specific set. See section @ref{5.5} for information on character set
@c 
@c manipulation.
@c (read-delimited char-set [port handle-delim]) -! string or @acronym{eof} procedure
@c 
@c Read until we encounter one of the chars in char-set or @acronym{eof}. Thehandle-delim parameter determines how the terminating character is handled. It is described above, and defaults to 'trim.
@c The char-set argument may be a charset, a string, or a character; it is co-erced to a charset.
@c 
@c (read-delimited! char-set buf [port handle-delim start end]) -! nchars or @acronym{eof} or #f procedure
@c 
@c A side-effecting variant of read-delimited.
@c The data is written into the string buf at the indices in the half-open in-terval [start
@c 
@c , end); the default interval is the whole string: start = 0 andend =
@c (string-length buf). The values of start and end must specify awell-defined interval in str, i.e., 0 <= start <= end <=
@c 
@c (string-length buf).
@c 
@c It returns nbytes, the number of bytes read. If the buffer filled up withouta delimiter character being found,
@c 
@c #f is returned. If the port is at @acronym{eof}when the read starts, the @acronym{eof} object is returned.
@c 
@c If an integer is returned (i.e., the read is successfully terminated by read-ing a delimiter character), then the handle-delim parameter determines
@c how the terminating character is handled. It is described above, and de-faults to
@c 
@c 'trim.
@c 
@c (%read-delimited! char-set buf gobble? [port start end]) -! [char-or-@acronym{eof}-or-#f integer] procedure
@c 
@c This low-level delimited reader uses an alternate interface. It returns twovalues: terminator and num-read.
@c 
@c 141
@c 
@c terminator A value describing why the read was terminated:
@c 
@c Character or @acronym{eof}-object ) Read terminated by this value.
@c #f ) Filled buffer without finding a delimiter.
@c 
@c num-read Number of characters read into buf.
@c 
@c If the read is successfully terminated by reading a delimiter character,then the gobble? parameter determines what to do with the terminating
@c 
@c character. If true, the character is removed from the input stream; if false,the character is left in the input stream where a subsequent read operation will retrieve it. In either case, the character is also the first valuereturned by the procedure call.
@c 
@c (skip-char-set skip-chars [port]) -! integer procedure
@c 
@c Skip characters occurring in the set skip-chars; return the number of char-acters skipped. The skip-chars argument may be a charset, a string, or a
@c 
@c character; it is coerced to a charset.

@node Awk record I/O and field parsing
@chapter Awk record I/O and field parsing

@c Unix programs frequently process streams of records, where each record isdelimited by a newline, and records are broken into fields with other delimiters (for example, the colon character in /etc/passwd). Scsh has proceduresthat allow the programmer to easily do this kind of processing. Scsh's field
@c parsers can also be used to parse other kinds of delimited strings, such ascolon-separated
@c 
@c $PATH lists. These routines can be used with scsh's awk loopconstruct to conveniently perform pattern-directed computation over streams
@c 
@c of records.
@c 
@section Record I/O and field parsing
@c 
@c The procedures in this section are used to read records from I/O streams andparse them into fields. A record is defined as text terminated by some delimiter
@c (usually a newline). A record can be split into fields by using regular expres-sions in one of several ways: to match fields, to separate fields, or to terminate
@c fields. The field parsers can be applied to arbitrary strings (one common useis splitting environment variables such as
@c 
@c $PATH at colons into its componentelements).
@c 
@c The general delimited-input procedures described in chapter 7 are also use-ful for reading simple records, such as single lines, paragraphs of text, or
@c strings terminated by specific characters.
@c 
@c 143
@c 
@c @subsection Reading records
@c 
@c (record-reader [delims elide-delims? handle-delim]) -! procedure procedure
@c 
@c Returns a procedure that reads records from a port. The procedure isinvoked as follows:
@c 
@c (reader [port]) -! string or @acronym{eof}
@c A record is a sequence of characters terminated by one of the charactersin delims or @acronym{eof}. If elide-delims? is true, then a contiguous sequence of
@c 
@c delimiter chars are taken as a single record delimiter. If elide-delims? isfalse, then a delimiter char coming immediately after a delimiter char
@c produces an empty-string record. The reader consumes the delimitingchar(s) before returning from a read.
@c 
@c The delims set defaults to the set {newline}. It may be a charset, string,character, or character predicate, and is coerced to a charset. The
@c elide-delims? flag defaults to #f.
@c The handle-delim argument controls what is done with the record's termi-nating delimiter.
@c 
@c 'trim Delimiters are trimmed. (The default)
@c 'split Reader returns delimiter string as asecond argument. If record is terminated by @acronym{eof}, then the @acronym{eof} object isreturned as this second argument.
@c 'concat The record and its delimiter are re-turned as a single string.
@c 
@c The reader procedure returned takes one optional argument, the portfrom which to read, which defaults to the current input port. It returns a
@c string or @acronym{eof}.
@c 
@c @subsection Parsing fields
@c 
@c (field-splitter [field num-fields]) -! procedure procedure
@c (infix-splitter [delim num-fields handle-delim]) -! procedure procedure
@c (suffix-splitter [delim num-fields handle-delim]) -! procedure procedure
@c (sloppy-suffix-splitter [delim num-fields handle-delim]) -! procedure procedure
@c 
@c These functions return a parser function that can be used as follows:
@c 
@c (parser string [start]) -! string-list
@c 
@c The returned parsers split strings into fields defined by regular expres-sions. You can parse by specifying a pattern that separates fields, a pattern
@c 
@c that terminates fields, or a pattern that matches fields:
@c 
@c 144
@c 
@c Procedure Pattern
@c field-splitter matches fields
@c infix-splitter separates fields
@c suffix-splitter terminates fields
@c sloppy-suffix-splitter terminates fields
@c 
@c These parser generators are controlled by a range of options, so that youcan precisely specify what kind of parsing you want. However, these
@c options default to reasonable values for general use.
@c Defaults:delim = (rx (| (+ white) eos)) (suffix delimiter: white space or eos)
@c 
@c (rx (+ white)) (infix delimiter: white space)field =
@c (rx (+ (~ white))) (non-white-space)num-fields =
@c #f (as many fields as possible)handle-delim =
@c 'trim (discard delimiter chars). . . which means: break the string at white space, discarding the white
@c 
@c space, and parse as many fields as possible.
@c The delim parameter is a regular expression matching the text that occursbetween fields. See chapter 6 for information on regular expressions, and
@c 
@c the rx form used to specify them. In the separator case, it defaults to apattern matching white space; in the terminator case, it defaults to white
@c space or end-of-string.
@c The field parameter is a regular expression used to match fields. It de-faults to non-white-space.
@c 
@c The delim patterns may also be given as a string, character, or char-set,which are coerced to regular expressions. So the following expressions
@c are all equivalent, each producing a function that splits strings apart atcolons:
@c 
@c (infix-splitter (rx ":"))
@c (infix-splitter ":")
@c (infix-splitter #\:)
@c (infix-splitter (char-set #\:))
@c 
@c The boolean handle-delim determines what to do with delimiters.'trim Delimiters are thrown away after parsing. (default)
@c 
@c 'concat Delimiters are appended to the field preceding them.
@c 'split Delimiters are returned as separate elements in the field list.
@c 
@c The num-fields argument used to create the parser specifies how manyfields to parse. If
@c 
@c #f (the default), the procedure parses them all. If a pos-itive integer
@c n, exactly that many fields are parsed; it is an error if thereare more or fewer than
@c 
@c n fields in the record. If num-fields is a negativeinteger or zero, then |
@c n| fields are parsed, and the remainder of the string
@c 
@c 145
@c 
@c is returned in the last element of the field list; it is an error if fewer than|
@c 
@c n| fields can be parsed.
@c 
@c The field parser produced is a procedure that can be employed as follows:
@c 
@c (parse string [start]) =) string-list
@c The optional start argument (default 0) specifies where in the string tobegin the parse. It is an error if start
@c 
@c > (string-length string).
@c 
@c The parsers returned by the four parser generators implement differentkinds of field parsing:
@c 
@c field-splitter The regular expression specifies the actual field.
@c suffix-splitter Delimiters are interpreted as element terminators. Ifvertical-bar is the the delimiter, then the string
@c 
@c "" is the emptyrecord
@c (), "foo|" produces a one-field record ("foo"), and "foo"is an error.
@c 
@c The syntax of suffix-delimited records is:h
@c 
@c record i ::= "" (Empty record)| h element i h delim i h record i
@c 
@c It is an error if a non-empty record does not end with a delimiter.To make the last delimiter optional, make sure the delimiter regexp
@c matches the end-of-string (sre eos).
@c infix-splitter Delimiters are interpreted as element separators. Ifcomma is the delimiter, then the string
@c 
@c "foo," produces a two-fieldrecord
@c ("foo" "").
@c 
@c The syntax of infix-delimited records is:h
@c 
@c record i ::= "" (Forced to be empty record)| h real-infix-record i
@c 
@c h real-infix-record i ::= h element i h delim i h real-infix-record i| h element i
@c Note that separator semantics doesn't really allow for emptyrecords--the straightforward grammar (i.e., h real-infix-record i)
@c parses an empty string as a singleton list whose one field is theempty string,
@c 
@c (""), not as the empty record (). This is unfortunate,since it means that infix string parsing doesn't make
@c 
@c string-appendand
@c append isomorphic. For example,
@c 
@c ((infix-splitter ":") (string-append x ":" y))
@c doesn't always equal
@c 
@c (append ((infix-splitter ":") x)
@c 
@c ((infix-splitter ":") y))
@c 
@c 146
@c 
@c Record : suffix :|$ suffix : infix non-: field
@c "" () () () ()
@c ":" ("") ("") ("" "") ()
@c "foo:" ("foo") ("foo") ("foo" "") ("foo")
@c ":foo" error ("" "foo") ("" "foo") ("foo")
@c "foo:bar" error ("foo" "bar") ("foo" "bar") ("foo" "bar")
@c 
@c Figure 8.1: Using different grammars to split records into fields.
@c 
@c It fails when x or y are the empty string. Terminator semantics doespreserve a similar isomorphism.
@c However, separator semantics is frequently what other Unix soft-ware uses, so to parse their strings, we need to use it. For example,
@c Unix $PATH lists have separator semantics. The path list "/bin:" isbroken up into
@c 
@c ("/bin" ""), not ("/bin"). Comma-separated listsshould also be parsed this way.
@c 
@c sloppy-suffix The same as the suffix case, except that the parser willskip an initial delimiter string if the string begins with one instead
@c 
@c of parsing an initial empty field. This can be used, for example,to field-split a sequence of English text at white-space boundaries,
@c where the string may begin or end with white space, by using regex
@c 
@c (rx (| (+ white) eos))
@c (But you would be better off using field-splitter in this case.)
@c 
@c Figure 8.1 shows how the different parser grammars split apart the samestrings. Having to choose between the different grammars requires you to
@c decide what you want, but at least you can be precise about what you areparsing. Take fifteen seconds and think it out. Say what you mean; mean what
@c you say.
@c (join-strings string-list [delimiter grammar]) -! string procedure
@c 
@c This procedure is a simple unparser--it pastes strings together using thedelimiter string.
@c 
@c The grammar argument is one of the symbols infix (the default) or
@c suffix; it determines whether the delimiter string is used as a separa-tor or as a terminator.
@c 
@c The delimiter is the string used to delimit elements; it defaults to a singlespace
@c 
@c " ".
@c 
@c Example:
@c 
@c 147
@c 
@c (join-strings '("foo" "bar" "baz") ":")=)
@c 
@c "foo:bar:baz"
@c 
@c @subsection Field readers
@c 
@c (field-reader [field-parser rec-reader]) -! procedure procedure
@c 
@c This utility returns a procedure that reads records with field structurefrom a port. The reader's interface is designed to make it useful in the
@c 
@c awk loop macro (section @ref{8.2}). The reader is used as follows:
@c 
@c (reader [port]) =) [raw-record parsed-record] or [@acronym{eof} ()]
@c 
@c When the reader is applied to an input port (default: the current inputport), it reads a record using rec-reader. If this record isn't the @acronym{eof} object, it
@c 
@c is parsed with field-parser. These two values--the record, and its parsedrepresentation--are returned as multiple values from the reader.
@c 
@c When called at @acronym{eof}, the reader returns [@acronym{eof}-object ()].
@c Although the record reader typically returns a string, and the field-parsertypically takes a string argument, this is not required. The record reader
@c 
@c can produce, and the field-parser consume, values of any type. However,the empty list returned as the parsed value on @acronym{eof} is hardwired into the
@c field reader.
@c For example, if port p is open on /etc/passwd, then
@c 
@c ((field-reader (infix-splitter ":" 7)) p)
@c returns two values:
@c "dalbertz:mx3Uaqq0:107:22:David Albertz:/users/dalbertz:/bin/csh"
@c ("dalbertz" "mx3Uaqq0" "107" "22" "David Albertz" "/users/dalbertz"
@c 
@c "/bin/csh")
@c 
@c The field-parser defaults to the value of (field-splitter), a parser thatpicks out sequences of non-white-space strings.
@c 
@c The rec-reader defaults to read-line.
@c Figure 8.2 shows field-reader being used to read different kinds ofUnix records.
@c 
@c @subsection Forward-progress guarantees and empty-string matches
@c 
@c A loop that pulls text off a string by repeatedly matching a regexp against thatstring can conceivably get stuck in an infinite loop if the regexp matches the
@c empty string. For example, the SREs bos, eos, (* any), and (| "foo" (*
@c ( "f"))) can all match the empty string.
@c 
@c 148
@c 
@c ;;; /etc/passwd reader
@c (field-reader (infix-splitter ":" 7))
@c 
@c ; wandy:3xuncWdpKhR.:73:22:Wandy Saetan:/usr/wandy:/bin/csh
@c 
@c ;;; Two ls -l output readers
@c (field-reader (infix-splitter (rx (+ white)) 8))
@c (field-reader (infix-splitter (rx (+ white)) -7))
@c 
@c ; -rw-r--r-- 1 shivers 22880 Sep 24 12:45 scsh.scm
@c 
@c ;;; Internet hostname reader
@c (field-reader (field-splitter (rx (+ (~ ".")))))
@c 
@c ; stat.sinica.edu.tw
@c 
@c ;;; Internet IP address reader
@c (field-reader (field-splitter (rx (+ (~ "."))) 4))
@c 
@c ; 18.24.0.241
@c 
@c ;;; Line of integers
@c (let ((parser (field-splitter (rx (? ("+-")) (+ digit)))))
@c 
@c (field-reader (* (s) (map string->number (parser s))))
@c 
@c ; 18 24 0 241
@c 
@c ;;; Same as above.
@c (let ((reader (field-reader (field-splitter (rx (? ("+-"))
@c 
@c (+ digit))))))
@c (* maybe-port (map string->number (apply reader maybe-port))))
@c 
@c ; Yale beat harvard 26 to 7.
@c 
@c Figure 8.2: Some examples of field-reader
@c 
@c 149
@c 
@c The routines in this package that iterate through strings with regular ex-pressions are careful to handle this empty-string case. If a regexp matches the
@c empty string, the next search starts, not from the end of the match (which inthe empty string case is also the beginning--that's the problem), but from the
@c next character over. This is the correct behaviour. Regexps match the longestpossible string at a given location, so if the regexp matched the empty string
@c at location i, then it is guaranteed it could not have matched a longer patternstarting with character
@c 
@c i. So we can safely begin our search for the next matchat char
@c i + 1.
@c 
@c With this provision, every iteration through the loop makes some forwardprogress, and the loop is guaranteed to terminate.
@c 
@c This has the effect you want with field parsing. For example, if you split astring with the empty pattern, you will explode the string into its individual
@c characters:
@c 
@c ((suffix-splitter (rx)) "foo") =) ("" "f" "o" "o")
@c However, even though this boundary case is handled correctly, we don't rec-ommend using it. Say what you mean--just use a field splitter:
@c 
@c ((field-splitter (rx any)) "foo") =) ("f" "o" "o")
@c Or, more efficiently,
@c 
@c ((* (s) (map string (string->list s))) "foo")
@c 
@c @subsection Reader limitations
@c 
@c Since all of the readers in this package require the ability to peek ahead onechar in the input stream, they cannot be applied to raw integer file descriptors,
@c only Scheme input ports. This is because Unix doesn't support peeking aheadinto input streams.
@c 
@section Awk
@c 
@c Scsh provides a loop macro and a set of field parsers that can be used to per-form text processing very similar to the Awk programming language. The
@c basic functionality of Awk is factored in scsh into its component parts. Thecontrol structure is provided by the
@c 
@c awk loop macro; the text I/O and parsersare provided by the field-reader subroutine library (section @ref{8.1}). This factoring
@c 
@c allows the programmer to compose the basic loop structure with any parser orinput mechanism at all. If the parsers provided by the field-reader package are
@c insufficient, the programmer can write a custom parser in Scheme and use itwith equal ease in the awk framework.
@c 
@c Awk-in-scheme is given by a loop macro called awk. It looks like this:
@c 
@c 150
@c 
@c (awk h next-record i h record&field-vars i[h counter i] h state-var-decls i
@c 
@c h clause1 i ...)
@c 
@c The body of the loop is a series of clauses, each one representing a kind ofcondition/action pair. The loop repeatedly reads a record, and then executes
@c each clause whose condition is satisfied by the record.
@c 
@c Here's an example that reads lines from port p and prints the line numberand line of every line containing the string "Church-Rosser":
@c 
@c (awk (read-line) (ln) lineno ()
@c ("Church-Rosser" (format #t "~d: ~s~%" lineno ln)))
@c 
@c This example has just one clause in the loop body, the one that tests for matchesagainst the regular expression "Church-Rosser".
@c 
@c The h next-record i form is an expression that is evaluated each time throughthe loop to produce a record to process. This expression can return multiple
@c 
@c values; these values are bound to the variables given in the h record&field-vars ilist of variables. The first value returned is assumed to be the record; when it
@c is the end-of-file object, the loop terminates.
@c 
@c For example, let's suppose we want to read items from /etc/password, andwe use the
@c 
@c field-reader procedure to define a record parser for /etc/passwdentries:
@c 
@c (define read-passwd (field-reader (infix-splitter ":" 7)))
@c binds read-passwd to a procedure that reads in a line of text when it is called,and splits the text at colons. It returns two values: the entire line read,
@c 
@c and a seven-element list of the split-out fields. (See section @ref{8.1} for more on
@c field-reader and infix-splitter.)
@c 
@c So if the h next-record i form in an awk expression is (read-passwd), thenh record&field-vars i must be a list of two variables, e.g.,
@c 
@c (record field-vec)
@c since read-passwd returns two values.
@c 
@c Note that awk allows us to use any record reader we want in the loop, re-turning whatever number of values we like. These values don't have to be
@c 
@c strings or string lists. The only requirement is that the record reader return the@acronym{eof} object as its first value when the loop should terminate.
@c 
@c The awk loop allows the programmer to have loop variables. These aredeclared and initialised by the h state-var-decls i form, a
@c 
@c ((var init-exp) (var init-exp) ...)
@c 
@c 151
@c 
@c list rather like the let form. Whenever a clause in the loop body executes, itevaluates to as many values as there are state variables, updating them.
@c 
@c The optional h counter i variable is an iteration counter. It is bound to 0 whenthe loop starts. The counter is incremented each time a non-@acronym{eof} record is read.
@c There are several kinds of loop clause. When evaluating the body of theloop,
@c 
@c awk evaluates all the clauses sequentially. Unlike cond, it does not stopafter the first clause is satisfied; it checks them all.
@c 
@c * (test body1 body2 ...)If test is true, execute the body forms. The last body form is the value
@c 
@c of the clause. The test and body forms are evaluated in the scope of therecord and state variables.
@c 
@c The test form can be one of:
@c 
@c integer: The test is true for that iteration of theloop. The first iteration is #1.
@c 
@c sre: A regular expression, in SRE notation(see chapter 6) can be used as a test.
@c 
@c The test is successful if the patternmatches the record. In particular, note
@c that any string is an SRE.
@c (when expr): The body of a when test is evaluatedas a Scheme boolean expression in the
@c 
@c inner scope of the awk form.expr: If the form is none of the above, it
@c is treated as a Scheme expression--in practice, the
@c 
@c when keyword is onlyneeded in cases where SRE/Scheme
@c 
@c expression ambiguity might occur.
@c 
@c * (range start-test stop-test body1 ...)
@c 
@c (:range start-test stop-test body1 ...)
@c (range: start-test stop-test body1 ...)
@c (:range: start-test stop-test body1 ...)These clauses become activated when start-test is true; they stay active on
@c 
@c all further iterations until stop-test is true.
@c So, to print out the first ten lines of a file, we use the clause:
@c 
@c (:range: 1 10 (display record))
@c 
@c The colons control whether or not the start and stop lines are processedby the clause. For example:
@c 
@c 152
@c 
@c (range 1 5 ...) Lines 2 3 4
@c (:range 1 5 ...) Lines 1 2 3 4
@c (range: 1 5 ...) Lines 2 3 4 5
@c (:range: 1 5 ...) Lines 1 2 3 4 5
@c 
@c A line can trigger both tests, either simultaneously starting and stoppingan active region, or simultaneously stopping one and starting a new one,
@c so ranges can abut seamlessly.
@c 
@c * (else body1 body2 ...)If no other clause has executed since the top of the loop, or since the last
@c 
@c else clause, this clause executes.
@c 
@c * (test => exp)If evaluating
@c 
@c test produces a true value, apply exp to that value. If testis a regular expression, then exp is applied to the match data structure
@c 
@c returned by the regexp match routine.
@c 
@c * (after body1 ...)This clause executes when the loop encounters @acronym{eof}. The body forms execute in the scope of the state vars and the record-count var, if there areany. The value of the last body form is the value of the entire awk form.
@c 
@c If there is no after clause, awk returns the loop's state variables as multi-ple values.
@c 
@c @subsection Examples
@c 
@c Here are some examples of awk being used to process various types of inputstream.
@c 
@c (define $ list-ref) ; Saves typing.
@c ;;; Print out the name and home-directory of everyone in /etc/passwd:
@c (let ((read-passwd (field-reader (infix-splitter ":" 7))))
@c 
@c (call-with-input-file "/etc/passwd"
@c 
@c (lambda (port)
@c 
@c (awk (read-passwd port) (record fields) ()
@c 
@c (#t (format #t "~a's home directory is ~a~%"
@c 
@c ($ fields 0)
@c ($ fields 5)))))))
@c 
@c 153
@c 
@c ;;; Print out the user-name and home-directory of everyone whose
@c ;;; name begins with "S"
@c (let ((read-passwd (field-reader (infix-splitter ":" 7))))
@c 
@c (call-with-input-file "/etc/passwd"
@c 
@c (lambda (port)
@c 
@c (awk (read-passwd port) (record fields) ()
@c 
@c ((: bos "S")
@c 
@c (format #t "~a's home directory is ~a~%"
@c 
@c ($ fields 0)
@c ($ fields 5)))))))
@c 
@c ;;; Read a series of integers from stdin. This expression evaluates
@c ;;; to the number of positive numbers that were read. Note our
@c ;;; "record-reader" is the standard Scheme READ procedure.
@c (awk (read) (i) ((npos 0))
@c 
@c ((> i 0) (+ npos 1)))
@c 
@c ;;; Filter -- pass only lines containing my name.
@c (awk (read-line) (line) ()
@c 
@c ("Olin" (display line) (newline)))
@c 
@c ;;; Count the number of non-comment lines of code in my Scheme source.
@c (awk (read-line) (line) ((nlines 0))
@c 
@c ((: bos (* white) ";") nlines) ; A comment line.
@c (else (+ nlines 1))) ; Not a comment line.
@c 
@c ;;; Read numbers, counting the evens and odds.
@c (awk (read) (val) ((evens 0) (odds 0))
@c 
@c ((> val 0) (display "pos ") (values evens odds)) ; Tell me about
@c ((< val 0) (display "neg ") (values evens odds)) ; sign, too.
@c (else (display "zero ") (values evens odds))
@c 
@c ((even? val) (values (+ evens 1) odds))
@c (else (values evens (+ odds 1))))
@c 
@c ;;; Determine the max length of all the lines in the file.
@c (awk (read-line) (line) ((max-len 0))
@c 
@c (#t (max max-len (string-length line))))
@c 
@c 154
@c 
@c ;;; (This could also be done with PORT-FOLD:)
@c (port-fold (current-input-port) read-line
@c 
@c (lambda (line maxlen) (max (string-length line) maxlen))
@c 0)
@c 
@c ;;; Print every line longer than 80 chars.
@c ;;; Prefix each line with its line #.
@c (awk (read-line) (line) lineno ()
@c 
@c ((> (string-length line) 80)
@c 
@c (format #t "~d: ~s~%" lineno line)))
@c 
@c ;;; Strip blank lines from input.
@c (awk (read-line) (line) ()
@c 
@c ((~ white) (display line) (newline)))
@c 
@c ;;; Sort the entries in /etc/passwd by login name.
@c (for-each (lambda (entry) (display (cdr entry)) (newline)) ; Out
@c 
@c (sort (lambda (x y) (string<? (car x) (car y))) ; Sort
@c 
@c (let ((read (field-reader (infix-splitter ":" 7)))) ; In
@c 
@c (awk (read) (line fields) ((ans '()))
@c 
@c (#t (cons (cons ($ fields 0) line) ans))))))
@c 
@c ;;; Prefix line numbers to the input stream.
@c (awk (read-line) (line) lineno ()
@c 
@c (#t (format #t "~d:\t~a~%" lineno line)))


@section Backwards compatibility
@c 
@c Previous scsh releases provided an awk form with a different syntax, designedaround regular expressions written in Posix notation as strings, rather than
@c SREs.
@c 
@c This form is still available in a separate module for old code. It'll be docu-mented in the next release of this manual. Dig around in the sources for it.

@node Concurrent system programming
@chapter Concurrent system programming

@c The Scheme Shell provides the user with support for concurrent programming.The interface consists of several parts:
@c 
@c * The thread system
@c 
@c * Synchronization vehicles
@c 
@c * Process state abstractions
@c Whereas the user deals with threads and synchronization explicitly, the processstate abstractions are built into the rest of the system, almost transparent for the user. Section @ref{9.5} describes the interaction between process state and threads.
@c 
@section Threads
@c 
@c A thread can be thought of as a procedure that can run independently of andconcurrent to the rest of the system. The calling procedure fires the thread up
@c and forgets about it.
@c 
@c The current thread interface is completely taken from Scheme 48. This doc-umentation is an extension of the file
@c 
@c doc/threads.txt.
@c 
@c The thread structure is named threads, it has to be opened explicitly.
@c 
@c (spawn thunk [name]) -! undefined procedure
@c 
@c Create and schedule a new thread that will execute thunk, a procedure withno arguments. Note that Scsh's
@c 
@c spawn does not return a reference to a threadobject. The optional argument name is used when printing the thread.
@c 
@c 156
@c 
@c The new thread will not inherit the values for the process state from its par-ent, see the procedure
@c 
@c fork-thread in Section @ref{9.5} for a way to create a threadwith semantics similar to process forking.
@c 
@c (relinquish-timeslice) -! undefined procedure
@c 
@c Let other threads run for a while.
@c 
@c (sleep time) -! undefined procedure
@c 
@c Puts the current thread into sleep for time milliseconds. The time at whichthe thread is run again may be longer of course.
@c 
@c (terminate-current-thread) -! does-not-return procedure
@c 
@c Kill the current thread.
@c Mainly for debugging purposes, there is also an interface to the internalrepresentation of thread objects:
@c 
@c (current-thread) -! thread-object procedure
@c 
@c Return the object to which the current thread internally corresponds. Notethat this procedure is exported by the package
@c 
@c threads-internal only.
@c 
@c (thread? thing) -! boolean procedure
@c 
@c Returns true iff thing is a thread object.
@c 
@c (thread-name thread) -! name procedure
@c 
@c Name corresponds to the second parameter that was given to spawn whenthread was created.
@c 
@c (thread-uid thread) -! integer procedure
@c 
@c Returns a unique identifier for the current thread.
@c 
@section Locks
@c 
@c Locks are a simple mean for mutual exclusion. They implement a concept com-monly known as semaphores. Threads can obtain and release locks. If a thread
@c tries to obtain a lock which is held by another thread, the first thread is blocked.To access the following procedures, you must open the structure
@c 
@c locks.
@c 
@c (make-lock) -! lock procedure
@c 
@c Creates a lock.
@c 
@c (lock? thing) -! boolean procedure
@c 
@c Returns true iff thing is a lock.
@c 
@c (obtain-lock lock) -! undefined procedure
@c 
@c Obtain lock. Causes the thread to block if the lock is held by a thread.
@c 
@c 157
@c 
@c (maybe-obtain-lock lock) -! boolean procedure
@c 
@c Tries to obtain lock, but returns false if the lock cannot be obtained.
@c 
@c (release-lock lock) -! boolean procedure
@c 
@c Releases lock. Returns true if the lock immediately got a new owner, falseotherwise.
@c 
@c (lock-owner-uid lock) -! integer procedure
@c 
@c Returns the uid of the thread that currently holds lock or false if the lock isfree.
@c 
@section Placeholders
@c 
@c Placeholders combine synchronization with value delivery. They can be thoughtof as special variables. After creation the value of the placeholder is undefined.
@c If a thread tries to read the placeholders value this thread is blocked. Multi-ple threads are allowed to block on a single placeholder. They will continue
@c running after another thread sets the value of the placeholder. Now all read-ing threads receive the value and continue executing. Setting a placeholder to
@c two different values causes an error. The structure placeholders features thefollowing procedures:
@c 
@c (make-placeholder) -! placeholder procedure
@c 
@c Creates a new placeholder.
@c 
@c (placeholder? thing) -! boolean procedure
@c 
@c Returns true iff thing is a placeholder.
@c 
@c (placeholder-set! placeholder value) -! undefined procedure
@c 
@c Sets the placeholders value to value. If the placeholder is already set to adifferent value an exception is risen.
@c 
@c (placeholder-value placeholder) -! value procedure
@c 
@c Returns the value of the placeholder. If the placeholder is yet unset, thecurrent thread is blocked until another thread sets the value by means of
@c 
@c placeholder-set!.
@c 
@section The event interface to interrupts
@c 
@c Scsh provides an synchronous interface to the asynchronous signals deliveredby the operation system1. The key element in this system is an object called
@c 
@c 1 Olin's paper "Automatic management of operation-system resources" describes this system in
@c detail.
@c 
@c 158
@c 
@c sigevent which corresponds to the single occurrence of a signal. A sigevent hastwo fields: the Unix signal that occurred and a pointer to the sigevent that
@c happened or will happen. That is, events are kept in a linked list in increasing-time order. Scsh's structure
@c 
@c sigevents provides various procedures to accessthis list:
@c 
@c (most-recent-sigevent) -! sigevent procedure
@c 
@c Returns the most recent sigevent -- the head of the sigevent list.
@c 
@c (sigevent? object) -! boolean procedure
@c 
@c The predicate for sigevents.
@c 
@c (next-sigevent pre-event type) -! event procedure
@c 
@c Returns the next sigevent of type type after sigevent pre-event. If no suchevent exists, the procedure blocks.
@c 
@c (next-sigevent-set pre-event set) -! event procedure
@c 
@c Returns the next sigevent whose type is in set after pre-event. If no suchevent exists, the procdure blocks.
@c 
@c (next-sigevent/no-wait pre-event type) -! event or #f procedure
@c 
@c Same as next-sigevent, but returns #fif no appropriate event exists.
@c 
@c (next-sigevent-set/no-wait set pre-event) -! event or #f procedure
@c 
@c Same as next-sigevent-set, but returns #fif no appropriate event exists.
@c As a small example, consider this piece of code that toggles the variable
@c state by USR1 and USR2:
@c 
@c (define state #t)
@c (let lp ((sigevent (most-recent-sigevent)))
@c 
@c (let ((next (next-sigevent sigevent interrupt/usr1)))
@c 
@c (set! state #f)
@c (let ((next (next-sigevent next interrupt/usr2)))
@c 
@c (set! state #t)
@c (lp next))))
@c 
@c Warning: The current version of scsh also defines asynchronous handlersfor interrupts (See Section @ref{3.9}). The default action of some of these handlers is
@c to terminate the process in which case you will most likely not see an effect ofthe synchronous event interface described here. It is therefore recommended to
@c disable the corresponding interrupt handler using (set-interrupt-handler
@c interrupt #f).
@c 
@c 159

@section Interaction between threads and process state
@c 
@c In Unix, a number of resources are global to the process: signal handlers, work-ing directory, umask, environment, user and group ids. Modular programming is difficult in the context of this global state and for concurrent program-ming things get even worse. Section @ref{9.4} presents how scsh turns the global,
@c asynchronous signals handlers into modular, synchronous sigevents. Concur-rent programming also benefit from sigevents as every thread may chase down
@c the sigevent chain separately.
@c 
@c Scsh treats the working directory, umask, environment, and the effectiveuser/group ID as thread-local resources. The initial value of the resources is
@c 
@c determined by the way a thread is started: spawn assigns the initial valueswhereas
@c 
@c fork-thread adopts the values of its parent. Here is a detailed de-scription of the whole facility:
@c 
@c * The procedures to access and modify the resources remain as describedin the previous chapters (
@c 
@c cwd and chdir, umask and set-umask, getenvand
@c putenv).
@c 
@c * Every thread receives its own copy of each resource.
@c 
@c * If spawn is used to start a new thread, the values of the resources are thesame as they where at the start of scsh.
@c 
@c * The procedure
@c (fork-thread thunk) -! undefined procedure
@c 
@c from the structure thread-fluids starts a thread which inherits the val-ues of all resources from its parent. This behaviour is similar to what
@c 
@c happens at process forking.
@c 
@c * The actual process state is updated only when necessary, i.e. on access ormodification but not on context switch from one thread to another.
@c 
@c (spoon thunk) -! undefined procedure
@c 
@c This is just an alias for fork-thread suggested by Alan Bawden.
@c For user and group identities arbitrary changing is not possible. There-fore they remain global process state: If a thread changes one of these values, all other threads see the new value. Consequently, scsh does not provide
@c with-uid and friends.

@node Miscellaneous routines
@chapter Miscellaneous routines

@section Integer bitwise ops
@c 
@c (arithmetic-shift i j) -! integer procedure
@c (bitwise-and i j) -! integer procedure
@c (bitwise-ior i j) -! integer procedure
@c (bitwise-not i) -! integer procedure
@c (bitwise-xor i j) -! integer procedure
@c 
@c These operations operate on integers representing semi-infinite bitstrings, using a 2's-complement encoding.
@c 
@c arithmetic-shift shifts i by j bits. A left shift is j > 0; a right shift is
@c j < 0.
@c 
@section Password encryption
@c 
@c (crypt key salt) -! encrypted value procedure
@c Decrypts key by directly calling the crypt function using salt to perturb thehashing algorithm. Salt must be a two-character string consisting of digits,
@c 
@c alphabetic characters, "." or "\". The length of key may be at most eight.
@c 
@section Dot-Locking
@c 
@c Section @ref{3.2.8} already points out that @acronym{POSIX}'s file locks are almost useless inpractice. To bypass this restriction other advisory locking mechanisms, based
@c only on standard file operations, where invented. One of them is the so-called
@c 
@c 161
@c 
@c dot-locking scheme where the lock of file-name is represented by the file file-name
@c 
@c .lock. Care is taken that only one process may generate the lock for agiven file.
@c 
@c Here is scsh's interface to dot-locking:
@c (obtain-dot-lock file-name [interval retry-number stale-time]) -! boolean procedure
@c 
@c Tries to obtain the lock for file-name. If the file is already locked, the threadsleeps for interval seconds (default is 1) before it retries. If the lock cannot
@c 
@c be obtained after retry-number attempts, the procedure returns #f, other-wise
@c 
@c #t. The default value of retry-number is #f which corresponds to aninfinite number of retires.
@c 
@c If stale-time is non-#f, it specifies the minimum age a lock may have(in seconds) before it is considered stale.
@c 
@c Obtain-dot-lock attempts todelete stale locks. If it was succcessful obtaining a lock after breaking
@c 
@c it, obtain-dot-lock returns broken. If stale-time is #f, obtain-dot-locknever considers a lock stale. The default for stale-time is 300.
@c 
@c Note that it is possible that obtain-dot-lock breaks a lock but never-theless fails to obtain it otherwise. If it is necessary to handle this case
@c specially, use break-dot-lock directly (see below) rather than specifyinga non#f stale-time
@c 
@c (break-dot-lock file-name) -! undefined procedure
@c 
@c Breaks the lock for file-name if one exists. Note that breaking a lockdoes not imply a subsequent
@c 
@c obtain-dot-lock will succeed, as an-other party may have acquired the lock between
@c 
@c break-dot-lock and
@c obtain-dot-lock.
@c 
@c (release-dot-lock file-name) -! boolean procedure
@c 
@c Releases the lock for file-name. On success, release-dot-lock returns #t,otherwise
@c 
@c #f. Note that this procedure can also be used to break the lockfor file-name.
@c 
@c (with-dot-lock* file-name thunk) -! value(s) of thunk procedure
@c (with-dot-lock file-name body . . . ) -! value(s) of body syntax
@c 
@c The procedure with-dot-lock* obtains the requested lock, and then calls
@c (thunk). When thunk returns, the lock is released. A non-local exit (e.g.,throwing to a saved continuation or raising an exception) also causes the
@c 
@c lock to be released.
@c After a normal return from thunk, its return values are returned by
@c with-dot-lock*. The with-dot-lock special form is equivalent syntac-tic sugar.
@c 
@c 162
@c 
@section Syslog facility
@c 
@c (Note: the functionality presented in this section is still somewhat experimentaland thus subject to interface changes.)
@c 
@c The procedures in this section provide access to the 4.2BSD syslog facil-ity present in most @acronym{POSIX} systems. The functionality is in a structure called
@c syslog. There's an additional structure syslog-channels documented below.The scsh interface to the syslog facility differs significantly from that of the
@c Unix library functionality in order to support multiple simultaneous connec-tions to the syslog facility.
@c 
@c Log messages carry a variety of parameters beside the text of the messageitself, namely a set of options controlling the output format and destination,
@c the facility identifying the class of programs the message is coming from, anidentifier specifying the conrete program, and the level identifying the importance of the message. Moreover, a log mask can prevent messages at certainlevels to be actually sent to the syslog daemon.
@c 
@c Log options
@c A log option specifies details of the I/O behavior of the syslog facility. A syslogoption is an element of a finite type (see the Scheme 48 manual) constructed by
@c the syslog-option macro. The syslog facility works with sets of options whichare represented as enum sets (see the Scheme 48 manual).
@c 
@c (syslog-option option-name) -! option syntax
@c (syslog-option? x) -! boolean procedure
@c (make-syslog-options list) -! options procedure
@c (syslog-options option-name . . . ) -! options syntax
@c (syslog-options? x) -! boolean procedure
@c 
@c Syslog-option constructs a log option from the name of an option. (Thepossible names are listed below.)
@c 
@c Syslog-option? is a predicate for logoptions. Options are comparable using
@c 
@c eq?. Make-syslog-options con-structs a set of options from a list of options.
@c 
@c Syslog-options is a macrowhich expands into an expression returning a set of options from names.
@c 
@c Syslog-options? is a predicate for sets of options.
@c Here is a list of possible names of syslog options:
@c 
@c console If syslog cannot pass the message to syslogd it will attempt to writethe message to the console.
@c 
@c 163
@c 
@c delay Delay opening the connection to syslogd immediately until the firstmessage is logged.
@c no-delay Open the connection to syslogd immediately. Normally the open isdelayed until the first message is logged. Useful for programs that need
@c 
@c to manage the order in which file descriptors are allocated.
@c NOTA BENE: The delay and no-delay options are included for com-pleteness, but do not have the expected effect in the present Scheme interface: Because the Scheme interface has to multiplex multiple simulta-neous connections to the syslog facility over a single one, open and close
@c operations on that facility happen at unpredictable times.
@c log-pid Log the process id with each message: useful for identifying instanti-ations of daemons.
@c 
@c Log facilities
@c A log facility identifies the originator of a log message from a finite set knownto the system. Each originator is identified by a name:
@c 
@c (syslog-facility facility-name) -! facility syntax
@c (syslog-facility? x) -! boolean procedure
@c 
@c Syslog-facility is macro that expands into an expression returning afacility for a given name.
@c 
@c Syslog-facility? is a predicate for facilities.Facilities are comparable via
@c 
@c eq?.
@c 
@c Here is a list of possible names of syslog facilities:
@c 
@c authorization The authorization system: login, su, getty, etc.
@c cron The cron daemon.
@c daemon System daemons, such as routed, that are not provided for explicitlyby other facilities.
@c 
@c kernel Messages generated by the kernel.
@c lpr The line printer spooling system: lpr, lpc, lpd, etc.
@c mail The mail system.
@c news The network news system.
@c user Messages generated by random user processes.
@c uucp The uucp system.
@c local0 local1 local2 local3 local4 local5 local6 local7 Reserved for lo-cal use.
@c 
@c 164
@c 
@c Log levels
@c A log level identifies the importance of a message from a fixed set of possiblelevels.
@c 
@c (syslog-level level-name) -! level syntax
@c (syslog-level? x) -! boolean procedure
@c 
@c Syslog-level is macro that expands into an expression returning a facil-ity for a given name.
@c 
@c Syslog-level? is a predicate for facilities. Levelsare comparable via
@c eq?.
@c 
@c Here is a list of possible names of syslog levels:
@c 
@c emergency A panic condition. This is normally broadcast to all users.
@c alert A condition that should be corrected immediately, such as a corruptedsystem database.
@c 
@c critical Critical conditions, e.g., hard device errors.
@c error Errors.
@c warning Warning messages.
@c notice Conditions that are not error conditions, but should possibly be han-dled specially.
@c 
@c info Informational messages.
@c debug Messages that contain information normally of use only when debug-ging a program.
@c 
@c Log masks
@c A log masks can mask out log messages at a set of levels. A log mask is anenum set of log levels.
@c 
@c (make-syslog-mask list) -! mask procedure
@c (syslog-mask level-name . . . ) -! mask syntax
@c syslog-mask-all mask
@c (syslog-mask-upto level) -! mask procedure
@c (syslog-mask? x) -! boolean procedure
@c 
@c Make-syslog-mask constructs a mask from a list of levels. Syslog-mask isa macro which constructs a mask from names of levels.
@c 
@c Syslog-mask-allis a predefined log mask containing all levels.
@c Syslog-mask-upto returnsa mask consisting of all levels up to and including a certain level, starting
@c 
@c with emergency.
@c 
@c 165
@c 
@c Logging
@c Scheme 48 dynamically maintains implicit connections to the syslog facilityspecifying a current identifier, current options, a current facility and a current
@c log mask. This implicit connection is held in a thread fluid (see Section @ref{9.5}).Hence, every thread maintains it own implicit connection to syslog. Note that
@c the connection is not implicitly preserved across a spawn, but it is preservedacross a
@c 
@c fork-thread:
@c 
@c (with-syslog-destination string options facility mask thunk) -! value procedure
@c (set-syslog-destination! string options facility mask) -! undefined procedure
@c 
@c With-syslog-destination dynamically binds parameters of the im-plicit connection to the syslog facility and runs thunk within those
@c 
@c parameter bindings, returning what thunk returns. Each of the pa-rameters may be
@c 
@c #f in which case the previous values will be used.
@c Set-syslog-destination! sets the parameters of the implicit connectionof the current thread.
@c 
@c (syslog level message) -! undefined procedure
@c (syslog level message [string options syslog-facility]) -! undefined procedure
@c 
@c Syslog actually logs a message. Each of the parameters of the implicitconnection (except for the log mask) can be explicitly specified as well
@c 
@c for the current call to syslog, overriding the parameters of the channel.The parameters revert to their original values after the call.
@c 
@c Syslog channels
@c The syslog-channels structure allows direct manipulation of syslog channels,the objects that represent connections to the syslog facility. Note that it is not
@c necessary to explicitly open a syslog channel to do logging.
@c (open-syslog-channel string options facility mask) -! channel procedure
@c (close-syslog-channel channel) -! undefined procedure
@c (syslog level message channel) -! undefined procedure
@c 
@c Open-syslog-channel and close-syslog-channel create and destroy aconnection to the syslog facility, respectively. The specified form of calling syslog logs to the specified channel.
@c 
@c 166
@c 
@section MD5 interface
@c 
@c Scsh provides a direct interface to the MD5 functions to compute the "finger-print" or "message digest" of a file or string. It uses the C library written by
@c Colin Plum.
@c (md5-digest-for-string string) -! md5-digest procedure
@c 
@c Calculates the MD5 digest for the given string.
@c 
@c (md5-digest-for-port port [buffer-size]) -! md5-digest procedure
@c 
@c Reads the contents of the port and calculates the MD5 digest for it.The optional argument buffer-size determines the size of the port's input
@c 
@c buffer in bytes. It defaults to 1024 bytes.
@c (md5-digest? thing) -! boolean procedure
@c 
@c The type predicate for MD5 digests: md5-digest? returns true if and onlyif thing is a MD5 digest.
@c 
@c (md5-digest->number md5-digest) -! number procedure
@c 
@c Returns the number corresponding to the MD5 digest.
@c 
@c (number->md5-digest number) -! md5-digest procedure
@c 
@c Creates a MD5 digest from a number.
@c 
@c (make-md5-context) -! md5-context procedure
@c (md5-context? thing) -! boolean procedure
@c (update-md5-context! md5-context string) -! undefined procedure
@c (md5-context->md5-digest md5-context) -! md5-digest procedure
@c 
@c These procedures provide a low-level interface to the library. Amd5-context stores the state of a MD5 computation, it is created by
@c 
@c make-md5-context, its type predicate is md5-context?. The pro-cedure
@c 
@c update-md5-context! extends the md5-context by the givenstring. Finally,
@c 
@c md5-context->md5-digest returns the md5-digest for themd5-context. With these procedures it is possible to incrementally add
@c 
@c strings to a md5-context before computing the digest.
@c 
@section Configuration variables
@c 
@c This section describes procedures to access the configuration parameters usedto compile scsh and flags needed to build C extensions for scsh.
@c 
@c (host) -! string procedure
@c 
@c 167
@c 
@c (machine) -! string procedure
@c (vendor) -! string procedure
@c (os) -! string procedure
@c 
@c These procedures return the description of the host, scsh was built on, asdetermined by the script
@c 
@c config.guess.
@c 
@c (prefix) -! string procedure
@c (exec-prefix) -! string procedure
@c (bin-dir) -! string procedure
@c (lib-dir) -! string procedure
@c (include-dir) -! string procedure
@c (man-dir) -! string procedure
@c 
@c These procedures return the various directories of the scsh installation.
@c 
@c (lib-dirs-list) -! symbol list procedure
@c 
@c Returns the default list of library directories. See Section @ref{11.1.5} for moreinformation about the library search facility.
@c 
@c (libs) -! string procedure
@c (defs) -! string procedure
@c (cflags) -! string procedure
@c (cppflags) -! string procedure
@c (ldflags) -! string procedure
@c 
@c The values returned by these procedures correspond to the values makeused to compile scsh's C files.
@c 
@c (compiler-flags) -! string procedure
@c 
@c The procedure compiler-flags returns flags suitable for running the C com-piler when compiling a C file that uses scsh's foreign function interface.
@c 
@c (linker-flags) -! string procedure
@c 
@c Scsh also comes as a library that can be linked into other programs. Theprocedure linker-flags returns the appropriate flags to link the scsh library to another program.

@node Running scsh
@chapter Running scsh

@c Scsh is currently implemented on top of Scheme 48, a freely-available Schemeimplementation written by Jonathan Rees and Richard Kelsey. Scheme 48 uses
@c a byte-code interpreter for good code density, portability and medium effi-ciency. It is R5RS. It also has a module system designed by Jonathan Rees.
@c 
@c Scsh's design is not Scheme 48 specific, although the current implementa-tion is necessarily so. Scsh is intended to be implementable in other Scheme
@c implementations. The Scheme 48 virtual machine that scsh uses is a speciallymodified version; standard Scheme 48 virtual machines cannot be used with
@c the scsh heap image.
@c 
@c There are several different ways to invoke scsh. You can run it as aninteractive Scheme system, with a standard read-eval-print interaction loop.
@c 
@c Scsh can also be invoked as the interpreter for a shell script by putting a"
@c 
@c #!/usr/local/bin/scsh -s" line at the top of the shell script.
@c 
@c Descending a level, it is also possible to invoke the underlying virtual ma-chine byte-code interpreter directly on dumped heap images. Scsh programs
@c 
@c can be pre-compiled to byte-codes and dumped as raw, binary heap images.Writing heap images strips out unused portions of the scsh runtime (such as
@c the compiler, the debugger, and other complex subsystems), reducing memorydemands and saving loading and compilation times. The heap image format
@c allows for an initial #!/usr/local/lib/scsh/scshvm trigger on the first lineof the image, making heap images directly executable as another kind of shell
@c script.
@c 
@c Finally, scsh's static linker system allows dumped heap images to be com-piled to a raw Unix a.out(5) format, which can be linked into the text section of
@c 
@c the vm binary. This produces a true Unix executable binary file. Since the bytecodes comprising the program are in the file's text section, they are not traced
@c or copied by the garbage collector, do not occupy space in the vm's heap, and
@c 
@c 169
@c 
@c do not need to be loaded and linked at startup time. This reduces the program'sstartup time, memory requirements, and paging overhead.
@c 
@c This chapter will cover these various ways of invoking scsh programs.
@c 
@section Scsh command-line switches
@c 
@c When the scsh top-level starts up, it scans the command line for switches thatcontrol its behaviour. These arguments are removed from the command line;
@c the remaining arguments can be accessed as the value of the scsh variable
@c command-line-arguments.
@c 
@c @subsection Scripts and programs
@c 
@c The scsh command-line switches provide sophisticated support for the authorsof shell scripts and programs; they also allow the programmer to write programs that use the Scheme 48 module system.
@c 
@c There is a difference between a script, which performs its action as it isloaded, and a program, which is loaded/linked, and then performs its action
@c 
@c by having control transferred to an entry point (e.g., the main() function in Cprograms) that was defined by the load/link operation.
@c 
@c A script, by the above definition, cannot be compiled by the simple mecha-nism of loading it into a scsh process and dumping out a heap image--it executes as it loads. It does not have a top-level main()-type entry point.
@c 
@c It is more flexible and useful to implement a system as a program than as ascript. Programs can be compiled straightforwardly; they can also export procedural interfaces for use by other Scheme packages. However, scsh supportsboth the script and the program style of programming.
@c 
@c @subsection Inserting interpreter triggers into scsh programs
@c 
@c When Unix tries to execute an executable file whose first 16 bits are the charac-ter pair "
@c 
@c #!", it treats the file not as machine-code to be directly executed by thenative processor, but as source code to be executed by some interpreter. The
@c 
@c interpreter to use is specified immediately after the "#!" sequence on the firstline of the source file (along with one optional initial argument). The kernel
@c reads in the name of the interpreter, and executes that instead. The interpreteris passed the source filename as its first argument, with the original arguments
@c following. Consult the Unix man page for the exec system call for more infor-mation.
@c 
@c 170
@c 
@c Scsh allows Scheme programs to have these triggers placed on their firstline. Scsh treats the character sequence "
@c 
@c #!" as a block-comment sequence,1and skips all following characters until it reads the comment-terminating
@c 
@c sequence newline/exclamation-point/sharp-sign/newline (i.e., the sequence"
@c 
@c !#" occurring on its own line).
@c 
@c In this way, the programmer can arrange for an initial
@c 
@c #!/usr/local/bin/scsh -s
@c !#
@c 
@c header appearing in a Scheme program to be ignored when the program isloaded into scsh.
@c 
@c @subsection Module system
@c 
@c Scsh uses the Scheme 48 module system, which defines packages, structures, andinterfaces.
@c 
@c Package A package is an environment--that is, a set of variable/value bind-ings. You can evaluate Scheme forms inside a package, or load a file into a
@c 
@c package. Packages export sets of bindings; these sets are called structures.
@c Structure A structure is a named view on a package--a set of bindings. Otherpackages can open the structure, importing its bindings into their environment. Packages can provide more than one structure, revealing differentportions of the package's environment.
@c 
@c Interface An interface is the "type" of a structure. An interface is the set ofnames exported by a structure. These names can also be marked with
@c 
@c other static information (e.g., advisory type declarations, or syntax infor-mation).
@c 
@c More information on the the Scheme 48 module system can be found in the file
@c module.ps in the doc directory of the Scheme 48 and scsh releases.
@c 
@c Programming Scheme with a module system is different from program-ming in older Scheme implementations, and the associated development problems are consequently different. In Schemes that lack modular abstractionmechanisms, everything is accessible; the major problem is preventing namespace conflicts. In Scheme 48, name-space conflicts vanish; the major problemis that not all bindings are accessible from every place. It takes a little extra
@c work to specify what packages export which values.
@c 
@c 1 Why a block-comment instead of an end-of-line delimited comment? See the section on metaargs.
@c 
@c 171
@c 
@c It may take you a little while to get used to the new style of program devel-opment. Although scsh can be used without referring to the module system at
@c all, we recommend taking the time to learn and use it. The effort will pay offin the construction of modular, factorable programs.
@c 
@c Module warning
@c Most scsh programs will need to import from the scheme structure as well asfrom the
@c 
@c scsh structure. However, putting both of these structures in the same
@c open clause is a bad idea because the structures scheme and scsh export somenames of I/O functions in common but with different definitions. The current
@c 
@c implementation of the module system does not recognize this as an error butsilently overwrites the exports of one structure with the exports of the other. If
@c the scheme structure overwrites the exports of the scsh structures the programwill access the R
@c 
@c 5RS definitions of the I/O functions which is not what you
@c 
@c want.
@c 
@c Previous versions of this manual suggested to list scheme and scsh in a spe-cific order in the
@c 
@c open clause of a structure to ensure that the definitions from
@c scsh overwrite the ones from scheme. This approach is error-prone and frag-ile: A simple change in the implementation of the module system will render
@c 
@c thousands of programs useless. Starting with release 0.6.3 scsh provides a bet-ter means to deal with this problem: the structure
@c 
@c scheme-with-scsh providesall the exports of the modules
@c scheme and scsh but exports the right denota-tions for the I/O functions in question. To make a long story short:
@c 
@c Scsh programs should open the structure scheme-with-scsh if they needaccess to the exports of
@c 
@c scheme and scsh.
@c 
@c For programs which should run in versions of scsh prior to release 0.6.3,programmers should make sure to always put the
@c 
@c scsh reference first.
@c 
@c @subsection Library directories search facility
@c 
@c Scsh's command line switches allow loading of code not present in the scriptfile or the heap image at startup. To relief the user from specifying full path
@c names and to improve flexibility, scsh offers the library directories path list.This list contains directories in which scsh searches automatically for a file
@c name argument of the -ll or -le switch.
@c 
@c This section describes the programmatic interface to the library directoriessearch facility. In addition, various command line switches for scsh modify
@c 
@c the library directories path list. Section @ref{11.1.5} describes these switches and theswitches to actually load files.
@c 
@c 172
@c 
@c Another way to change the library directories path list is the environmentvariable
@c 
@c $SCSH LIB DIRS. If this variable is set, scsh uses it to set library direc-tories path list. The value of this environment variable is treated as a sequence
@c 
@c of s-expressions, which are "read" from the string:
@c 
@c * A string is treated as a directory,
@c 
@c * #f is replaced with the default list of directories.
@c 
@c A $SCSH LIB DIRS assignment of this form
@c SCSH_LIB_DIRS='"." "/usr/contrib/lib/scsh/" #f "/home/shivers/lib/scsh"'
@c would produce this list of strings for the library-directories list:
@c 
@c ("." "/usr/contrib/lib/scsh/"
@c "/usr/local/lib/scsh/modules/"
@c "/home/shivers/lib/scsh")
@c 
@c It is a startup error if reading the $SCSH LIB DIRS environment variable causesa read error, or produces a value that isn't a list of strings or
@c 
@c #f.
@c 
@c default-lib-dirs string list
@c 
@c The default list of library directories. The original value of this variableis
@c 
@c ("$prefix/lib/scsh/modules/"). starting with version 0.6.5 the op-tion
@c 
@c --with-lib-dirs-list of the configure script changes for a newinstallation.
@c 
@c (find-library-file file lib-dirs script-file) -! undefined procedure
@c 
@c Searches the list of library directories lib-dirs for file and returns the fullpath. The variable script-file is used to resolve references to the directory
@c 
@c of the current script.
@c When searching for a directory containing a given library module, nonex-istent or read-protected directories are silently ignored; it is not an error
@c 
@c to have them in the library-directories list.
@c Directory search can be recursive. A directory name that ends with aslash is recursively searched.
@c 
@c (lib-dirs) -! string list procedure
@c 
@c Returns the current library directories path list.
@c 
@c (lib-dirs-prepend-script-dir!) -! undefined procedure
@c (lib-dirs-append-script-dir!) -! undefined procedure
@c 
@c 173
@c 
@c Add the directory of the current script file to the beginning or end of thelibrary-directories path list, respectively.
@c (lib-dirs-append! dir) -! undefined procedure
@c (lib-dirs-prepend! dir) -! undefined procedure
@c 
@c Add directory lib-dir to the beginning or end of the library-directories pathlist, respectively.
@c 
@c (clear-lib-dirs!) -! undefined procedure
@c 
@c Set the library-directories path list to the empty list.
@c 
@c (reset-lib-dirs!) -! undefined procedure
@c 
@c Set the library-directories path list to system default, i.e. to the value ofdefault-lib-dirs.
@c 
@c @subsection Switches
@c 
@c The scsh top-level takes command-line switches in the following format:
@c 
@c scsh [meta-arg] [switchi ...] [end-option arg1 ... argn]
@c where
@c 
@c 174
@c 
@c meta-arg: \ script-file-name
@c switch: -e entry-point Specify top-level entry-point.
@c 
@c -o structure Open structure in current package.
@c -m structure Switch to package.
@c -n new-package Switch to new package.
@c 
@c -lm module-file-name Load module into config package.
@c -le exec-file-name Load module into exec package.
@c -l file-name Load file into current package.
@c -ll module-file-name As in -lm, but search the library path list.
@c -lel exec-file-name As in -le, but search the library path list.
@c +lp dir Add dir to front of library path list.
@c lp+ dir Add dir to end of library path list.
@c +lpe dir +lp, with env var and ~user expansion.
@c lpe+ dir lp+, with env var and ~user expansion.
@c +lpsd Add script-file's dir to front of path list.
@c lpsd+ Add script-file's dir to end of path list.
@c -lp-clear Clear library path list to ().
@c -lp-default Reset library path list to system default.
@c -ds Do script.
@c -dm Do script module.
@c -de Do script exec.
@c 
@c end-option: -s script
@c 
@c -sfd num
@c -c exp
@c --
@c 
@c These command-line switches essentially provide a little linker language forlinking a shell script or a program together with Scheme 48 modules or Scheme 48 exec programs 2. The command-line processor serially opens structures andloads code into a given package. Switches that side-effect a package operate
@c on a particular "current" package; there are switches to change this package.(These switches provide functionality equivalent to the interactive
@c 
@c ,open ,load
@c ,in and ,new commands.) Except where indicated, switches specify actionsthat are executed in a left-to-right order. The initial current package is the user
@c 
@c package, which is completely empty and opens (imports the bindings of) theR5RS and scsh structures.
@c 
@c If the Scheme process is started up in an interactive mode, then the cur-rent package in force at the end of switch scanning is the one inside which the
@c 2See the Section "Command programs" in the Scheme 48 manual for a description of the exec
@c language.
@c 
@c 175
@c 
@c interactive read-eval-print loop is started.
@c 
@c The command-line switch processor works in two passes: it first parses theswitches, building a list of actions to perform, then the actions are performed
@c 
@c serially. The switch list is terminated by one of the end-option switches. Thearg
@c 
@c i arguments occurring after an end-option switch are passed to the scsh pro-gram as the value of command-line-arguments and the tail of the list returned
@c 
@c by (command-line). That is, an end-option switch separates switches that con-trol the scsh "machine" from the actual arguments being passed to the scsh
@c 
@c program that runs on that machine.
@c 
@c The following switches and end options are defined:
@c 
@c * -o structOpen the structure in the current package.
@c 
@c * -n packageMake and enter a new package. The package has an associated structure
@c 
@c named package with an empty export list. If package is the string "#f", thenew package is anonmyous, with no associated named structure.
@c 
@c The new package initially opens no other structures, not even the R5RSbindings. You must follow a "
@c 
@c -n foo" switch with "-o scheme" to accessthe standard identifiers such as
@c 
@c car and define.
@c 
@c * -m structChange the current package to the package underlying structure struct.
@c 
@c (The -m stands for "module.")
@c 
@c * -lm module-file-nameLoad the specified file into scsh's config package -- the file must contain
@c 
@c source written in the Scheme 48 module language ("load module"). Doesnot alter the current package.
@c 
@c * -le exec-file-nameLoad the specified file into scsh's exec package -- the file must contain
@c 
@c source written in the Scheme 48 exec language ("load exec"). Does notalter the current package.
@c 
@c * -l file-nameLoad the specified file into the current package.
@c 
@c * -c expEvaluate expression exp in the current package and exit. This is called
@c 
@c -c after a common shell convention (see sh and csh). The expression isevaluated in the the current package (and hence is affected by
@c 
@c -m's and
@c -n's.)
@c 
@c 176
@c 
@c When the scsh top-level constructs the scsh command-line in this case, ittakes
@c 
@c "scsh" to be the program name. This switch terminates argumentscanning; following args become the tail of the command-line list.
@c 
@c * -e entry-pointSpecify an entry point for a program. The entry-point is a variable that
@c 
@c is taken from the current package in force at the end of switch evalua-tion. The entry point does not have to be exported by the package in a
@c structure; it can be internal to the package. The top level passes control tothe entry point by applying it to the command-line list (so programs executing in private packages can reference their command-line argumentswithout opening the
@c 
@c scsh package to access the (command-line) proce-dure). Note that, like the list returned by the
@c 
@c (command-line) procedure,the list passed to the entry point includes the name of the program being
@c 
@c executed (as the first element of the list), not just the arguments to theprogram.
@c 
@c A -e switch can occur anywhere in the switch list, but it is the last actionperformed by switch scanning if it occurs. (We violate ordering here as
@c the shell-script #! mechanism prevents you from putting the -e switchlast, where it belongs.)
@c 
@c * -s scriptSpecify a file to load. A
@c 
@c -ds (do-script), -dm (do-module), or -de (do-exec)switch occurring earlier in the switch list gives the place where the script
@c 
@c should be loaded. If there is no -ds, -dm, or -de switch, then the script isloaded at the end of switch scanning, into the module that is current at
@c the end of switch scanning.
@c We use the -ds switch to violate left-to-right switch execution order as the
@c -s switch is required to be last (because of the #! machinery), independentof when/where in the switch-processing order it should be loaded.
@c 
@c When the scsh top-level constructs the scsh command-line in this case,it takes script to be the program name. This switch terminates switch
@c parsing; following args are ignored by the switch-scanner and are passedthrough to the program as the tail of the command-line list.
@c 
@c * -sfd numLoads the script from file descriptor num. This switch is like the
@c 
@c -sswitch, except that the script is loaded from one of the process' open input file descriptors. For example, to have the script loaded from standardinput, specify
@c 
@c -sfd 0.
@c 
@c * --Terminate argument scanning and start up scsh in interactive mode.
@c 
@c If the argument list just runs out, without either a terminating -s or
@c 
@c 177
@c 
@c -- arg, then scsh also starts up in interactive mode, with an empty
@c command-line-arguments list (for example, simply entering scsh at ashell prompt with no args at all).
@c 
@c When the scsh top-level constructs the scsh command-line in this case,it takes
@c 
@c "scsh" to be the program name. This switch terminates switchparsing; following args are ignored by the switch-scanner and are passed
@c 
@c through to the program as the tail of the command-line list.
@c 
@c * -dsSpecify when to load the script ("do-script"). If this switch occurs, the
@c 
@c switch list must be terminated by a -s script switch. The script is loadedinto the package that is current at the
@c 
@c -ds switch.
@c 
@c * -dmAs above, but the current module is ignored. The script is loaded into the
@c 
@c config package ("do-module"), and hence must be written in the Scheme48 module language. This switch doesn't affect the current module--
@c after executing this switch, the current module is the same as as it wasbefore.
@c 
@c This switch is provided to make it easy to write shell scripts in the Scheme48 module language.
@c 
@c * -deAs above, but the current module is ignored. The script is loaded into the
@c 
@c exec package ("do-exec"), and hence must be written in the Scheme 48exec language.
@c 
@c This switch is provided to make it easy to write shell scripts in the Scheme48 exec language.
@c 
@c * -ll module-file-name
@c 
@c Load library module into config package. This is just like the -lm switch,except that it searches the library-directory path list (see Section @ref{11.1.4})
@c for the file to load.
@c Specifically, it means: search through the library-directories list of directo-ries looking for a module file of the given name, and load it in. Scsh uses
@c 
@c the procedure find-library-file from Section @ref{11.1.4} to perform the search.
@c 
@c * -lel exec-file-nameAs above, but load the specified file into scsh's exec package. This is just
@c 
@c like the -le switch, except that it searches the library-directory path listfor the file to load.
@c 
@c 178
@c 
@c * +lp lib-dir,lp+ lib-dirAdd directory lib-dir to the beginning or end of the library-directories path
@c 
@c list, respectively.
@c lib-dir is a single directory. It is not split at colons or otherwise processed.These switches correspond to the procedures
@c 
@c lib-dirs-prepend! and
@c lib-dirs-append! from Section @ref{11.1.4}.
@c 
@c * +lpe, lpe+As above, except that ~home-directory syntax and environment variables
@c 
@c are expanded out.
@c 
@c * +lpsd,lpsd+Add script-file's directory to the beginning or end of the library-directories
@c 
@c path list, respectively. These switches correspond to the procedures
@c lib-dirs-prepend-script-dir! and lib-dirs-append-script-dir!from Section @ref{11.1.4}.
@c 
@c * -lp-clear, -lp-defaultSet the library-directories path list to the empty list and the system
@c 
@c default, respectively. These switches correspond to the procedures
@c clear-lib-dirs! and reset-lib-dirs! from Section @ref{11.1.4}.
@c 
@c The two switches are useful if you would like to protect your script frominfluence by the
@c 
@c $SCSH LIB DIRS variable.
@c 
@c In these cases, the $SCSH LIB DIRS environment variable is never evenparsed, so a bogus value will not affect the script's execution at all.
@c 
@c @subsection The meta argument
@c 
@c The scsh switch parser takes a special command-line switch, a single back-slash called the "meta-argument," which is useful for shell scripts. If the initial
@c command-line argument is a "\" argument, followed by a filename argumentfname, scsh will open the file fname and read more arguments from the second
@c line of this file. This list of arguments will then replace the "\" argument--i.e., the new arguments are inserted in front of fname, and the argument parser
@c resumes argument scanning. This is used to overcome a limitation of the #!feature: the
@c 
@c #! line can only specify a single argument after the interpreter. Forexample, we might hope the following scsh script,
@c 
@c ekko, would implement asimple-minded version of the Unix
@c echo program:
@c 
@c 179
@c 
@c #!/usr/local/bin/scsh -e main -s
@c !#
@c (define (main args)
@c 
@c (map (* (arg) (display arg) (display " "))
@c 
@c (cdr args))
@c (newline))
@c 
@c The idea would be that the command
@c 
@c ekko Hi there.
@c would by expanded by the exec(2) kernel call into
@c 
@c /usr/local/bin/scsh -e main -s ekko Hi there.
@c In theory, this would cause scsh to start up, load in file ekko, call the entry pointon the command-line list
@c 
@c (main '("ekko" "Hi" "there."))
@c and exit.
@c 
@c Unfortunately, the Unix exec(2) syscall's support for scripts is not verygeneral or well-designed. It will not handle multiple arguments; the
@c 
@c #! lineis usually required to contain no more than 32 characters; it is not recursive.
@c 
@c If these restrictions are violated, most Unix systems will not provide accurateerror reporting, but either fail silently, or simply incorrectly implement the desired functionality. These are the facts of Unix life.
@c 
@c In the ekko example above, our #! trigger line has three arguments ("-e","
@c main", and "-s"), so it will not work. The meta-argument is how we workaround this problem. We must instead invoke the scsh interpreter with the single \ argument, and put the rest of the arguments on line two of the program.Here's the correct program:
@c 
@c #!/usr/local/bin/scsh \
@c -e main -s
@c !#
@c (define (main args)
@c 
@c (map (* (arg) (display arg) (display " "))
@c 
@c (cdr args))
@c (newline))
@c 
@c Now, the invocation starts as
@c 
@c ekko Hi there.
@c and is expanded by exec(2) into
@c 
@c /usr/local/bin/scsh \ ekko Hi there.
@c 
@c 180
@c 
@c When scsh starts up, it expands the "\" argument into the arguments read fromline two of
@c 
@c ekko, producing this argument list:
@c 
@c -e main -s ekko Hi there."
@c Expanded from \ ekko
@c With this argument list, processing proceeds as we intended.
@c 
@c Secondary argument syntax
@c Scsh uses a very simple grammar to encode the extra arguments on the secondline of the scsh script. The only special characters are space, tab, newline, and
@c backslash.
@c 
@c * Each space character terminates an argument. This means that twospaces in a row introduce an empty-string argument.
@c 
@c * The tab character is not permitted (unless you quote it with the backslashcharacter described below). This is to prevent the insidious bug where
@c 
@c you believe you have six space characters, but you really have a tab char-acter, and vice-versa.
@c 
@c * The newline character terminates an argument, like the space character,and also terminates the argument sequence. This means that an empty
@c 
@c line parses to the singleton list whose one element is the empty string:
@c (""). The grammar doesn't admit the empty list.
@c 
@c * The backslash character is the escape character. It escapes backslash,space, tab, and newline, turning off their special functions, and allowing them to be included in arguments. The @acronym{ANSI} C escape sequences(
@c 
@c \b, \n, \r and \t) are also supported; these also produce argument-constituents--
@c 
@c \n doesn't act like a terminating newline. The escape se-quence
@c \nnn for exactly three octal digits reads as the character whoseA
@c SCII code is nnn. It is an error if backslash is followed by just one or twooctal digits:
@c 
@c \3Q is an error. Octal escapes are always constituent chars.Backslash followed by other chars is not allowed (so we can extend the
@c 
@c escape-code space later if we like).
@c You have to construct these line-two argument lines carefully. In particular,beware of trailing spaces at the end of the line--they'll give you extra trailing
@c empty-string arguments. Here's an example:
@c 
@c #!/bin/interpreter \
@c foo bar quux\ yow
@c 
@c 181
@c 
@c would produce the arguments
@c 
@c ("foo" "bar" "" "quux yow")
@c 
@c @subsection Examples
@c 
@c * scsh -dm -m myprog -e top -s myprog.scmLoad
@c 
@c myprog.scm into the config package, then shift to the myprog pack-age and call
@c 
@c (top '("myprog.scm")), then exit. This sort of invocationis typically used in
@c 
@c #! script lines (see below).
@c 
@c * scsh -c '(display "Hello, world.")'A simple program.
@c 
@c * scsh -o bigschemeStart up interactively in the user package after opening structure
@c 
@c bigscheme.
@c 
@c * scsh -o bigscheme -- Three args passedStart up interactively in the user package after opening
@c 
@c bigscheme. The
@c command-line-args variable in the scsh package is bound to the list
@c ("Three" "args" "passed"), and the (command-line) procedure re-turns the list
@c 
@c ("scsh" "Three" "args" "passed").
@c 
@c * Program ekkoThis shell script, called
@c 
@c ekko, implements a version of the Unix echo pro-gram:
@c 
@c #!/usr/local/bin/scsh -s
@c !#
@c (for-each (* (arg) (display arg) (display " "))
@c 
@c command-line-args)
@c 
@c Note this short program is an example of a script--it executes as it loads.The Unix rule for executing
@c 
@c #! shell scripts causes
@c 
@c ekko Hello, world.
@c to expand as
@c 
@c /usr/local/bin/scsh -s ekko Hello, world.
@c 
@c * Program ekkoThis is the same program, not as a script. Writing it this way makes it
@c 
@c possible to compile the program (and then, for instance, dump it out as aheap image).
@c 
@c 182
@c 
@c #!/usr/local/bin/scsh \
@c -e top -s
@c !#
@c (define (top args)
@c 
@c (for-each (* (arg) (display arg) (display " "))
@c 
@c (cdr args)))
@c 
@c The exec(2) expansion of the #! line together with the scsh expansionof the "
@c 
@c \ ekko" meta-argument (see section @ref{11.1.6}) gives the followingcommand-line expansion:
@c 
@c ekko Hello, world.=)
@c 
@c /usr/local/bin/scsh \ ekko Hello, world.=)
@c /usr/local/bin/scsh -e top -s ekko Hello, world.
@c 
@c * Program sortThis is a program to replace the Unix
@c 
@c sort utility--sorting lines read fromstdin, and printing the results on stdout. Note that the source code defines a general sorting package, which is useful (1) as a Scheme moduleexporting sort procedures to other Scheme code, and (2) as a standalone
@c program invoked from the top procedure.
@c 
@c #!/usr/local/bin/scsh \
@c -dm -m sort-toplevel -e top -s
@c !#
@c 
@c ;;; This is a sorting module. TOP procedure exports
@c ;;; the functionality as a Unix program akin to sort(1).
@c (define-structures ((sort-struct (export sort-list
@c 
@c sort-vector!))
@c (sort-toplevel (export top)))
@c (open scheme)
@c 
@c (begin (define (sort-list elts <=) ...)
@c 
@c (define (sort-vec! vec <=) ...)
@c 
@c ;; Parse the command line and
@c ;; sort stdin to stdout.
@c (define (top args)
@c 
@c ...)))
@c 
@c The expansion below shows how the command-line scanner (1) loads theconfig file
@c 
@c sort (written in the Scheme 48 module language), (2) switchesto the package underlying the
@c 
@c sort-toplevel structure, (3) calls (top
@c '("sort" "foo" "bar")) in the package, and finally (4) exits.
@c 
@c 183
@c 
@c sort foo bar
@c =) /usr/local/bin/scsh \ sort foo bar
@c =) /usr/local/bin/scsh -dm -m sort-toplevel -e top -s sort foo bar
@c 
@c An alternate method would have used a
@c 
@c -n #f -o sort-toplevel
@c sequence of switches to specify a top-level package.
@c 
@c Note that the sort example can be compiled into a Unix program by loadingthe file into an scsh process, and dumping a heap with top-level
@c 
@c top. Even ifwe don't want to export the sort's functionality as a subroutine library, it is still
@c 
@c useful to write the sort program with the module language. The command linedesign allows us to run this program as either an interpreted script (given the
@c #! args in the header) or as a compiled heap image.
@c 
@c @subsection Process exit values
@c 
@c Scsh ignores the value produced by its top-level computation when determin-ing its exit status code. If the top-level computation completed with no errors,
@c scsh dies with exit code 0. For example, a scsh process whose top-level is spec-ified by a
@c 
@c -c exp or a -e entry entry point ignores the value produced by eval-uating exp and calling entry, respectively. If these computations terminate with
@c 
@c no errors, the scsh process exits with an exit code of 0.
@c 
@c To return a specific exit status, use the exit procedure explicitly, e.g.,
@c 
@c scsh -c \
@c 
@c "(exit (status:exit-val (run (| (fmt) (mail shivers)))))"
@c 
@section The scsh virtual machine
@c 
@c To run the Scheme 48 implementation of scsh, you run a specially modifiedcopy of the Scheme 48 virtual machine with a scsh heap image. The scsh binary is actually nothing but a small cover program that invokes the byte-codeinterpreter on the scsh heap image for you. This allows you to simply start
@c up an interactive scsh from a command line, as well as write shell scripts thatbegin with the simple trigger
@c 
@c #!/usr/local/bin/scsh -s
@c You can also directly execute the virtual machine, which takes its own setof command-line switches.. For example, this command starts the vm up with
@c 
@c a 1 Mword heap (split into two semispaces):
@c 
@c 184
@c 
@c scshvm -o scshvm -h 1000000 -i scsh.image arg1 arg2 ...
@c The vm peels off initial vm arguments up to the -i heap image argument,which terminates vm argument parsing. The rest of the arguments are
@c 
@c passed off to the scsh top-level. Scsh's top-level removes scsh switches,as discussed in the previous section; the rest show up as the value of
@c command-line-arguments.
@c 
@c Directly executing the vm can be useful to specify non-standard switches,or invoke the virtual machine on special heap images, which can contain precompiled scsh programs with their own top-level procedures.
@c 
@c @subsection VM arguments
@c 
@c The vm takes arguments in the following form:
@c 
@c scshvm [meta-arg] [vm-options+] [end-option scheme-args]
@c where
@c 
@c meta-arg: \ filename
@c 
@c vm-option: -h heap-size-in-words
@c 
@c -s stack-size-in-words
@c -o object-file-name
@c 
@c end-option: -i image-file-name
@c 
@c --
@c 
@c The vm's meta-switch "\ filename" is handled the same as scsh's meta-switch, and serves the same purpose.
@c 
@c VM options
@c The -o object-file-name switch tells the vm where to find relocation informationfor its foreign-function calls. Scsh will use a pre-compiled default if it is not
@c specified. Scsh must have this information to run, since scsh's syscall interfacesare done with foreign-function calls.
@c 
@c The -h and -s options tell the vm how much space to allocate for the heapand stack. The heap size value is the total number of words allocated for the
@c heap; this space is then split into two semi-spaces for Scheme 48's stop-and-copy collector.
@c 
@c 185
@c 
@c End options
@c End options terminate argument parsing. The -i switch is followed by thename of a heap image for the vm to execute. The image-file-name string is also
@c taken to be the name of the program being executed by the VM; this name be-comes the head of the argument list passed to the heap image's top-level entry
@c point. The tail of the argument list is constructed from all following arguments.
@c 
@c The -- switch terminates argument parsing without giving a specific heapimage; the vm will start up using a default heap (whose location is compiled
@c 
@c into the vm). All the following arguments comprise the tail of the list passedoff to the heap image's top-level procedure.
@c 
@c Notice that you are not allowed to pass arguments to the heap image's top-level procedure (e.g., scsh) without delimiting them with
@c 
@c -i or -- flags.
@c 
@c @subsection Stripped image
@c 
@c Besides the standard image scsh.image scsh also ships with the muchsmaller image
@c 
@c stripped-scsh.image. This image contains the same codeas the standard image but has almost all debugging information removed.
@c 
@c stripped-scsh.image is intended to be used with standalone programs wherestartup time and memory consumption count but debugging the scheme code
@c is not that important. To use the image the VM has to be called directly and thepath to the image must be given after the
@c 
@c -i argument.
@c 
@c @subsection Inserting interpreter triggers into heap images
@c 
@c Scheme 48's heap image format allows for an informational header: when thevm loads in a heap image, it ignores all data occurring before the first control-L
@c character (ASCII 12). This means that you can insert a "#!" trigger line into aheap image, making it a form of executable "shell script." Since the vm requires
@c multiple arguments to be given on the command line, you must use the meta-switch. Here's an example heap-image header:
@c 
@c #!/usr/local/lib/scsh/scshvm \
@c -o /usr/local/lib/scsh/scshvm -i
@c ... Your heap image goes here ...
@c 
@c @subsection Inserting a double-level trigger into Scheme programs
@c 
@c If you're a nerd, you may enjoy doing a double-level machine shift in the trig-ger line of your Scheme programs with the following magic:
@c 
@c 186
@c 
@c #!/usr/local/lib/scsh/scshvm \
@c -o /usr/local/lib/scsh/scshvm -i /usr/local/lib/scsh/scsh.image -s
@c !#
@c ... Your Scheme program goes here ...
@c 
@section Compiling scsh programs
@c 
@c Scsh allows you to create a heap image with your own top-level procedure.Adding the pair of lines
@c 
@c #!/usr/local/lib/scsh/scshvm \
@c -o /usr/local/lib/scsh/scshvm -i
@c 
@c to the top of the heap image will turn it into an executable Unix file.
@c 
@c You can create heap images with the following two procedures.
@c 
@c (dump-scsh-program main fname) -! undefined procedure
@c 
@c This procedure writes out a scsh heap image. When the heap image isexecuted by the Scheme 48 vm, it will call the main procedure, passing
@c 
@c it the vm's argument list. When main returns an integer value i, the vmexits with exit status
@c 
@c i. The Scheme vm will parse command-line switchesas described in section @ref{11.2.1}; remaining arguments form the tail of the
@c 
@c command-line list that is passed to main. (The head of the list is the nameof the program being executed by the vm.) Further argument parsing (as
@c described for scsh in section @ref{11.1.5}) is not performed.
@c The heap image created by dump-scsh-program has unused code anddata pruned out, so small programs compile to much smaller heap images.
@c (dump-scsh fname) -! undefined procedure
@c 
@c This procedure writes out a heap image with the standard scsh top-level.When the image is resumed by the vm, it will parse and execute scsh
@c 
@c command-line switches as described in section @ref{11.1.5}.
@c You can use this procedure to write out custom scsh heap images thathave specific packages preloaded and start up in specific packages.
@c 
@c Unfortunately, Scheme 48 does not support separate compilation of Schemefiles or Scheme modules. The only way to compile is to load source and then
@c dump out a heap image. One occasionally hears rumours that this is beingaddressed by the Scheme 48 development team.
@c 
@c 187
@section Standard file locations
@c 
@c Because the scshvm binary is intended to be used for writing shell scripts, it isimportant that the binary be installed in a standard place, so that shell scripts
@c can dependably refer to it. The standard directory for the scsh tree should be
@c /usr/local/lib/scsh/. Whenever possible, the vm should be located in
@c 
@c /usr/local/lib/scsh/scshvm
@c and a scsh heap image should be located in
@c 
@c /usr/local/lib/scsh/scsh.image
@c The top-level scsh program should be located in
@c 
@c /usr/local/lib/scsh/scsh
@c with a symbolic link to it from
@c 
@c /usr/local/bin/scsh
@c 
@c The Scheme 48 image format allows heap images to have #! triggers, so
@c scsh.image should have a #! trigger of the following form:
@c 
@c #!/usr/local/lib/scsh/scshvm \
@c -o /usr/local/lib/scsh/scshvm -i
@c ... heap image goes here ...

@node Index
@unnumbered Index

@c @printindex cp
@c 
@c @c The below procedures will presumably be moved to a separate index
@c @c file. Or perhaps they need to be moved back into the document? That'll
@c @c be a pain in the ass.
@c 
@c @c *temp-file-template*, 52
@c @c ->uid, 64
@c @c ->username, 64
@c @c %exec, 55
@c @c %exit, 55
@c @c %fork, 56
@c @c %fork/pipe, 56
@c @c %fork/pipe+, 57
@c @c %read-delimited!, 141&, 13
@c 
@c @c &, 13
@c @c &&, 20
@c 
@c @c reduce-port , 16
@c @c absolute-file-name, 109
@c @c accept-connection, 99
@c @c add-after, 80
@c @c add-before, 80
@c @c alist->env, 78
@c @c alist-compress, 79
@c @c alist-delete, 78
@c @c alist-update, 78
@c @c arg, 65
@c @c arg*, 65
@c @c argv, 65
@c @c arithmetic-shift, 161
@c @c ascii->char, 110
@c @c autoreap-policy, 59awk, 151
@c 
@c @c become-session-leader, 87
@c @c bin-dir, 168
@c @c bind-listen-accept-loop, 95
@c @c bind-prepare-listen-accept-loop,95
@c 
@c @c bind-socket, 98
@c @c bitwise-and, 161
@c @c bitwise-ior, 161
@c @c bitwise-not, 161
@c @c bitwise-xor, 161
@c @c break-dot-lock, 162
@c @c bufpol/block, 38
@c @c bufpol/line, 38
@c @c bufpol/none, 38
@c 
@c @c call-terminally, 55
@c @c call-with-string-output-port,26
@c 
@c @c call/fdes, 30
@c @c cflags, 168
@c @c char->ascii, 110
@c @c char-ascii?, 110
@c @c char-blank?, 110
@c @c char-digit?, 110
@c @c char-graphic?, 110
@c @c char-hex-digit?, 110
@c @c char-iso-control?, 110
@c @c char-letter+digit?, 110
@c @c char-letter?, 110
@c @c char-lower-case?, 110
@c @c char-printing?, 110
@c @c char-punctuation?, 110
@c @c char-title-case?, 110
@c @c char-upper-case?, 110
@c @c char-whitespace?, 110
@c @c chdir, 62
@c @c clean-up-cres, 137
@c @c close, 25
@c @c close-after, 24
@c @c close-directory-stream, 47
@c 
@c @c 189
@c 
@c @c close-socket, 95
@c @c close-syslog-channel, 166
@c @c command-line, 64command-line-arguments, 64
@c 
@c @c compiler-flags, 168
@c @c connect-socket, 98
@c @c connect-socket-no-wait, 98
@c @c connect-socket-successful?, 98
@c @c control-tty-file-name, 87
@c @c copy-tty-info, 84
@c @c cppflags, 168
@c @c cpu-ticks/sec, 64
@c @c create-directory, 41
@c @c create-fifo, 41
@c @c create-hard-link, 41
@c @c create-socket, 95
@c @c create-socket-pair, 95
@c @c create-symlink, 41
@c @c create-temp-file, 51
@c @c crypt, 161
@c @c current-thread, 157
@c @c cwd, 62
@c 
@c @c date, 72
@c @c date, 74
@c @c date->string, 75default-lib-dirs, 173
@c 
@c @c define-record, 7
@c @c defs, 168
@c @c delete-directory, 42
@c @c delete-file, 42
@c @c delete-filesys-object, 42
@c @c directory-as-file-name, 106
@c @c directory-files, 46
@c @c disable-tty-char, 83
@c @c drain-tty, 85
@c @c dump-scsh, 187
@c @c dump-scsh-program, 187
@c @c dup, 31
@c @c dup->fdes, 31
@c @c dup->inport, 31
@c @c dup->outport, 31
@c 
@c @c enabled-interrupts, 70
@c 
@c @c env->alist, 78
@c @c errno-error, 21
@c @c error-output-port, 24
@c @c exec, 54exec-epf, 13
@c 
@c @c exec-epf, 13
@c @c exec-path, 54exec-path-list, 81
@c 
@c @c exec-path-search, 55
@c @c exec-path/env, 54
@c @c exec-prefix, 168
@c @c exec/env, 54
@c @c exit, 55
@c @c expand-file-name, 109
@c 
@c @c fdes->inport, 30
@c @c fdes->outport, 30
@c @c fdes-flags, 32
@c @c fdes-status, 33
@c @c field-reader, 148
@c @c field-splitter, 144
@c @c file-directory?, 44
@c @c file-executable?, 46
@c @c file-exists?, 46
@c @c file-fifo?, 44
@c @c file-group, 44
@c @c file-info, 43
@c @c file-info-directory?, 45
@c @c file-info-executable?, 46
@c @c file-info-fifo?, 45
@c @c file-info-not-executable?, 46
@c @c file-info-not-readable?, 46
@c @c file-info-not-writable?, 46
@c @c file-info-readable?, 46
@c @c file-info-regular?, 45
@c @c file-info-socket?, 45
@c @c file-info-special?, 45
@c @c file-info-symlink?, 45
@c @c file-info-writable?, 46
@c @c file-info:atime, 43
@c @c file-info:ctime, 43
@c @c file-info:device, 43
@c @c file-info:gid, 43
@c @c file-info:inode, 43
@c 
@c @c 190
@c 
@c @c file-info:mode, 43
@c @c file-info:mtime, 43
@c @c file-info:nlinks, 43
@c @c file-info:size, 43
@c @c file-info:type, 43
@c @c file-info:uid, 43
@c @c file-inode, 44
@c @c file-last-access, 44
@c @c file-last-mod, 44
@c @c file-last-status-change, 44
@c @c file-match, 49
@c @c file-mode, 44
@c @c file-name-absolute?, 106
@c @c file-name-as-directory, 105
@c @c file-name-directory, 106
@c @c file-name-directory?, 105
@c @c file-name-extension, 107
@c @c file-name-non-directory?, 105
@c @c file-name-nondirectory, 106
@c @c file-name-sans-extension, 108
@c @c file-nlinks, 44
@c @c file-not-executable?, 45
@c @c file-not-exists?, 46
@c @c file-not-readable?, 45
@c @c file-not-writable?, 45
@c @c file-owner, 44
@c @c file-readable?, 46
@c @c file-regular?, 44
@c @c file-size, 44
@c @c file-socket?, 44
@c @c file-special?, 44
@c @c file-symlink?, 44
@c @c file-type, 44
@c @c file-writable?, 46
@c @c fill-in-date!, 75
@c @c find-library-file, 173
@c @c flush-all-ports, 39
@c @c flush-submatches, 134
@c @c flush-tty/both, 86
@c @c flush-tty/input, 86
@c @c flush-tty/output, 86
@c @c force-output, 38
@c @c fork, 56
@c @c fork-pty-session, 87
@c 
@c @c fork-thread, 160
@c @c fork/pipe, 56
@c @c fork/pipe+, 57
@c @c format-date, 75
@c 
@c @c get-lock-region, 40
@c @c getenv, 77
@c @c glob, 47
@c @c glob-quote, 49
@c @c group-info, 64
@c @c group-info:gid, 64
@c @c group-info:members, 64
@c @c group-info:name, 64
@c 
@c @c handle-signal-default, 71
@c @c home-dir, 109home-directory, 81
@c 
@c @c home-file, 109
@c @c host, 167
@c @c host-info, 101
@c 
@c @c if-match, 133
@c @c if-sre-form, 138
@c @c ignore-signal, 71
@c @c include-dir, 168
@c @c infix-splitter, 144
@c @c internet-address->socket-address,97
@c 
@c @c interrupt-handler, 71
@c @c interrupt-set, 70
@c @c interrupt/alarm, 68
@c @c interrupt/alrm, 68
@c @c interrupt/chld, 68
@c @c interrupt/cont, 68
@c @c interrupt/hup, 68
@c @c interrupt/info, 68
@c @c interrupt/int, 68
@c @c interrupt/io, 68
@c @c interrupt/keyboard, 68
@c @c interrupt/memory-shortage, 68
@c @c interrupt/poll, 68
@c @c interrupt/prof, 68
@c @c interrupt/pwr, 68
@c @c interrupt/quit, 68
@c 
@c @c 191
@c 
@c @c interrupt/term, 68
@c @c interrupt/tstp, 68
@c @c interrupt/urg, 68
@c @c interrupt/usr1, 68
@c @c interrupt/usr2, 68
@c @c interrupt/vtalrm, 68
@c @c interrupt/winch, 68
@c @c interrupt/xcpu, 68
@c @c interrupt/xfsz, 68
@c @c itimer, 67
@c 
@c @c join-strings, 147
@c @c ldflags, 168
@c @c let-match, 133
@c @c lib-dir, 168
@c @c lib-dirs, 173
@c @c lib-dirs-list, 168
@c @c libs, 168
@c @c linker-flags, 168
@c @c listen-socket, 99
@c @c lock-owner-uid, 158
@c @c lock-region, 40
@c @c lock-region/no-block, 40
@c @c lock-region:end, 39
@c @c lock-region:exclusive?, 39
@c @c lock-region:len, 39
@c @c lock-region:proc, 39
@c @c lock-region:start, 39
@c @c lock-region:whence, 39
@c @c lock-region?, 39
@c @c lock?, 157
@c 
@c @c machine, 168
@c @c make-char-port-filter, 20
@c @c make-date, 73
@c @c make-lock, 157
@c @c make-lock-region, 40
@c @c make-md5-context, 167
@c @c make-placeholder, 158
@c @c make-pty-generator, 88
@c @c make-re-char-set, 136
@c @c make-re-choice, 136
@c @c make-re-dsm, 136
@c 
@c @c make-re-repeat, 136
@c @c make-re-seq, 135
@c @c make-re-string, 136
@c @c make-re-submatch, 136
@c @c make-regexp, 129
@c @c make-string-input-port, 26
@c @c make-string-output-port, 26
@c @c make-string-port-filter, 20
@c @c make-syslog-mask, 165
@c @c make-syslog-options, 163
@c @c make-tty-info, 84
@c @c man-dir, 168
@c @c match-cond, 133
@c @c match:end, 130
@c @c match:start, 130
@c @c match:substring, 130
@c @c maybe-obtain-lock, 158
@c @c md5-context->md5-digest, 167
@c @c md5-context?, 167
@c @c md5-digest->number, 167
@c @c md5-digest-for-port, 167
@c @c md5-digest-for-string, 167
@c @c md5-digest?, 167
@c @c most-recent-sigevent, 159
@c @c move->fdes, 30
@c 
@c @c network-info, 101
@c @c next-sigevent, 159
@c @c next-sigevent-set, 159
@c @c next-sigevent-set/no-wait, 159
@c @c next-sigevent/no-wait, 159
@c @c nice, 63
@c @c number->md5-digest, 167
@c 
@c @c obtain-dot-lock, 162
@c @c obtain-lock, 157
@c @c open-control-tty, 86
@c @c open-directory-stream, 47
@c @c open-fdes, 32
@c @c open-file, 32
@c @c open-input-file, 32
@c @c open-output-file, 32
@c @c open-pty, 88
@c @c open-syslog-channel, 166
@c 
@c @c 192
@c 
@c @c os, 168
@c @c parent-pid, 62
@c @c parse-file-name, 108
@c @c parse-sre, 138
@c @c parse-sres, 138
@c @c path-list->file-name, 107
@c @c pid, 62
@c @c pid->proc, 58
@c @c pipe, 33
@c @c placeholder-value, 158
@c @c placeholder?, 158
@c @c port->fdes, 30
@c @c port->list, 15
@c @c port->sexp-list, 15
@c @c port->socket, 96
@c @c port->string, 15
@c @c port->string-list, 15
@c @c port-fold, 16
@c @c port-revealed, 30
@c @c posix-string->regexp, 135
@c @c prefix, 168
@c @c priority, 63proc, 58
@c 
@c @c proc:pid, 58proc?, 58
@c @c process-group, 62
@c @c process-sleep, 67
@c @c process-sleep-until, 67
@c @c process-times, 63
@c @c protocol-info, 101
@c @c pty-name->tty-name, 88
@c 
@c @c re-any, 137
@c @c re-any?, 137re-bol, 136
@c 
@c @c re-bol?, 136re-bos, 136
@c @c re-bos?, 136
@c @c re-char-set, 136
@c @c re-char-set:cset, 136
@c @c re-char-set?, 136
@c @c re-choice, 136
@c @c re-choice:elts, 136
@c 
@c @c re-choice:tsm, 136
@c @c re-choice?, 136
@c @c re-dsm, 136
@c @c re-dsm:body, 136
@c @c re-dsm:post-dsm, 136
@c @c re-dsm:pre-dsm, 136
@c @c re-dsm:tsm, 136
@c @c re-dsm?, 136re-empty, 137
@c 
@c @c re-empty?, 137re-eol, 136
@c @c re-eol?, 136re-eos, 136
@c @c re-eos?, 136re-nonl, 137
@c @c re-repeat:from, 136
@c @c re-repeat:to, 136
@c @c re-repeat:tsm, 136
@c @c re-repeat?, 136
@c @c re-seq, 135
@c @c re-seq:elts, 135
@c @c re-seq:tsm, 136
@c @c re-seq?, 135
@c @c re-string, 136
@c @c re-string:chars, 136
@c @c re-string?, 136
@c @c re-submatch:post-dsm, 136
@c @c re-submatch:pre-dsm, 136
@c @c re-submatch:tsm, 136
@c @c re-submatch?, 136re-trivial, 137
@c 
@c @c re-trivial?, 137
@c @c re-tsm, 137
@c @c read-delimited, 141
@c @c read-delimited!, 141
@c @c read-directory-stream, 47
@c @c read-line, 140
@c @c read-paragraph, 141
@c @c read-string, 33
@c @c read-string!, 33
@c @c read-string!/partial, 34
@c @c read-string/partial, 34
@c @c read-symlink, 42
@c @c reap-zombies, 59
@c 
@c @c 193
@c 
@c @c receive-message, 99
@c @c receive-message!, 99
@c @c receive-message!/partial, 99
@c @c receive-message/partial, 99
@c @c record-reader, 144
@c @c regexp->posix-string, 135
@c @c regexp->scheme, 138
@c @c regexp->sre, 134
@c @c regexp-fold, 131
@c @c regexp-fold-right, 132
@c @c regexp-for-each, 133
@c @c regexp-search, 129
@c @c regexp-search?, 129
@c @c regexp-substitute, 130
@c @c regexp-substitute/global, 130
@c @c regexp?, 129, 137
@c @c release-dot-lock, 162
@c @c release-lock, 158
@c @c release-port-handle, 30
@c @c relinquish-timeslice, 157
@c @c rename-file, 42
@c @c replace-extension, 108
@c @c resolve-file-name, 109run, 13
@c 
@c @c run, 13
@c @c run/collecting, 17
@c @c run/collecting*, 17
@c @c run/file, 14
@c @c run/file*, 15
@c @c run/port, 14
@c @c run/port*, 15
@c @c run/port+proc, 17
@c @c run/port+proc*, 17
@c @c run/sexp, 14
@c @c run/sexp*, 15
@c @c run/sexps, 14
@c @c run/sexps*, 15
@c @c run/string, 14
@c @c run/string*, 15
@c @c run/strings, 14
@c @c run/strings*, 15
@c @c rx, 129
@c 
@c @c seek, 31
@c 
@c @c select , 35
@c @c select-port-channels, 36
@c @c select-ports, 36
@c @c send-message, 99
@c @c send-message/partial, 99
@c @c send-tty-break, 85
@c @c service-info, 101
@c @c set-enabled-interrupts, 70
@c @c set-fdes-flags, 32
@c @c set-fdes-status, 33
@c @c set-file-group, 42
@c @c set-file-mode, 42
@c @c set-file-owner, 42
@c @c set-file-times, 42
@c @c set-gid, 63
@c @c set-interrupt-handler, 70
@c @c set-port-buffering, 38
@c @c set-priority, 63
@c @c set-process-group, 62
@c @c set-socket-option, 100
@c @c set-tty-info/drain, 85
@c @c set-tty-info/flush, 85
@c @c set-tty-info/now, 85
@c @c set-tty-process-group, 87
@c @c set-uid, 63
@c @c set-umask, 62
@c @c set-user-effective-gid, 63
@c @c set-user-effective-uid, 63
@c @c setenv, 77
@c @c shutdown-socket, 99
@c @c sigevent?, 159
@c @c signal->interrupt, 67
@c @c signal-process, 67
@c @c signal-process-group, 67
@c @c signal/abrt, 69
@c @c signal/alrm, 68
@c @c signal/bus, 69
@c @c signal/chld, 68
@c @c signal/cont, 68
@c @c signal/emt, 69
@c @c signal/fpe, 69
@c @c signal/hup, 68
@c @c signal/ill, 69
@c @c signal/info, 68
@c 
@c @c 194
@c 
@c @c signal/int, 68
@c @c signal/io, 68
@c @c signal/iot, 69
@c @c signal/kill, 69
@c @c signal/pipe, 69
@c @c signal/poll, 68
@c @c signal/prof, 68
@c @c signal/pwr, 68
@c @c signal/quit, 68
@c @c signal/segv, 69
@c @c signal/stop, 69
@c @c signal/sys, 69
@c @c signal/term, 68
@c @c signal/trap, 69
@c @c signal/tstp, 68
@c @c signal/ttin, 69
@c @c signal/ttou, 69
@c @c signal/urg, 68
@c @c signal/usr1, 68
@c @c signal/usr2, 68
@c @c signal/vtalrm, 68
@c @c signal/winch, 68
@c @c signal/xcpu, 68
@c @c signal/xfsz, 68
@c @c simplify-file-name, 109
@c @c simplify-regexp, 134
@c @c skip-char-set, 142
@c @c sleep, 157
@c @c sloppy-suffix-splitter, 144
@c @c socket-address->internet-address,97
@c 
@c @c socket-address->unix-address,97
@c @c socket-connect, 94
@c @c socket-local-address, 99
@c @c socket-option, 100
@c @c socket-remote-address, 99
@c @c spawn, 156
@c @c split-file-name, 107
@c @c spoon, 160
@c @c sre->regexp, 134
@c @c sre-form?, 138
@c @c start-tty-input, 86
@c @c start-tty-output, 86
@c 
@c @c static-regexp?, 139
@c @c status:exit-val, 61
@c @c status:stop-sig, 61
@c @c status:term-sig, 61
@c @c stdio->stdports, 25
@c @c stdports->stdio, 25
@c @c stop-tty-input, 86
@c @c stop-tty-output, 86
@c @c string-match, 129
@c @c string-output-port-output, 26
@c @c substitute-env-vars, 110
@c @c suffix-splitter, 144
@c @c suspend, 56
@c @c sync-file, 43
@c @c sync-file-system, 43
@c @c syslog, 166
@c @c syslog-facility, 164
@c @c syslog-facility?, 164
@c @c syslog-level, 165
@c @c syslog-level?, 165
@c @c syslog-mask, 165syslog-mask-all, 165
@c 
@c @c syslog-mask-upto, 165
@c @c syslog-mask?, 165
@c @c syslog-option, 163
@c @c syslog-option?, 163
@c @c syslog-options, 163
@c @c syslog-options?, 163
@c @c system-name, 66
@c 
@c @c tell, 32
@c @c temp-file-channel, 53
@c @c temp-file-iterate, 52
@c @c terminate-current-thread, 157
@c @c thread-name, 157
@c @c thread-uid, 157
@c @c thread?, 157
@c @c ticks/sec, 74time, 72
@c 
@c @c time, 75
@c @c time+ticks, 74
@c @c truncate-file, 43
@c @c tty-file-name, 82
@c @c tty-info, 85
@c 
@c @c 195
@c 
@c @c tty-info record type, 82
@c @c tty-info:control-chars, 82
@c @c tty-info:control-flags, 82
@c @c tty-info:input-flags, 82
@c @c tty-info:input-speed, 82
@c @c tty-info:local-flags, 82
@c @c tty-info:min, 82
@c @c tty-info:output-flags, 82
@c @c tty-info:output-speed, 82
@c @c tty-info:time, 82
@c @c tty-info?, 82
@c @c tty-name->pty-name, 88
@c @c tty-process-group, 87
@c @c tty?, 82
@c @c ttyc/2-stop-bits, 92
@c @c ttyc/carrier-flow-ctl, 92
@c @c ttyc/char-size, 92
@c @c ttyc/char-size5, 92
@c @c ttyc/char-size6, 92
@c @c ttyc/char-size7, 92
@c @c ttyc/char-size8, 92
@c @c ttyc/CTS-output-flow-ctl, 92
@c @c ttyc/enable-parity, 92
@c @c ttyc/enable-read, 92
@c @c ttyc/hup-on-close, 92
@c @c ttyc/ignore-flags, 92
@c @c ttyc/no-modem-sync, 92
@c @c ttyc/odd-parity, 92
@c @c ttyc/RTS-input-flow-ctl, 92
@c @c ttychar/delayed-suspend, 89
@c @c ttychar/delete-char, 89
@c @c ttychar/delete-line, 89
@c @c ttychar/delete-word, 89
@c @c ttychar/discard, 89
@c @c ttychar/eof, 89
@c @c ttychar/eol, 89
@c @c ttychar/eol2, 89
@c @c ttychar/interrupt, 89
@c @c ttychar/literal-next, 89
@c @c ttychar/quit, 89
@c @c ttychar/reprint, 89
@c @c ttychar/start, 89
@c @c ttychar/status, 89
@c @c ttychar/stop, 89
@c 
@c @c ttychar/suspend, 89
@c @c ttyin/7bits, 90
@c @c ttyin/beep-on-overflow, 90
@c @c ttyin/check-parity, 90
@c @c ttyin/cr->nl, 90
@c @c ttyin/ignore-bad-parity-chars,90
@c 
@c @c ttyin/ignore-break, 90
@c @c ttyin/ignore-cr, 90
@c @c ttyin/input-flow-ctl, 90
@c @c ttyin/interrupt-on-break, 90
@c @c ttyin/lowercase, 90
@c @c ttyin/mark-parity-errors, 90
@c @c ttyin/nl->cr, 90
@c @c ttyin/output-flow-ctl, 90
@c @c ttyin/xon-any, 90
@c @c ttyl/alt-delete-word, 93
@c @c ttyl/canonical, 93
@c @c ttyl/case-map, 93
@c @c ttyl/echo, 93
@c @c ttyl/echo-ctl, 93
@c @c ttyl/echo-delete-line, 93
@c @c ttyl/echo-nl, 93
@c @c ttyl/enable-signals, 93
@c @c ttyl/extended, 93
@c @c ttyl/flush-output, 93
@c @c ttyl/hardcopy-delete, 93
@c @c ttyl/no-flush-on-interrupt, 93
@c @c ttyl/no-kernel-status, 93
@c @c ttyl/reprint-unread-chars, 93
@c @c ttyl/ttou-signal, 93
@c @c ttyl/visual-delete, 93
@c @c ttyl/visual-delete-line, 93
@c @c ttyout/all-delay, 91
@c @c ttyout/bs-delay, 91
@c @c ttyout/bs-delay0, 91
@c @c ttyout/bs-delay1, 91
@c @c ttyout/cr->nl, 90
@c @c ttyout/cr-delay, 91
@c @c ttyout/cr-delay0, 91
@c @c ttyout/cr-delay1, 91
@c @c ttyout/cr-delay2, 91
@c @c ttyout/cr-delay3, 91
@c @c ttyout/delay-w/fill-char, 90
@c 
@c @c 196
@c 
@c @c ttyout/discard-eot, 90
@c @c ttyout/enable, 90
@c @c ttyout/expand-tabs, 90
@c @c ttyout/ff-delay, 91
@c @c ttyout/ff-delay0, 91
@c @c ttyout/ff-delay1, 91
@c @c ttyout/fill-w/del, 90
@c @c ttyout/nl->crnl, 90
@c @c ttyout/nl-delay, 91
@c @c ttyout/nl-delay0, 91
@c @c ttyout/nl-delay1, 91
@c @c ttyout/nl-does-cr, 90
@c @c ttyout/no-col0-cr, 90
@c @c ttyout/tab-delay, 91
@c @c ttyout/tab-delay0, 91
@c @c ttyout/tab-delay1, 91
@c @c ttyout/tab-delay2, 91
@c @c ttyout/tab-delayx, 91
@c @c ttyout/uppercase, 90
@c @c ttyout/vtab-delay, 91
@c @c ttyout/vtab-delay0, 91
@c @c ttyout/vtab-delay1, 91
@c 
@c @c umask, 62
@c @c uname, 66
@c @c uncase, 134
@c @c uncase-char-set, 134
@c @c uncase-string, 134
@c @c unix-address->socket-address,97
@c 
@c @c unlock-region, 41
@c @c user-effective-gid, 63
@c @c user-effective-uid, 63
@c @c user-gid, 63
@c @c user-info, 64
@c @c user-info:gid, 64
@c @c user-info:home-dir, 64
@c @c user-info:name, 64
@c @c user-info:shell, 64
@c @c user-info:uid, 64
@c @c user-login-name, 63
@c @c user-supplementary-gids, 63
@c @c user-uid, 63
@c 
@c @c vendor, 168
@c @c wait, 60
@c @c wait-any, 60
@c @c wait-process-group, 61
@c @c with-current-input-port, 24
@c @c with-current-input-port*, 24
@c @c with-current-output-port, 24
@c @c with-current-output-port*, 24
@c @c with-cwd, 62
@c @c with-cwd*, 62
@c @c with-dot-lock, 162
@c @c with-dot-lock*, 162
@c @c with-enabled-interrupts, 70
@c @c with-enabled-interrupts*, 70
@c @c with-env, 79
@c @c with-env*, 79
@c @c with-errno-handler, 22
@c @c with-errno-handler*, 22
@c @c with-error-output-port, 24
@c @c with-error-output-port*, 24
@c @c with-region-lock, 41
@c @c with-region-lock*, 41
@c @c with-stdio-ports, 26
@c @c with-stdio-ports*, 26
@c @c with-syslog-destination, 166
@c @c with-total-env, 79
@c @c with-total-env*, 79
@c @c with-umask, 62
@c @c with-umask*, 62
@c @c with-user-effective-gid, 63
@c @c with-user-effective-gid*, 63
@c @c with-user-effective-uid, 63
@c @c with-user-effective-uid*, 63
@c @c write-string, 36
@c @c write-string/partial, 37

@bye 
